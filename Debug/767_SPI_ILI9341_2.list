
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  080077b0  080077b0  000177b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d94  08007d94  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d9c  08007d9c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001d8  08007f7c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08007f7c  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113d1  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd0  00000000  00000000  0003161a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  000345f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db4  00000000  00000000  000357b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6f2  00000000  00000000  0003656c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169d8  00000000  00000000  00060c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffd35  00000000  00000000  00077636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005854  00000000  00000000  0017736c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0017cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08007794 	.word	0x08007794

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08007794 	.word	0x08007794

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b8d      	ldr	r3, [pc, #564]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a8c      	ldr	r2, [pc, #560]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0310 	and.w	r3, r3, #16
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b87      	ldr	r3, [pc, #540]	; (8000838 <MX_GPIO_Init+0x24c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a86      	ldr	r2, [pc, #536]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b84      	ldr	r3, [pc, #528]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b81      	ldr	r3, [pc, #516]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a80      	ldr	r2, [pc, #512]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b7e      	ldr	r3, [pc, #504]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	4b7b      	ldr	r3, [pc, #492]	; (8000838 <MX_GPIO_Init+0x24c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a7a      	ldr	r2, [pc, #488]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b78      	ldr	r3, [pc, #480]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b75      	ldr	r3, [pc, #468]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a74      	ldr	r2, [pc, #464]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b72      	ldr	r3, [pc, #456]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <MX_GPIO_Init+0x24c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b69      	ldr	r3, [pc, #420]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a68      	ldr	r2, [pc, #416]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006aa:	4b63      	ldr	r3, [pc, #396]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a62      	ldr	r2, [pc, #392]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2168      	movs	r1, #104	; 0x68
 80006c6:	485d      	ldr	r0, [pc, #372]	; (800083c <MX_GPIO_Init+0x250>)
 80006c8:	f001 fe8c 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006d2:	485b      	ldr	r0, [pc, #364]	; (8000840 <MX_GPIO_Init+0x254>)
 80006d4:	f001 fe86 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	4859      	ldr	r0, [pc, #356]	; (8000844 <MX_GPIO_Init+0x258>)
 80006de:	f001 fe81 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006e8:	4857      	ldr	r0, [pc, #348]	; (8000848 <MX_GPIO_Init+0x25c>)
 80006ea:	f001 fe7b 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006ee:	2314      	movs	r3, #20
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	484e      	ldr	r0, [pc, #312]	; (800083c <MX_GPIO_Init+0x250>)
 8000702:	f001 fcc3 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000706:	2368      	movs	r3, #104	; 0x68
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	4847      	ldr	r0, [pc, #284]	; (800083c <MX_GPIO_Init+0x250>)
 800071e:	f001 fcb5 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	4844      	ldr	r0, [pc, #272]	; (8000848 <MX_GPIO_Init+0x25c>)
 8000738:	f001 fca8 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800073c:	2332      	movs	r3, #50	; 0x32
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074c:	230b      	movs	r3, #11
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	483c      	ldr	r0, [pc, #240]	; (8000848 <MX_GPIO_Init+0x25c>)
 8000758:	f001 fc98 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800075c:	2386      	movs	r3, #134	; 0x86
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076c:	230b      	movs	r3, #11
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	4835      	ldr	r0, [pc, #212]	; (800084c <MX_GPIO_Init+0x260>)
 8000778:	f001 fc88 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4829      	ldr	r0, [pc, #164]	; (8000840 <MX_GPIO_Init+0x254>)
 800079a:	f001 fc77 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800079e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	4822      	ldr	r0, [pc, #136]	; (8000840 <MX_GPIO_Init+0x254>)
 80007b8:	f001 fc68 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <MX_GPIO_Init+0x258>)
 80007d4:	f001 fc5a 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	4619      	mov	r1, r3
 80007ea:	4816      	ldr	r0, [pc, #88]	; (8000844 <MX_GPIO_Init+0x258>)
 80007ec:	f001 fc4e 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <MX_GPIO_Init+0x25c>)
 800080a:	f001 fc3f 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800080e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_GPIO_Init+0x258>)
 800082c:	f001 fc2e 	bl	800208c <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3738      	adds	r7, #56	; 0x38
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000
 8000840:	40020400 	.word	0x40020400
 8000844:	40021800 	.word	0x40021800
 8000848:	40020800 	.word	0x40020800
 800084c:	40020000 	.word	0x40020000

08000850 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000854:	f3bf 8f4f 	dsb	sy
}
 8000858:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085a:	f3bf 8f6f 	isb	sy
}
 800085e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <SCB_EnableICache+0x48>)
 8000862:	2200      	movs	r2, #0
 8000864:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000868:	f3bf 8f4f 	dsb	sy
}
 800086c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800086e:	f3bf 8f6f 	isb	sy
}
 8000872:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <SCB_EnableICache+0x48>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <SCB_EnableICache+0x48>)
 800087a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
}
 8000884:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000886:	f3bf 8f6f 	isb	sy
}
 800088a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <SCB_EnableDCache+0x84>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
}
 80008ae:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <SCB_EnableDCache+0x84>)
 80008b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008b6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	0b5b      	lsrs	r3, r3, #13
 80008bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008c0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ca:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	015a      	lsls	r2, r3, #5
 80008d0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008d4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008da:	4911      	ldr	r1, [pc, #68]	; (8000920 <SCB_EnableDCache+0x84>)
 80008dc:	4313      	orrs	r3, r2
 80008de:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	60ba      	str	r2, [r7, #8]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1ef      	bne.n	80008cc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	60fa      	str	r2, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1e5      	bne.n	80008c2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008f6:	f3bf 8f4f 	dsb	sy
}
 80008fa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <SCB_EnableDCache+0x84>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <SCB_EnableDCache+0x84>)
 8000902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000906:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000908:	f3bf 8f4f 	dsb	sy
}
 800090c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800090e:	f3bf 8f6f 	isb	sy
}
 8000912:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800092a:	f7ff ff91 	bl	8000850 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800092e:	f7ff ffb5 	bl	800089c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000932:	f001 fa35 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000936:	f000 f921 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093a:	f7ff fe57 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800093e:	f000 fc09 	bl	8001154 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000942:	f000 f9eb 	bl	8000d1c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000946:	f000 fb91 	bl	800106c <MX_TIM1_Init>
  MX_RNG_Init();
 800094a:	f000 f9b3 	bl	8000cb4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 800094e:	f000 ff1f 	bl	8001790 <ILI9341_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //----------------------------------------------------------PERFORMANCE TEST
	  		ILI9341_Fill_Screen(WHITE);
 8000952:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000956:	f001 f8c7 	bl	8001ae8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1); //กลับข้อความ
 800095a:	2001      	movs	r0, #1
 800095c:	f000 feba 	bl	80016d4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("27.1C", 30, 30, BLACK, 2, WHITE);
 8000960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	2302      	movs	r3, #2
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2300      	movs	r3, #0
 800096c:	221e      	movs	r2, #30
 800096e:	211e      	movs	r1, #30
 8000970:	4879      	ldr	r0, [pc, #484]	; (8000b58 <main+0x234>)
 8000972:	f000 fdaf 	bl	80014d4 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("55.6%RH", 180, 30, BLACK, 2, WHITE);
 8000976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2302      	movs	r3, #2
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2300      	movs	r3, #0
 8000982:	221e      	movs	r2, #30
 8000984:	21b4      	movs	r1, #180	; 0xb4
 8000986:	4875      	ldr	r0, [pc, #468]	; (8000b5c <main+0x238>)
 8000988:	f000 fda4 	bl	80014d4 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Filled_Circle(160, 30,15, 0X780F);// x , y , r ,color
 800098c:	f647 030f 	movw	r3, #30735	; 0x780f
 8000990:	220f      	movs	r2, #15
 8000992:	211e      	movs	r1, #30
 8000994:	20a0      	movs	r0, #160	; 0xa0
 8000996:	f000 fc7a 	bl	800128e <ILI9341_Draw_Filled_Circle>
	  		/////////////////////////////////////////////////////////////////////////

	  		ILI9341_Draw_Filled_Circle(30, 80,15, 0XF800);
 800099a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800099e:	220f      	movs	r2, #15
 80009a0:	2150      	movs	r1, #80	; 0x50
 80009a2:	201e      	movs	r0, #30
 80009a4:	f000 fc73 	bl	800128e <ILI9341_Draw_Filled_Circle>
	  		ILI9341_Draw_Rectangle(50, 70, 100,20, 0XF81F);//x , y , lx, ly ,color
 80009a8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2314      	movs	r3, #20
 80009b0:	2264      	movs	r2, #100	; 0x64
 80009b2:	2146      	movs	r1, #70	; 0x46
 80009b4:	2032      	movs	r0, #50	; 0x32
 80009b6:	f001 f997 	bl	8001ce8 <ILI9341_Draw_Rectangle>

	  		//ILI9341_Draw_Rectangle(50, 70, 20,20, 0X07E0);
	  		if (redVal <= 10)
 80009ba:	4b69      	ldr	r3, [pc, #420]	; (8000b60 <main+0x23c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b0a      	cmp	r3, #10
 80009c0:	d833      	bhi.n	8000a2a <main+0x106>
	  		{
	  			ILI9341_Draw_Rectangle(50, 70, redVal*10,20, 0XF800);//x , y , lx, ly ,color
 80009c2:	4b67      	ldr	r3, [pc, #412]	; (8000b60 <main+0x23c>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2314      	movs	r3, #20
 80009da:	2146      	movs	r1, #70	; 0x46
 80009dc:	2032      	movs	r0, #50	; 0x32
 80009de:	f001 f983 	bl	8001ce8 <ILI9341_Draw_Rectangle>
	  			sprintf(redPercent,"%d%%",redVal*10);
 80009e2:	4b5f      	ldr	r3, [pc, #380]	; (8000b60 <main+0x23c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	4613      	mov	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	461a      	mov	r2, r3
 80009f2:	495c      	ldr	r1, [pc, #368]	; (8000b64 <main+0x240>)
 80009f4:	485c      	ldr	r0, [pc, #368]	; (8000b68 <main+0x244>)
 80009f6:	f004 fdf9 	bl	80055ec <siprintf>
	  			ILI9341_Draw_Text(redPercent, 180, 70, BLACK, 2, WHITE);
 80009fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009fe:	9301      	str	r3, [sp, #4]
 8000a00:	2302      	movs	r3, #2
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2300      	movs	r3, #0
 8000a06:	2246      	movs	r2, #70	; 0x46
 8000a08:	21b4      	movs	r1, #180	; 0xb4
 8000a0a:	4857      	ldr	r0, [pc, #348]	; (8000b68 <main+0x244>)
 8000a0c:	f000 fd62 	bl	80014d4 <ILI9341_Draw_Text>
	  			redVal+=1;
 8000a10:	4b53      	ldr	r3, [pc, #332]	; (8000b60 <main+0x23c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b51      	ldr	r3, [pc, #324]	; (8000b60 <main+0x23c>)
 8000a1a:	701a      	strb	r2, [r3, #0]

	  			if(redVal == 11){
 8000a1c:	4b50      	ldr	r3, [pc, #320]	; (8000b60 <main+0x23c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b0b      	cmp	r3, #11
 8000a22:	d102      	bne.n	8000a2a <main+0x106>
	  				redVal = 0;
 8000a24:	4b4e      	ldr	r3, [pc, #312]	; (8000b60 <main+0x23c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
	  			}
	  		}
	  		////////////////////////////////////green///////////////////////////////////
	  		ILI9341_Draw_Filled_Circle(30, 130,15, 0X07E0);
 8000a2a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a2e:	220f      	movs	r2, #15
 8000a30:	2182      	movs	r1, #130	; 0x82
 8000a32:	201e      	movs	r0, #30
 8000a34:	f000 fc2b 	bl	800128e <ILI9341_Draw_Filled_Circle>
			ILI9341_Draw_Rectangle(50, 120, 100,20, 0XC618);//x , y , lx, ly ,color
 8000a38:	f24c 6318 	movw	r3, #50712	; 0xc618
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2314      	movs	r3, #20
 8000a40:	2264      	movs	r2, #100	; 0x64
 8000a42:	2178      	movs	r1, #120	; 0x78
 8000a44:	2032      	movs	r0, #50	; 0x32
 8000a46:	f001 f94f 	bl	8001ce8 <ILI9341_Draw_Rectangle>
			if (greenVal <= 10)
 8000a4a:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <main+0x248>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d833      	bhi.n	8000aba <main+0x196>
			{
				ILI9341_Draw_Rectangle(50, 120, greenVal*10,20, 0X07E0);//x , y , lx, ly ,color
 8000a52:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <main+0x248>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2314      	movs	r3, #20
 8000a6a:	2178      	movs	r1, #120	; 0x78
 8000a6c:	2032      	movs	r0, #50	; 0x32
 8000a6e:	f001 f93b 	bl	8001ce8 <ILI9341_Draw_Rectangle>
				sprintf(greenPercent,"%d%%",greenVal*10);
 8000a72:	4b3e      	ldr	r3, [pc, #248]	; (8000b6c <main+0x248>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4613      	mov	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	461a      	mov	r2, r3
 8000a82:	4938      	ldr	r1, [pc, #224]	; (8000b64 <main+0x240>)
 8000a84:	483a      	ldr	r0, [pc, #232]	; (8000b70 <main+0x24c>)
 8000a86:	f004 fdb1 	bl	80055ec <siprintf>
				ILI9341_Draw_Text(greenPercent, 180, 120, BLACK, 2, WHITE);
 8000a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	2302      	movs	r3, #2
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2300      	movs	r3, #0
 8000a96:	2278      	movs	r2, #120	; 0x78
 8000a98:	21b4      	movs	r1, #180	; 0xb4
 8000a9a:	4835      	ldr	r0, [pc, #212]	; (8000b70 <main+0x24c>)
 8000a9c:	f000 fd1a 	bl	80014d4 <ILI9341_Draw_Text>
				greenVal+=1;
 8000aa0:	4b32      	ldr	r3, [pc, #200]	; (8000b6c <main+0x248>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <main+0x248>)
 8000aaa:	701a      	strb	r2, [r3, #0]

				if(greenVal == 11){
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <main+0x248>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b0b      	cmp	r3, #11
 8000ab2:	d102      	bne.n	8000aba <main+0x196>
					greenVal = 0;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <main+0x248>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
				}
			}
			////////////////////////////////////blue///////////////////////////////////
			ILI9341_Draw_Filled_Circle(30, 180,15, 0X001F);
 8000aba:	231f      	movs	r3, #31
 8000abc:	220f      	movs	r2, #15
 8000abe:	21b4      	movs	r1, #180	; 0xb4
 8000ac0:	201e      	movs	r0, #30
 8000ac2:	f000 fbe4 	bl	800128e <ILI9341_Draw_Filled_Circle>
			ILI9341_Draw_Rectangle(50, 170, 100,20, 0X07FF);//x , y , lx, ly ,color
 8000ac6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2314      	movs	r3, #20
 8000ace:	2264      	movs	r2, #100	; 0x64
 8000ad0:	21aa      	movs	r1, #170	; 0xaa
 8000ad2:	2032      	movs	r0, #50	; 0x32
 8000ad4:	f001 f908 	bl	8001ce8 <ILI9341_Draw_Rectangle>
			if (blueVal <= 10)
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <main+0x250>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b0a      	cmp	r3, #10
 8000ade:	d832      	bhi.n	8000b46 <main+0x222>
			{
				ILI9341_Draw_Rectangle(50, 170, blueVal*10,20, 0X001F);//x , y , lx, ly ,color
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <main+0x250>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	0092      	lsls	r2, r2, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	231f      	movs	r3, #31
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2314      	movs	r3, #20
 8000af6:	21aa      	movs	r1, #170	; 0xaa
 8000af8:	2032      	movs	r0, #50	; 0x32
 8000afa:	f001 f8f5 	bl	8001ce8 <ILI9341_Draw_Rectangle>
				sprintf(bluePercent,"%d%%",blueVal*10);
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <main+0x250>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	4613      	mov	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4915      	ldr	r1, [pc, #84]	; (8000b64 <main+0x240>)
 8000b10:	4819      	ldr	r0, [pc, #100]	; (8000b78 <main+0x254>)
 8000b12:	f004 fd6b 	bl	80055ec <siprintf>
				ILI9341_Draw_Text(bluePercent, 180, 170, BLACK, 2, WHITE);
 8000b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2300      	movs	r3, #0
 8000b22:	22aa      	movs	r2, #170	; 0xaa
 8000b24:	21b4      	movs	r1, #180	; 0xb4
 8000b26:	4814      	ldr	r0, [pc, #80]	; (8000b78 <main+0x254>)
 8000b28:	f000 fcd4 	bl	80014d4 <ILI9341_Draw_Text>
				blueVal+=1;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <main+0x250>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <main+0x250>)
 8000b36:	701a      	strb	r2, [r3, #0]

				if(blueVal == 11){
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <main+0x250>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b0b      	cmp	r3, #11
 8000b3e:	d102      	bne.n	8000b46 <main+0x222>
					blueVal = 0;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <main+0x250>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
				}
			}


	  		HAL_Delay(2000);
 8000b46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b4a:	f001 f995 	bl	8001e78 <HAL_Delay>

	  		ILI9341_Fill_Screen(WHITE);
 8000b4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b52:	f000 ffc9 	bl	8001ae8 <ILI9341_Fill_Screen>
	  		ILI9341_Fill_Screen(WHITE);
 8000b56:	e6fc      	b.n	8000952 <main+0x2e>
 8000b58:	080077b0 	.word	0x080077b0
 8000b5c:	080077b8 	.word	0x080077b8
 8000b60:	200001f4 	.word	0x200001f4
 8000b64:	080077c0 	.word	0x080077c0
 8000b68:	200001f8 	.word	0x200001f8
 8000b6c:	200001f5 	.word	0x200001f5
 8000b70:	2000022c 	.word	0x2000022c
 8000b74:	200001f6 	.word	0x200001f6
 8000b78:	20000260 	.word	0x20000260

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0b8      	sub	sp, #224	; 0xe0
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b86:	2234      	movs	r2, #52	; 0x34
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f004 fd91 	bl	80056b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	2290      	movs	r2, #144	; 0x90
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 fd82 	bl	80056b2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bae:	f001 fc33 	bl	8002418 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <SystemClock_Config+0x124>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a3a      	ldr	r2, [pc, #232]	; (8000ca0 <SystemClock_Config+0x124>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <SystemClock_Config+0x124>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bca:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <SystemClock_Config+0x128>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <SystemClock_Config+0x128>)
 8000bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemClock_Config+0x128>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000c04:	23c8      	movs	r3, #200	; 0xc8
 8000c06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c10:	2309      	movs	r3, #9
 8000c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fc59 	bl	80024d8 <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c2c:	f000 f83e 	bl	8000cac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c30:	f001 fc02 	bl	8002438 <HAL_PWREx_EnableOverDrive>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c3a:	f000 f837 	bl	8000cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	2302      	movs	r3, #2
 8000c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c60:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c64:	2106      	movs	r1, #6
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fee4 	bl	8002a34 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000c72:	f000 f81b 	bl	8000cac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <SystemClock_Config+0x12c>)
 8000c78:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 f8f9 	bl	8002e80 <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000c94:	f000 f80a 	bl	8000cac <Error_Handler>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	37e0      	adds	r7, #224	; 0xe0
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40007000 	.word	0x40007000
 8000ca8:	00200100 	.word	0x00200100

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x4>
	...

08000cb4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_RNG_Init+0x20>)
 8000cba:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <MX_RNG_Init+0x24>)
 8000cbc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_RNG_Init+0x20>)
 8000cc0:	f002 fd06 	bl	80036d0 <HAL_RNG_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000cca:	f7ff ffef 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000294 	.word	0x20000294
 8000cd8:	50060800 	.word	0x50060800

08000cdc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_RNG_MspInit+0x38>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10b      	bne.n	8000d06 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_RNG_MspInit+0x3c>)
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_RNG_MspInit+0x3c>)
 8000cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf8:	6353      	str	r3, [r2, #52]	; 0x34
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_RNG_MspInit+0x3c>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	50060800 	.word	0x50060800
 8000d18:	40023800 	.word	0x40023800

08000d1c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <MX_SPI5_Init+0x78>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d3a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_SPI5_Init+0x74>)
 8000d7c:	f002 fcd2 	bl	8003724 <HAL_SPI_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f7ff ff91 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200002a4 	.word	0x200002a4
 8000d94:	40015000 	.word	0x40015000

08000d98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_SPI_MspInit+0x7c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d128      	bne.n	8000e0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_SPI_MspInit+0x80>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <HAL_SPI_MspInit+0x80>)
 8000dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <HAL_SPI_MspInit+0x80>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_SPI_MspInit+0x80>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_SPI_MspInit+0x80>)
 8000dd8:	f043 0320 	orr.w	r3, r3, #32
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_SPI_MspInit+0x80>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000dea:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_SPI_MspInit+0x84>)
 8000e08:	f001 f940 	bl	800208c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	; 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40015000 	.word	0x40015000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40021400 	.word	0x40021400

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x44>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_MspInit+0x44>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x44>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x44>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x44>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x44>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 ffe4 	bl	8001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	return 1;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_kill>:

int _kill(int pid, int sig)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e8e:	f004 fc63 	bl	8005758 <__errno>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2216      	movs	r2, #22
 8000e96:	601a      	str	r2, [r3, #0]
	return -1;
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_exit>:

void _exit (int status)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ffe7 	bl	8000e84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eb6:	e7fe      	b.n	8000eb6 <_exit+0x12>

08000eb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e00a      	b.n	8000ee0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eca:	f3af 8000 	nop.w
 8000ece:	4601      	mov	r1, r0
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	60ba      	str	r2, [r7, #8]
 8000ed6:	b2ca      	uxtb	r2, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbf0      	blt.n	8000eca <_read+0x12>
	}

return len;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e009      	b.n	8000f18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf1      	blt.n	8000f04 <_write+0x12>
	}
	return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_close>:

int _close(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	return -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f52:	605a      	str	r2, [r3, #4]
	return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_isatty>:

int _isatty(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	return 1;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f004 fbc8 	bl	8005758 <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20080000 	.word	0x20080000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	20000308 	.word	0x20000308
 8000ffc:	20000530 	.word	0x20000530

08001000 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <SystemInit+0x5c>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <SystemInit+0x5c>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <SystemInit+0x60>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a11      	ldr	r2, [pc, #68]	; (8001060 <SystemInit+0x60>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <SystemInit+0x60>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <SystemInit+0x60>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	490d      	ldr	r1, [pc, #52]	; (8001060 <SystemInit+0x60>)
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <SystemInit+0x64>)
 800102e:	4013      	ands	r3, r2
 8001030:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <SystemInit+0x60>)
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <SystemInit+0x68>)
 8001036:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <SystemInit+0x60>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a08      	ldr	r2, [pc, #32]	; (8001060 <SystemInit+0x60>)
 800103e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001042:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <SystemInit+0x60>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SystemInit+0x5c>)
 800104c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001050:	609a      	str	r2, [r3, #8]
#endif
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00
 8001060:	40023800 	.word	0x40023800
 8001064:	fef6ffff 	.word	0xfef6ffff
 8001068:	24003010 	.word	0x24003010

0800106c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_TIM1_Init+0xa0>)
 800108c:	4a20      	ldr	r2, [pc, #128]	; (8001110 <MX_TIM1_Init+0xa4>)
 800108e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_TIM1_Init+0xa0>)
 8001092:	f242 720f 	movw	r2, #9999	; 0x270f
 8001096:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <MX_TIM1_Init+0xa0>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_TIM1_Init+0xa0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <MX_TIM1_Init+0xa0>)
 80010a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_TIM1_Init+0xa0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <MX_TIM1_Init+0xa0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <MX_TIM1_Init+0xa0>)
 80010ba:	f002 fead 	bl	8003e18 <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80010c4:	f7ff fdf2 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <MX_TIM1_Init+0xa0>)
 80010d6:	f002 fef7 	bl	8003ec8 <HAL_TIM_ConfigClockSource>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80010e0:	f7ff fde4 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_TIM1_Init+0xa0>)
 80010f6:	f003 f8e7 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001100:	f7ff fdd4 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000030c 	.word	0x2000030c
 8001110:	40010000 	.word	0x40010000

08001114 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_TIM_Base_MspInit+0x38>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10b      	bne.n	800113e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40010000 	.word	0x40010000
 8001150:	40023800 	.word	0x40023800

08001154 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <MX_USART3_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001198:	f003 f924 	bl	80043e4 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011a2:	f7ff fd83 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000358 	.word	0x20000358
 80011b0:	40004800 	.word	0x40004800

080011b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_UART_MspInit+0x7c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d128      	bne.n	8001228 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_UART_MspInit+0x80>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a16      	ldr	r2, [pc, #88]	; (8001234 <HAL_UART_MspInit+0x80>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_UART_MspInit+0x80>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_UART_MspInit+0x80>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <HAL_UART_MspInit+0x80>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_UART_MspInit+0x80>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001206:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001218:	2307      	movs	r3, #7
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <HAL_UART_MspInit+0x84>)
 8001224:	f000 ff32 	bl	800208c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40004800 	.word	0x40004800
 8001234:	40023800 	.word	0x40023800
 8001238:	40020c00 	.word	0x40020c00

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001240:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001242:	e003      	b.n	800124c <LoopCopyDataInit>

08001244 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001246:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001248:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800124a:	3104      	adds	r1, #4

0800124c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001250:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001252:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001254:	d3f6      	bcc.n	8001244 <CopyDataInit>
  ldr  r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001258:	e002      	b.n	8001260 <LoopFillZerobss>

0800125a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800125a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800125c:	f842 3b04 	str.w	r3, [r2], #4

08001260 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001262:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001264:	d3f9      	bcc.n	800125a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001266:	f7ff fecb 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f004 fa7b 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff fb59 	bl	8000924 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001274:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001278:	08007da4 	.word	0x08007da4
  ldr  r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001280:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8001284:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001288:	2000052c 	.word	0x2000052c

0800128c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC_IRQHandler>

0800128e <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 800128e:	b590      	push	{r4, r7, lr}
 8001290:	b08b      	sub	sp, #44	; 0x2c
 8001292:	af00      	add	r7, sp, #0
 8001294:	4604      	mov	r4, r0
 8001296:	4608      	mov	r0, r1
 8001298:	4611      	mov	r1, r2
 800129a:	461a      	mov	r2, r3
 800129c:	4623      	mov	r3, r4
 800129e:	80fb      	strh	r3, [r7, #6]
 80012a0:	4603      	mov	r3, r0
 80012a2:	80bb      	strh	r3, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	f1c3 0301 	rsb	r3, r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80012c6:	e061      	b.n	800138c <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80012c8:	88fa      	ldrh	r2, [r7, #6]
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	e018      	b.n	8001304 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	b298      	uxth	r0, r3
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	88bb      	ldrh	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	b29b      	uxth	r3, r3
 80012e0:	883a      	ldrh	r2, [r7, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	f000 fc26 	bl	8001b34 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	b298      	uxth	r0, r3
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	88ba      	ldrh	r2, [r7, #4]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	883a      	ldrh	r2, [r7, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f000 fc1b 	bl	8001b34 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	3301      	adds	r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	4413      	add	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	dde0      	ble.n	80012d2 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	e018      	b.n	800134c <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	b298      	uxth	r0, r3
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	b29a      	uxth	r2, r3
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	883a      	ldrh	r2, [r7, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	f000 fc02 	bl	8001b34 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	b298      	uxth	r0, r3
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	b29b      	uxth	r3, r3
 8001338:	88ba      	ldrh	r2, [r7, #4]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	b29b      	uxth	r3, r3
 800133e:	883a      	ldrh	r2, [r7, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f000 fbf7 	bl	8001b34 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3301      	adds	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	4413      	add	r3, r2
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	dde0      	ble.n	800131a <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	3301      	adds	r3, #1
 800135c:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	4413      	add	r3, r2
 8001364:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	3302      	adds	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005a      	lsls	r2, r3, #1
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	4413      	add	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd09      	ble.n	800138c <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	3b01      	subs	r3, #1
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	4413      	add	r3, r2
 8001384:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3302      	adds	r3, #2
 800138a:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 800138c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	429a      	cmp	r2, r3
 8001392:	da99      	bge.n	80012c8 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	372c      	adds	r7, #44	; 0x2c
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
	...

080013a0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	4603      	mov	r3, r0
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	717b      	strb	r3, [r7, #5]
 80013ba:	4613      	mov	r3, r2
 80013bc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	2b1f      	cmp	r3, #31
 80013c6:	d802      	bhi.n	80013ce <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	71fb      	strb	r3, [r7, #7]
 80013cc:	e002      	b.n	80013d4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	3b20      	subs	r3, #32
 80013d2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	753b      	strb	r3, [r7, #20]
 80013d8:	e012      	b.n	8001400 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80013da:	7dfa      	ldrb	r2, [r7, #23]
 80013dc:	7d38      	ldrb	r0, [r7, #20]
 80013de:	7d39      	ldrb	r1, [r7, #20]
 80013e0:	4c3b      	ldr	r4, [pc, #236]	; (80014d0 <ILI9341_Draw_Char+0x130>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4423      	add	r3, r4
 80013ec:	4403      	add	r3, r0
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	f101 0318 	add.w	r3, r1, #24
 80013f4:	443b      	add	r3, r7
 80013f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80013fa:	7d3b      	ldrb	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	753b      	strb	r3, [r7, #20]
 8001400:	7d3b      	ldrb	r3, [r7, #20]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d9e9      	bls.n	80013da <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	b298      	uxth	r0, r3
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	b299      	uxth	r1, r3
 800140e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001410:	461a      	mov	r2, r3
 8001412:	0052      	lsls	r2, r2, #1
 8001414:	4413      	add	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	b29a      	uxth	r2, r3
 800141a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	b29c      	uxth	r4, r3
 8001420:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	4623      	mov	r3, r4
 8001426:	f000 fc5f 	bl	8001ce8 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800142a:	2300      	movs	r3, #0
 800142c:	757b      	strb	r3, [r7, #21]
 800142e:	e047      	b.n	80014c0 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001430:	2300      	movs	r3, #0
 8001432:	75bb      	strb	r3, [r7, #22]
 8001434:	e03e      	b.n	80014b4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001436:	7d7b      	ldrb	r3, [r7, #21]
 8001438:	3318      	adds	r3, #24
 800143a:	443b      	add	r3, r7
 800143c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001440:	461a      	mov	r2, r3
 8001442:	7dbb      	ldrb	r3, [r7, #22]
 8001444:	fa42 f303 	asr.w	r3, r2, r3
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d02e      	beq.n	80014ae <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8001450:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001452:	2b01      	cmp	r3, #1
 8001454:	d110      	bne.n	8001478 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	b29a      	uxth	r2, r3
 800145a:	7d7b      	ldrb	r3, [r7, #21]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4413      	add	r3, r2
 8001460:	b298      	uxth	r0, r3
 8001462:	797b      	ldrb	r3, [r7, #5]
 8001464:	b29a      	uxth	r2, r3
 8001466:	7dbb      	ldrb	r3, [r7, #22]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4413      	add	r3, r2
 800146c:	b29b      	uxth	r3, r3
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	4619      	mov	r1, r3
 8001472:	f000 fb5f 	bl	8001b34 <ILI9341_Draw_Pixel>
 8001476:	e01a      	b.n	80014ae <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	b29a      	uxth	r2, r3
 800147c:	7d7b      	ldrb	r3, [r7, #21]
 800147e:	b29b      	uxth	r3, r3
 8001480:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001482:	fb11 f303 	smulbb	r3, r1, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b298      	uxth	r0, r3
 800148c:	797b      	ldrb	r3, [r7, #5]
 800148e:	b29a      	uxth	r2, r3
 8001490:	7dbb      	ldrb	r3, [r7, #22]
 8001492:	b29b      	uxth	r3, r3
 8001494:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001496:	fb11 f303 	smulbb	r3, r1, r3
 800149a:	b29b      	uxth	r3, r3
 800149c:	4413      	add	r3, r2
 800149e:	b299      	uxth	r1, r3
 80014a0:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80014a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4623      	mov	r3, r4
 80014aa:	f000 fc1d 	bl	8001ce8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80014ae:	7dbb      	ldrb	r3, [r7, #22]
 80014b0:	3301      	adds	r3, #1
 80014b2:	75bb      	strb	r3, [r7, #22]
 80014b4:	7dbb      	ldrb	r3, [r7, #22]
 80014b6:	2b07      	cmp	r3, #7
 80014b8:	d9bd      	bls.n	8001436 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80014ba:	7d7b      	ldrb	r3, [r7, #21]
 80014bc:	3301      	adds	r3, #1
 80014be:	757b      	strb	r3, [r7, #21]
 80014c0:	7d7b      	ldrb	r3, [r7, #21]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d9b4      	bls.n	8001430 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}
 80014d0:	080077e0 	.word	0x080077e0

080014d4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	4608      	mov	r0, r1
 80014de:	4611      	mov	r1, r2
 80014e0:	461a      	mov	r2, r3
 80014e2:	4603      	mov	r3, r0
 80014e4:	70fb      	strb	r3, [r7, #3]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70bb      	strb	r3, [r7, #2]
 80014ea:	4613      	mov	r3, r2
 80014ec:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80014ee:	e017      	b.n	8001520 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	7818      	ldrb	r0, [r3, #0]
 80014f8:	883c      	ldrh	r4, [r7, #0]
 80014fa:	78ba      	ldrb	r2, [r7, #2]
 80014fc:	78f9      	ldrb	r1, [r7, #3]
 80014fe:	8bbb      	ldrh	r3, [r7, #28]
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	8b3b      	ldrh	r3, [r7, #24]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4623      	mov	r3, r4
 8001508:	f7ff ff4a 	bl	80013a0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800150c:	8b3b      	ldrh	r3, [r7, #24]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	0052      	lsls	r2, r2, #1
 8001514:	4413      	add	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	4413      	add	r3, r2
 800151e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1e3      	bne.n	80014f0 <ILI9341_Draw_Text+0x1c>
    }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
	...

08001534 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8001538:	f7ff fbf0 	bl	8000d1c <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 800153c:	f7ff f856 	bl	80005ec <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001546:	4802      	ldr	r0, [pc, #8]	; (8001550 <ILI9341_SPI_Init+0x1c>)
 8001548:	f000 ff4c 	bl	80023e4 <HAL_GPIO_WritePin>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40020800 	.word	0x40020800

08001554 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800155e:	1df9      	adds	r1, r7, #7
 8001560:	2301      	movs	r3, #1
 8001562:	2201      	movs	r2, #1
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <ILI9341_SPI_Send+0x20>)
 8001566:	f002 f988 	bl	800387a <HAL_SPI_Transmit>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002a4 	.word	0x200002a4

08001578 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <ILI9341_Write_Command+0x40>)
 800158a:	f000 ff2b 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001594:	4808      	ldr	r0, [pc, #32]	; (80015b8 <ILI9341_Write_Command+0x40>)
 8001596:	f000 ff25 	bl	80023e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ffd9 	bl	8001554 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <ILI9341_Write_Command+0x40>)
 80015aa:	f000 ff1b 	bl	80023e4 <HAL_GPIO_WritePin>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40020800 	.word	0x40020800

080015bc <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <ILI9341_Write_Data+0x40>)
 80015ce:	f000 ff09 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <ILI9341_Write_Data+0x40>)
 80015da:	f000 ff03 	bl	80023e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ffb7 	bl	8001554 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <ILI9341_Write_Data+0x40>)
 80015ee:	f000 fef9 	bl	80023e4 <HAL_GPIO_WritePin>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40020800 	.word	0x40020800

08001600 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4604      	mov	r4, r0
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4623      	mov	r3, r4
 8001610:	80fb      	strh	r3, [r7, #6]
 8001612:	4603      	mov	r3, r0
 8001614:	80bb      	strh	r3, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	807b      	strh	r3, [r7, #2]
 800161a:	4613      	mov	r3, r2
 800161c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800161e:	202a      	movs	r0, #42	; 0x2a
 8001620:	f7ff ffaa 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ffc5 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ffc0 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	b29b      	uxth	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ffb9 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ffb4 	bl	80015bc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001654:	202b      	movs	r0, #43	; 0x2b
 8001656:	f7ff ff8f 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800165a:	88bb      	ldrh	r3, [r7, #4]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	b29b      	uxth	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ffaa 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ffa5 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001672:	883b      	ldrh	r3, [r7, #0]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	b29b      	uxth	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff9e 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001680:	883b      	ldrh	r3, [r7, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff99 	bl	80015bc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800168a:	202c      	movs	r0, #44	; 0x2c
 800168c:	f7ff ff74 	bl	8001578 <ILI9341_Write_Command>
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}

08001698 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a2:	480b      	ldr	r0, [pc, #44]	; (80016d0 <ILI9341_Reset+0x38>)
 80016a4:	f000 fe9e 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80016a8:	20c8      	movs	r0, #200	; 0xc8
 80016aa:	f000 fbe5 	bl	8001e78 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b4:	4806      	ldr	r0, [pc, #24]	; (80016d0 <ILI9341_Reset+0x38>)
 80016b6:	f000 fe95 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80016ba:	20c8      	movs	r0, #200	; 0xc8
 80016bc:	f000 fbdc 	bl	8001e78 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c6:	4802      	ldr	r0, [pc, #8]	; (80016d0 <ILI9341_Reset+0x38>)
 80016c8:	f000 fe8c 	bl	80023e4 <HAL_GPIO_WritePin>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40020800 	.word	0x40020800

080016d4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80016e2:	2036      	movs	r0, #54	; 0x36
 80016e4:	f7ff ff48 	bl	8001578 <ILI9341_Write_Command>
HAL_Delay(1);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f000 fbc5 	bl	8001e78 <HAL_Delay>
	
switch(screen_rotation) 
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d837      	bhi.n	8001764 <ILI9341_Set_Rotation+0x90>
 80016f4:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <ILI9341_Set_Rotation+0x28>)
 80016f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fa:	bf00      	nop
 80016fc:	0800170d 	.word	0x0800170d
 8001700:	08001723 	.word	0x08001723
 8001704:	08001739 	.word	0x08001739
 8001708:	0800174f 	.word	0x0800174f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800170c:	2048      	movs	r0, #72	; 0x48
 800170e:	f7ff ff55 	bl	80015bc <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <ILI9341_Set_Rotation+0x9c>)
 8001714:	22f0      	movs	r2, #240	; 0xf0
 8001716:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <ILI9341_Set_Rotation+0xa0>)
 800171a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800171e:	801a      	strh	r2, [r3, #0]
			break;
 8001720:	e021      	b.n	8001766 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001722:	2028      	movs	r0, #40	; 0x28
 8001724:	f7ff ff4a 	bl	80015bc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <ILI9341_Set_Rotation+0x9c>)
 800172a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800172e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <ILI9341_Set_Rotation+0xa0>)
 8001732:	22f0      	movs	r2, #240	; 0xf0
 8001734:	801a      	strh	r2, [r3, #0]
			break;
 8001736:	e016      	b.n	8001766 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001738:	2088      	movs	r0, #136	; 0x88
 800173a:	f7ff ff3f 	bl	80015bc <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <ILI9341_Set_Rotation+0x9c>)
 8001740:	22f0      	movs	r2, #240	; 0xf0
 8001742:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <ILI9341_Set_Rotation+0xa0>)
 8001746:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800174a:	801a      	strh	r2, [r3, #0]
			break;
 800174c:	e00b      	b.n	8001766 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800174e:	20e8      	movs	r0, #232	; 0xe8
 8001750:	f7ff ff34 	bl	80015bc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <ILI9341_Set_Rotation+0x9c>)
 8001756:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800175a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <ILI9341_Set_Rotation+0xa0>)
 800175e:	22f0      	movs	r2, #240	; 0xf0
 8001760:	801a      	strh	r2, [r3, #0]
			break;
 8001762:	e000      	b.n	8001766 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001764:	bf00      	nop
	}
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000006 	.word	0x20000006
 8001774:	20000004 	.word	0x20000004

08001778 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001782:	4802      	ldr	r0, [pc, #8]	; (800178c <ILI9341_Enable+0x14>)
 8001784:	f000 fe2e 	bl	80023e4 <HAL_GPIO_WritePin>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40020800 	.word	0x40020800

08001790 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001794:	f7ff fff0 	bl	8001778 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001798:	f7ff fecc 	bl	8001534 <ILI9341_SPI_Init>
ILI9341_Reset();
 800179c:	f7ff ff7c 	bl	8001698 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff fee9 	bl	8001578 <ILI9341_Write_Command>
HAL_Delay(1000);
 80017a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017aa:	f000 fb65 	bl	8001e78 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80017ae:	20cb      	movs	r0, #203	; 0xcb
 80017b0:	f7ff fee2 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80017b4:	2039      	movs	r0, #57	; 0x39
 80017b6:	f7ff ff01 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80017ba:	202c      	movs	r0, #44	; 0x2c
 80017bc:	f7ff fefe 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fefb 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80017c6:	2034      	movs	r0, #52	; 0x34
 80017c8:	f7ff fef8 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7ff fef5 	bl	80015bc <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80017d2:	20cf      	movs	r0, #207	; 0xcf
 80017d4:	f7ff fed0 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff feef 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80017de:	20c1      	movs	r0, #193	; 0xc1
 80017e0:	f7ff feec 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80017e4:	2030      	movs	r0, #48	; 0x30
 80017e6:	f7ff fee9 	bl	80015bc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80017ea:	20e8      	movs	r0, #232	; 0xe8
 80017ec:	f7ff fec4 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80017f0:	2085      	movs	r0, #133	; 0x85
 80017f2:	f7ff fee3 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fee0 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80017fc:	2078      	movs	r0, #120	; 0x78
 80017fe:	f7ff fedd 	bl	80015bc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001802:	20ea      	movs	r0, #234	; 0xea
 8001804:	f7ff feb8 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fed7 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fed4 	bl	80015bc <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001814:	20ed      	movs	r0, #237	; 0xed
 8001816:	f7ff feaf 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f7ff fece 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001820:	2003      	movs	r0, #3
 8001822:	f7ff fecb 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001826:	2012      	movs	r0, #18
 8001828:	f7ff fec8 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 800182c:	2081      	movs	r0, #129	; 0x81
 800182e:	f7ff fec5 	bl	80015bc <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001832:	20f7      	movs	r0, #247	; 0xf7
 8001834:	f7ff fea0 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001838:	2020      	movs	r0, #32
 800183a:	f7ff febf 	bl	80015bc <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800183e:	20c0      	movs	r0, #192	; 0xc0
 8001840:	f7ff fe9a 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001844:	2023      	movs	r0, #35	; 0x23
 8001846:	f7ff feb9 	bl	80015bc <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800184a:	20c1      	movs	r0, #193	; 0xc1
 800184c:	f7ff fe94 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001850:	2010      	movs	r0, #16
 8001852:	f7ff feb3 	bl	80015bc <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001856:	20c5      	movs	r0, #197	; 0xc5
 8001858:	f7ff fe8e 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800185c:	203e      	movs	r0, #62	; 0x3e
 800185e:	f7ff fead 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001862:	2028      	movs	r0, #40	; 0x28
 8001864:	f7ff feaa 	bl	80015bc <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001868:	20c7      	movs	r0, #199	; 0xc7
 800186a:	f7ff fe85 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800186e:	2086      	movs	r0, #134	; 0x86
 8001870:	f7ff fea4 	bl	80015bc <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001874:	2036      	movs	r0, #54	; 0x36
 8001876:	f7ff fe7f 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800187a:	2048      	movs	r0, #72	; 0x48
 800187c:	f7ff fe9e 	bl	80015bc <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001880:	203a      	movs	r0, #58	; 0x3a
 8001882:	f7ff fe79 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001886:	2055      	movs	r0, #85	; 0x55
 8001888:	f7ff fe98 	bl	80015bc <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800188c:	20b1      	movs	r0, #177	; 0xb1
 800188e:	f7ff fe73 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fe92 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001898:	2018      	movs	r0, #24
 800189a:	f7ff fe8f 	bl	80015bc <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800189e:	20b6      	movs	r0, #182	; 0xb6
 80018a0:	f7ff fe6a 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80018a4:	2008      	movs	r0, #8
 80018a6:	f7ff fe89 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80018aa:	2082      	movs	r0, #130	; 0x82
 80018ac:	f7ff fe86 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80018b0:	2027      	movs	r0, #39	; 0x27
 80018b2:	f7ff fe83 	bl	80015bc <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80018b6:	20f2      	movs	r0, #242	; 0xf2
 80018b8:	f7ff fe5e 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff fe7d 	bl	80015bc <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80018c2:	2026      	movs	r0, #38	; 0x26
 80018c4:	f7ff fe58 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80018c8:	2001      	movs	r0, #1
 80018ca:	f7ff fe77 	bl	80015bc <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80018ce:	20e0      	movs	r0, #224	; 0xe0
 80018d0:	f7ff fe52 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80018d4:	200f      	movs	r0, #15
 80018d6:	f7ff fe71 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80018da:	2031      	movs	r0, #49	; 0x31
 80018dc:	f7ff fe6e 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80018e0:	202b      	movs	r0, #43	; 0x2b
 80018e2:	f7ff fe6b 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80018e6:	200c      	movs	r0, #12
 80018e8:	f7ff fe68 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80018ec:	200e      	movs	r0, #14
 80018ee:	f7ff fe65 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80018f2:	2008      	movs	r0, #8
 80018f4:	f7ff fe62 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80018f8:	204e      	movs	r0, #78	; 0x4e
 80018fa:	f7ff fe5f 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80018fe:	20f1      	movs	r0, #241	; 0xf1
 8001900:	f7ff fe5c 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001904:	2037      	movs	r0, #55	; 0x37
 8001906:	f7ff fe59 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800190a:	2007      	movs	r0, #7
 800190c:	f7ff fe56 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001910:	2010      	movs	r0, #16
 8001912:	f7ff fe53 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001916:	2003      	movs	r0, #3
 8001918:	f7ff fe50 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800191c:	200e      	movs	r0, #14
 800191e:	f7ff fe4d 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001922:	2009      	movs	r0, #9
 8001924:	f7ff fe4a 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff fe47 	bl	80015bc <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800192e:	20e1      	movs	r0, #225	; 0xe1
 8001930:	f7ff fe22 	bl	8001578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff fe41 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800193a:	200e      	movs	r0, #14
 800193c:	f7ff fe3e 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001940:	2014      	movs	r0, #20
 8001942:	f7ff fe3b 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001946:	2003      	movs	r0, #3
 8001948:	f7ff fe38 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800194c:	2011      	movs	r0, #17
 800194e:	f7ff fe35 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001952:	2007      	movs	r0, #7
 8001954:	f7ff fe32 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001958:	2031      	movs	r0, #49	; 0x31
 800195a:	f7ff fe2f 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800195e:	20c1      	movs	r0, #193	; 0xc1
 8001960:	f7ff fe2c 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001964:	2048      	movs	r0, #72	; 0x48
 8001966:	f7ff fe29 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800196a:	2008      	movs	r0, #8
 800196c:	f7ff fe26 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001970:	200f      	movs	r0, #15
 8001972:	f7ff fe23 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001976:	200c      	movs	r0, #12
 8001978:	f7ff fe20 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800197c:	2031      	movs	r0, #49	; 0x31
 800197e:	f7ff fe1d 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001982:	2036      	movs	r0, #54	; 0x36
 8001984:	f7ff fe1a 	bl	80015bc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001988:	200f      	movs	r0, #15
 800198a:	f7ff fe17 	bl	80015bc <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800198e:	2011      	movs	r0, #17
 8001990:	f7ff fdf2 	bl	8001578 <ILI9341_Write_Command>
HAL_Delay(120);
 8001994:	2078      	movs	r0, #120	; 0x78
 8001996:	f000 fa6f 	bl	8001e78 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800199a:	2029      	movs	r0, #41	; 0x29
 800199c:	f7ff fdec 	bl	8001578 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fe97 	bl	80016d4 <ILI9341_Set_Rotation>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80019ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019b0:	b08d      	sub	sp, #52	; 0x34
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	6039      	str	r1, [r7, #0]
 80019b8:	80fb      	strh	r3, [r7, #6]
 80019ba:	466b      	mov	r3, sp
 80019bc:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019ca:	d202      	bcs.n	80019d2 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d0:	e002      	b.n	80019d8 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80019d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019de:	4840      	ldr	r0, [pc, #256]	; (8001ae0 <ILI9341_Draw_Colour_Burst+0x134>)
 80019e0:	f000 fd00 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ea:	483d      	ldr	r0, [pc, #244]	; (8001ae0 <ILI9341_Draw_Colour_Burst+0x134>)
 80019ec:	f000 fcfa 	bl	80023e4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80019fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019fc:	460b      	mov	r3, r1
 80019fe:	3b01      	subs	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	2300      	movs	r3, #0
 8001a04:	4688      	mov	r8, r1
 8001a06:	4699      	mov	r9, r3
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	461d      	mov	r5, r3
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	00eb      	lsls	r3, r5, #3
 8001a2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a30:	00e2      	lsls	r2, r4, #3
 8001a32:	1dcb      	adds	r3, r1, #7
 8001a34:	08db      	lsrs	r3, r3, #3
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	ebad 0d03 	sub.w	sp, sp, r3
 8001a3c:	466b      	mov	r3, sp
 8001a3e:	3300      	adds	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a46:	e00e      	b.n	8001a66 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a52:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a56:	3301      	adds	r3, #1
 8001a58:	88fa      	ldrh	r2, [r7, #6]
 8001a5a:	b2d1      	uxtb	r1, r2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a62:	3302      	adds	r3, #2
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3ec      	bcc.n	8001a48 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a82:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a88:	fb01 f202 	mul.w	r2, r1, r2
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d010      	beq.n	8001ab8 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9a:	e009      	b.n	8001ab0 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	480f      	ldr	r0, [pc, #60]	; (8001ae4 <ILI9341_Draw_Colour_Burst+0x138>)
 8001aa6:	f001 fee8 	bl	800387a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d3f1      	bcc.n	8001a9c <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	230a      	movs	r3, #10
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	4808      	ldr	r0, [pc, #32]	; (8001ae4 <ILI9341_Draw_Colour_Burst+0x138>)
 8001ac2:	f001 feda 	bl	800387a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <ILI9341_Draw_Colour_Burst+0x134>)
 8001ace:	f000 fc89 	bl	80023e4 <HAL_GPIO_WritePin>
 8001ad2:	46b5      	mov	sp, r6
}
 8001ad4:	bf00      	nop
 8001ad6:	3734      	adds	r7, #52	; 0x34
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ade:	bf00      	nop
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	200002a4 	.word	0x200002a4

08001ae8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <ILI9341_Fill_Screen+0x44>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <ILI9341_Fill_Screen+0x48>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2100      	movs	r1, #0
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fd7d 	bl	8001600 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <ILI9341_Fill_Screen+0x44>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <ILI9341_Fill_Screen+0x48>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff44 	bl	80019ac <ILI9341_Draw_Colour_Burst>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000006 	.word	0x20000006
 8001b30:	20000004 	.word	0x20000004

08001b34 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	80bb      	strh	r3, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001b46:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <ILI9341_Draw_Pixel+0x1a4>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	88fa      	ldrh	r2, [r7, #6]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	f080 80be 	bcs.w	8001cd0 <ILI9341_Draw_Pixel+0x19c>
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <ILI9341_Draw_Pixel+0x1a8>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	88ba      	ldrh	r2, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f080 80b7 	bcs.w	8001cd0 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001b62:	2200      	movs	r2, #0
 8001b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b68:	485d      	ldr	r0, [pc, #372]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b6a:	f000 fc3b 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b74:	485a      	ldr	r0, [pc, #360]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b76:	f000 fc35 	bl	80023e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001b7a:	202a      	movs	r0, #42	; 0x2a
 8001b7c:	f7ff fcea 	bl	8001554 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001b80:	2201      	movs	r2, #1
 8001b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b86:	4856      	ldr	r0, [pc, #344]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b88:	f000 fc2c 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b92:	4853      	ldr	r0, [pc, #332]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001b94:	f000 fc26 	bl	80023e4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b9e:	4850      	ldr	r0, [pc, #320]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001ba0:	f000 fc20 	bl	80023e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	753b      	strb	r3, [r7, #20]
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	757b      	strb	r3, [r7, #21]
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	121b      	asrs	r3, r3, #8
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	75bb      	strb	r3, [r7, #22]
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001bc8:	f107 0114 	add.w	r1, r7, #20
 8001bcc:	2301      	movs	r3, #1
 8001bce:	2204      	movs	r2, #4
 8001bd0:	4844      	ldr	r0, [pc, #272]	; (8001ce4 <ILI9341_Draw_Pixel+0x1b0>)
 8001bd2:	f001 fe52 	bl	800387a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bdc:	4840      	ldr	r0, [pc, #256]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001bde:	f000 fc01 	bl	80023e4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be8:	483d      	ldr	r0, [pc, #244]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001bea:	f000 fbfb 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bf4:	483a      	ldr	r0, [pc, #232]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001bf6:	f000 fbf5 	bl	80023e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001bfa:	202b      	movs	r0, #43	; 0x2b
 8001bfc:	f7ff fcaa 	bl	8001554 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c06:	4836      	ldr	r0, [pc, #216]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001c08:	f000 fbec 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c12:	4833      	ldr	r0, [pc, #204]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001c14:	f000 fbe6 	bl	80023e4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c1e:	4830      	ldr	r0, [pc, #192]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001c20:	f000 fbe0 	bl	80023e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001c24:	88bb      	ldrh	r3, [r7, #4]
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	743b      	strb	r3, [r7, #16]
 8001c2e:	88bb      	ldrh	r3, [r7, #4]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	747b      	strb	r3, [r7, #17]
 8001c34:	88bb      	ldrh	r3, [r7, #4]
 8001c36:	3301      	adds	r3, #1
 8001c38:	121b      	asrs	r3, r3, #8
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	74bb      	strb	r3, [r7, #18]
 8001c3e:	88bb      	ldrh	r3, [r7, #4]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001c48:	f107 0110 	add.w	r1, r7, #16
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4824      	ldr	r0, [pc, #144]	; (8001ce4 <ILI9341_Draw_Pixel+0x1b0>)
 8001c52:	f001 fe12 	bl	800387a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c5c:	4820      	ldr	r0, [pc, #128]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001c5e:	f000 fbc1 	bl	80023e4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c68:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001c6a:	f000 fbbb 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c74:	481a      	ldr	r0, [pc, #104]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001c76:	f000 fbb5 	bl	80023e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001c7a:	202c      	movs	r0, #44	; 0x2c
 8001c7c:	f7ff fc6a 	bl	8001554 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c86:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001c88:	f000 fbac 	bl	80023e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c92:	4813      	ldr	r0, [pc, #76]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001c94:	f000 fba6 	bl	80023e4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c9e:	4810      	ldr	r0, [pc, #64]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001ca0:	f000 fba0 	bl	80023e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	733b      	strb	r3, [r7, #12]
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001cb4:	f107 010c 	add.w	r1, r7, #12
 8001cb8:	2301      	movs	r3, #1
 8001cba:	2202      	movs	r2, #2
 8001cbc:	4809      	ldr	r0, [pc, #36]	; (8001ce4 <ILI9341_Draw_Pixel+0x1b0>)
 8001cbe:	f001 fddc 	bl	800387a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <ILI9341_Draw_Pixel+0x1ac>)
 8001cca:	f000 fb8b 	bl	80023e4 <HAL_GPIO_WritePin>
 8001cce:	e000      	b.n	8001cd2 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001cd0:	bf00      	nop
	
}
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000006 	.word	0x20000006
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	200002a4 	.word	0x200002a4

08001ce8 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4604      	mov	r4, r0
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	80fb      	strh	r3, [r7, #6]
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80bb      	strh	r3, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	807b      	strh	r3, [r7, #2]
 8001d02:	4613      	mov	r3, r2
 8001d04:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <ILI9341_Draw_Rectangle+0xb0>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	88fa      	ldrh	r2, [r7, #6]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d23d      	bcs.n	8001d8e <ILI9341_Draw_Rectangle+0xa6>
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <ILI9341_Draw_Rectangle+0xb4>)
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	88ba      	ldrh	r2, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d237      	bcs.n	8001d8e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001d1e:	88fa      	ldrh	r2, [r7, #6]
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <ILI9341_Draw_Rectangle+0xb0>)
 8001d26:	8812      	ldrh	r2, [r2, #0]
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	dd05      	ble.n	8001d3a <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <ILI9341_Draw_Rectangle+0xb0>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001d3a:	88ba      	ldrh	r2, [r7, #4]
 8001d3c:	883b      	ldrh	r3, [r7, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <ILI9341_Draw_Rectangle+0xb4>)
 8001d42:	8812      	ldrh	r2, [r2, #0]
 8001d44:	b292      	uxth	r2, r2
 8001d46:	4293      	cmp	r3, r2
 8001d48:	dd05      	ble.n	8001d56 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <ILI9341_Draw_Rectangle+0xb4>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001d56:	88fa      	ldrh	r2, [r7, #6]
 8001d58:	887b      	ldrh	r3, [r7, #2]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29c      	uxth	r4, r3
 8001d62:	88ba      	ldrh	r2, [r7, #4]
 8001d64:	883b      	ldrh	r3, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	88b9      	ldrh	r1, [r7, #4]
 8001d70:	88f8      	ldrh	r0, [r7, #6]
 8001d72:	4622      	mov	r2, r4
 8001d74:	f7ff fc44 	bl	8001600 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001d78:	883b      	ldrh	r3, [r7, #0]
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	8b3b      	ldrh	r3, [r7, #24]
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fe10 	bl	80019ac <ILI9341_Draw_Colour_Burst>
 8001d8c:	e000      	b.n	8001d90 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001d8e:	bf00      	nop
}
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd90      	pop	{r4, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000006 	.word	0x20000006
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_Init+0x34>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_Init+0x34>)
 8001daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_Init+0x34>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_Init+0x34>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 f931 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f000 f808 	bl	8001dd8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001dc8:	f7ff f82a 	bl	8000e20 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00

08001dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_InitTick+0x54>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_InitTick+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f93b 	bl	8002072 <HAL_SYSTICK_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00e      	b.n	8001e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d80a      	bhi.n	8001e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f000 f911 	bl	800203a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e18:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <HAL_InitTick+0x5c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	2000000c 	.word	0x2000000c
 8001e34:	20000008 	.word	0x20000008

08001e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x20>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x24>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_IncTick+0x24>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2000000c 	.word	0x2000000c
 8001e5c:	200003dc 	.word	0x200003dc

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	200003dc 	.word	0x200003dc

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff ffee 	bl	8001e60 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d005      	beq.n	8001e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_Delay+0x44>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9e:	bf00      	nop
 8001ea0:	f7ff ffde 	bl	8001e60 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d8f7      	bhi.n	8001ea0 <HAL_Delay+0x28>
  {
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000000c 	.word	0x2000000c

08001ec0 <__NVIC_SetPriorityGrouping>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <__NVIC_SetPriorityGrouping+0x40>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x40>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00
 8001f04:	05fa0000 	.word	0x05fa0000

08001f08 <__NVIC_GetPriorityGrouping>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_SetPriority>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ff8e 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff47 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff5c 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff8e 	bl	8001f78 <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5d 	bl	8001f24 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffb0 	bl	8001fe0 <SysTick_Config>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e175      	b.n	8002398 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8164 	bne.w	8002392 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d00b      	beq.n	80020ea <HAL_GPIO_Init+0x5e>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020de:	2b11      	cmp	r3, #17
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d130      	bne.n	800214c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002120:	2201      	movs	r2, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 0201 	and.w	r2, r3, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x100>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b12      	cmp	r3, #18
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80be 	beq.w	8002392 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b66      	ldr	r3, [pc, #408]	; (80023b0 <HAL_GPIO_Init+0x324>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a65      	ldr	r2, [pc, #404]	; (80023b0 <HAL_GPIO_Init+0x324>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_GPIO_Init+0x324>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800222e:	4a61      	ldr	r2, [pc, #388]	; (80023b4 <HAL_GPIO_Init+0x328>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a58      	ldr	r2, [pc, #352]	; (80023b8 <HAL_GPIO_Init+0x32c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d037      	beq.n	80022ca <HAL_GPIO_Init+0x23e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a57      	ldr	r2, [pc, #348]	; (80023bc <HAL_GPIO_Init+0x330>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d031      	beq.n	80022c6 <HAL_GPIO_Init+0x23a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a56      	ldr	r2, [pc, #344]	; (80023c0 <HAL_GPIO_Init+0x334>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d02b      	beq.n	80022c2 <HAL_GPIO_Init+0x236>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a55      	ldr	r2, [pc, #340]	; (80023c4 <HAL_GPIO_Init+0x338>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d025      	beq.n	80022be <HAL_GPIO_Init+0x232>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a54      	ldr	r2, [pc, #336]	; (80023c8 <HAL_GPIO_Init+0x33c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01f      	beq.n	80022ba <HAL_GPIO_Init+0x22e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a53      	ldr	r2, [pc, #332]	; (80023cc <HAL_GPIO_Init+0x340>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d019      	beq.n	80022b6 <HAL_GPIO_Init+0x22a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a52      	ldr	r2, [pc, #328]	; (80023d0 <HAL_GPIO_Init+0x344>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_GPIO_Init+0x226>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a51      	ldr	r2, [pc, #324]	; (80023d4 <HAL_GPIO_Init+0x348>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00d      	beq.n	80022ae <HAL_GPIO_Init+0x222>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a50      	ldr	r2, [pc, #320]	; (80023d8 <HAL_GPIO_Init+0x34c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x21e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4f      	ldr	r2, [pc, #316]	; (80023dc <HAL_GPIO_Init+0x350>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_GPIO_Init+0x21a>
 80022a2:	2309      	movs	r3, #9
 80022a4:	e012      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022a6:	230a      	movs	r3, #10
 80022a8:	e010      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022aa:	2308      	movs	r3, #8
 80022ac:	e00e      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022ae:	2307      	movs	r3, #7
 80022b0:	e00c      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022b2:	2306      	movs	r3, #6
 80022b4:	e00a      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022b6:	2305      	movs	r3, #5
 80022b8:	e008      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022ba:	2304      	movs	r3, #4
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022be:	2303      	movs	r3, #3
 80022c0:	e004      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022ca:	2300      	movs	r3, #0
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	f002 0203 	and.w	r2, r2, #3
 80022d2:	0092      	lsls	r2, r2, #2
 80022d4:	4093      	lsls	r3, r2
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022dc:	4935      	ldr	r1, [pc, #212]	; (80023b4 <HAL_GPIO_Init+0x328>)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_GPIO_Init+0x354>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800230e:	4a34      	ldr	r2, [pc, #208]	; (80023e0 <HAL_GPIO_Init+0x354>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002314:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <HAL_GPIO_Init+0x354>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002338:	4a29      	ldr	r2, [pc, #164]	; (80023e0 <HAL_GPIO_Init+0x354>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800233e:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <HAL_GPIO_Init+0x354>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002362:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_GPIO_Init+0x354>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002368:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_GPIO_Init+0x354>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <HAL_GPIO_Init+0x354>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b0f      	cmp	r3, #15
 800239c:	f67f ae86 	bls.w	80020ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40013800 	.word	0x40013800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40020400 	.word	0x40020400
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020c00 	.word	0x40020c00
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40021400 	.word	0x40021400
 80023d0:	40021800 	.word	0x40021800
 80023d4:	40021c00 	.word	0x40021c00
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40022400 	.word	0x40022400
 80023e0:	40013c00 	.word	0x40013c00

080023e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f4:	787b      	ldrb	r3, [r7, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002400:	e003      	b.n	800240a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	041a      	lsls	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	619a      	str	r2, [r3, #24]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40007000 	.word	0x40007000

08002438 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	6413      	str	r3, [r2, #64]	; 0x40
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002466:	f7ff fcfb 	bl	8001e60 <HAL_GetTick>
 800246a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800246c:	e009      	b.n	8002482 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800246e:	f7ff fcf7 	bl	8001e60 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800247c:	d901      	bls.n	8002482 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e022      	b.n	80024c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248e:	d1ee      	bne.n	800246e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800249c:	f7ff fce0 	bl	8001e60 <HAL_GetTick>
 80024a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024a2:	e009      	b.n	80024b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024a4:	f7ff fcdc 	bl	8001e60 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024b2:	d901      	bls.n	80024b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e007      	b.n	80024c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024c4:	d1ee      	bne.n	80024a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40007000 	.word	0x40007000

080024d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e29b      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024fc:	4b96      	ldr	r3, [pc, #600]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b04      	cmp	r3, #4
 8002506:	d00c      	beq.n	8002522 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002508:	4b93      	ldr	r3, [pc, #588]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d112      	bne.n	800253a <HAL_RCC_OscConfig+0x62>
 8002514:	4b90      	ldr	r3, [pc, #576]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b8d      	ldr	r3, [pc, #564]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d06c      	beq.n	8002608 <HAL_RCC_OscConfig+0x130>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d168      	bne.n	8002608 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e275      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x7a>
 8002544:	4b84      	ldr	r3, [pc, #528]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a83      	ldr	r2, [pc, #524]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e02e      	b.n	80025b0 <HAL_RCC_OscConfig+0xd8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x9c>
 800255a:	4b7f      	ldr	r3, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7e      	ldr	r2, [pc, #504]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b7c      	ldr	r3, [pc, #496]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7b      	ldr	r2, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800256c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xd8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0xc0>
 800257e:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a75      	ldr	r2, [pc, #468]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xd8>
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6e      	ldr	r2, [pc, #440]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6b      	ldr	r2, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff fc52 	bl	8001e60 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fc4e 	bl	8001e60 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e229      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b61      	ldr	r3, [pc, #388]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe8>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff fc3e 	bl	8001e60 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff fc3a 	bl	8001e60 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e215      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b57      	ldr	r3, [pc, #348]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x110>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d069      	beq.n	80026ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002616:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x190>
 800262e:	4b4a      	ldr	r3, [pc, #296]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x17a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1e9      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	493d      	ldr	r1, [pc, #244]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e040      	b.n	80026ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a38      	ldr	r2, [pc, #224]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7ff fbf0 	bl	8001e60 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002684:	f7ff fbec 	bl	8001e60 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1c7      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002696:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4929      	ldr	r1, [pc, #164]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
 80026b6:	e018      	b.n	80026ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a26      	ldr	r2, [pc, #152]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7ff fbcc 	bl	8001e60 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7ff fbc8 	bl	8001e60 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1a3      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d038      	beq.n	8002768 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7ff fba9 	bl	8001e60 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002712:	f7ff fba5 	bl	8001e60 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e180      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x23a>
 8002730:	e01a      	b.n	8002768 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7ff fb8f 	bl	8001e60 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002746:	f7ff fb8b 	bl	8001e60 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d903      	bls.n	800275c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e166      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
 8002758:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275c:	4b92      	ldr	r3, [pc, #584]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ee      	bne.n	8002746 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a4 	beq.w	80028be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a88      	ldr	r2, [pc, #544]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b86      	ldr	r3, [pc, #536]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279e:	4b83      	ldr	r3, [pc, #524]	; (80029ac <HAL_RCC_OscConfig+0x4d4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027aa:	4b80      	ldr	r3, [pc, #512]	; (80029ac <HAL_RCC_OscConfig+0x4d4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7f      	ldr	r2, [pc, #508]	; (80029ac <HAL_RCC_OscConfig+0x4d4>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7ff fb53 	bl	8001e60 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7ff fb4f 	bl	8001e60 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e12a      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d0:	4b76      	ldr	r3, [pc, #472]	; (80029ac <HAL_RCC_OscConfig+0x4d4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x31a>
 80027e4:	4b70      	ldr	r3, [pc, #448]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a6f      	ldr	r2, [pc, #444]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
 80027f0:	e02d      	b.n	800284e <HAL_RCC_OscConfig+0x376>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x33c>
 80027fa:	4b6b      	ldr	r3, [pc, #428]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a6a      	ldr	r2, [pc, #424]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a67      	ldr	r2, [pc, #412]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	e01c      	b.n	800284e <HAL_RCC_OscConfig+0x376>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b05      	cmp	r3, #5
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x35e>
 800281c:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a61      	ldr	r2, [pc, #388]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	4b5f      	ldr	r3, [pc, #380]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	4a5e      	ldr	r2, [pc, #376]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	; 0x70
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0x376>
 8002836:	4b5c      	ldr	r3, [pc, #368]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a5b      	ldr	r2, [pc, #364]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
 8002842:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d015      	beq.n	8002882 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7ff fb03 	bl	8001e60 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7ff faff 	bl	8001e60 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0d8      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ee      	beq.n	800285e <HAL_RCC_OscConfig+0x386>
 8002880:	e014      	b.n	80028ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7ff faed 	bl	8001e60 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7ff fae9 	bl	8001e60 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e0c2      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ee      	bne.n	800288a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a3c      	ldr	r2, [pc, #240]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80ae 	beq.w	8002a24 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d06d      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d14b      	bne.n	8002974 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4b32      	ldr	r3, [pc, #200]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff faba 	bl	8001e60 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7ff fab6 	bl	8001e60 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e091      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	019b      	lsls	r3, r3, #6
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	071b      	lsls	r3, r3, #28
 800293a:	491b      	ldr	r1, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7ff fa88 	bl	8001e60 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7ff fa84 	bl	8001e60 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e05f      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x47c>
 8002972:	e057      	b.n	8002a24 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800297a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7ff fa6e 	bl	8001e60 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7ff fa6a 	bl	8001e60 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e045      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x4b0>
 80029a6:	e03d      	b.n	8002a24 <HAL_RCC_OscConfig+0x54c>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <HAL_RCC_OscConfig+0x558>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d030      	beq.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d129      	bne.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d122      	bne.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d119      	bne.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d10f      	bne.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800

08002a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0d0      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d910      	bls.n	8002a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b67      	ldr	r3, [pc, #412]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 020f 	bic.w	r2, r3, #15
 8002a62:	4965      	ldr	r1, [pc, #404]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0b8      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d020      	beq.n	8002aca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a94:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a52      	ldr	r2, [pc, #328]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	494d      	ldr	r1, [pc, #308]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d040      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d115      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e07f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e073      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b06:	4b3d      	ldr	r3, [pc, #244]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e06b      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b16:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f023 0203 	bic.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4936      	ldr	r1, [pc, #216]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b28:	f7ff f99a 	bl	8001e60 <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b30:	f7ff f996 	bl	8001e60 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e053      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 020c 	and.w	r2, r3, #12
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1eb      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b58:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d210      	bcs.n	8002b88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 020f 	bic.w	r2, r3, #15
 8002b6e:	4922      	ldr	r1, [pc, #136]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e032      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4916      	ldr	r1, [pc, #88]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	490e      	ldr	r1, [pc, #56]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bc6:	f000 f821 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	490a      	ldr	r1, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x1cc>)
 8002bd8:	5ccb      	ldrb	r3, [r1, r3]
 8002bda:	fa22 f303 	lsr.w	r3, r2, r3
 8002bde:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <HAL_RCC_ClockConfig+0x1d0>)
 8002be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1d4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff f8f6 	bl	8001dd8 <HAL_InitTick>

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	080077c8 	.word	0x080077c8
 8002c04:	20000000 	.word	0x20000000
 8002c08:	20000008 	.word	0x20000008

08002c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c10:	b094      	sub	sp, #80	; 0x50
 8002c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	647b      	str	r3, [r7, #68]	; 0x44
 8002c18:	2300      	movs	r3, #0
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c24:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d00d      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x40>
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	f200 80e1 	bhi.w	8002df8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3e:	e0db      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c44:	e0db      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c46:	4b73      	ldr	r3, [pc, #460]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c4a:	e0d8      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c4c:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c54:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c56:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d063      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c62:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	2200      	movs	r2, #0
 8002c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
 8002c76:	2300      	movs	r3, #0
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34
 8002c7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c7e:	4622      	mov	r2, r4
 8002c80:	462b      	mov	r3, r5
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	0159      	lsls	r1, r3, #5
 8002c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c90:	0150      	lsls	r0, r2, #5
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4621      	mov	r1, r4
 8002c98:	1a51      	subs	r1, r2, r1
 8002c9a:	6139      	str	r1, [r7, #16]
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb0:	4659      	mov	r1, fp
 8002cb2:	018b      	lsls	r3, r1, #6
 8002cb4:	4651      	mov	r1, sl
 8002cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cba:	4651      	mov	r1, sl
 8002cbc:	018a      	lsls	r2, r1, #6
 8002cbe:	4651      	mov	r1, sl
 8002cc0:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	eb63 0901 	sbc.w	r9, r3, r1
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cde:	4690      	mov	r8, r2
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	eb18 0303 	adds.w	r3, r8, r3
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	462b      	mov	r3, r5
 8002cec:	eb49 0303 	adc.w	r3, r9, r3
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cfe:	4629      	mov	r1, r5
 8002d00:	024b      	lsls	r3, r1, #9
 8002d02:	4621      	mov	r1, r4
 8002d04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d08:	4621      	mov	r1, r4
 8002d0a:	024a      	lsls	r2, r1, #9
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d12:	2200      	movs	r2, #0
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d1c:	f7fd fae8 	bl	80002f0 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d28:	e058      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	2200      	movs	r2, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	4611      	mov	r1, r2
 8002d36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d44:	4642      	mov	r2, r8
 8002d46:	464b      	mov	r3, r9
 8002d48:	f04f 0000 	mov.w	r0, #0
 8002d4c:	f04f 0100 	mov.w	r1, #0
 8002d50:	0159      	lsls	r1, r3, #5
 8002d52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d56:	0150      	lsls	r0, r2, #5
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d62:	4649      	mov	r1, r9
 8002d64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d80:	eb63 050b 	sbc.w	r5, r3, fp
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	00eb      	lsls	r3, r5, #3
 8002d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d92:	00e2      	lsls	r2, r4, #3
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
 8002d98:	4643      	mov	r3, r8
 8002d9a:	18e3      	adds	r3, r4, r3
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	464b      	mov	r3, r9
 8002da0:	eb45 0303 	adc.w	r3, r5, r3
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db2:	4629      	mov	r1, r5
 8002db4:	028b      	lsls	r3, r1, #10
 8002db6:	4621      	mov	r1, r4
 8002db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	028a      	lsls	r2, r1, #10
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	61fa      	str	r2, [r7, #28]
 8002dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd0:	f7fd fa8e 	bl	80002f0 <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	3301      	adds	r3, #1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002dec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3750      	adds	r7, #80	; 0x50
 8002e04:	46bd      	mov	sp, r7
 8002e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	00f42400 	.word	0x00f42400
 8002e14:	007a1200 	.word	0x007a1200

08002e18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000

08002e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e34:	f7ff fff0 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	0a9b      	lsrs	r3, r3, #10
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4903      	ldr	r1, [pc, #12]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40023800 	.word	0x40023800
 8002e54:	080077d8 	.word	0x080077d8

08002e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e5c:	f7ff ffdc 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	0b5b      	lsrs	r3, r3, #13
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4903      	ldr	r1, [pc, #12]	; (8002e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	080077d8 	.word	0x080077d8

08002e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d012      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ea8:	4b69      	ldr	r3, [pc, #420]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a68      	ldr	r2, [pc, #416]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002eb2:	6093      	str	r3, [r2, #8]
 8002eb4:	4b66      	ldr	r3, [pc, #408]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebc:	4964      	ldr	r1, [pc, #400]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d017      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eda:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	4959      	ldr	r1, [pc, #356]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef8:	d101      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d017      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f16:	4b4e      	ldr	r3, [pc, #312]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	494a      	ldr	r1, [pc, #296]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f34:	d101      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f42:	2301      	movs	r3, #1
 8002f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 808b 	beq.w	800307a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f64:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	4a39      	ldr	r2, [pc, #228]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f70:	4b37      	ldr	r3, [pc, #220]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a34      	ldr	r2, [pc, #208]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f88:	f7fe ff6a 	bl	8001e60 <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f90:	f7fe ff66 	bl	8001e60 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e38f      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fa2:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fae:	4b28      	ldr	r3, [pc, #160]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d035      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d02e      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d114      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe ff2e 	bl	8001e60 <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe ff2a 	bl	8001e60 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e351      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ee      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003036:	d111      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003046:	400b      	ands	r3, r1
 8003048:	4901      	ldr	r1, [pc, #4]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
 800304e:	e00b      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
 8003058:	0ffffcff 	.word	0x0ffffcff
 800305c:	4bac      	ldr	r3, [pc, #688]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4aab      	ldr	r2, [pc, #684]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003066:	6093      	str	r3, [r2, #8]
 8003068:	4ba9      	ldr	r3, [pc, #676]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003074:	49a6      	ldr	r1, [pc, #664]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	4313      	orrs	r3, r2
 8003078:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003086:	4ba2      	ldr	r3, [pc, #648]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800308c:	4aa0      	ldr	r2, [pc, #640]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003092:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003096:	4b9e      	ldr	r3, [pc, #632]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	499b      	ldr	r1, [pc, #620]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b4:	4b96      	ldr	r3, [pc, #600]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c2:	4993      	ldr	r1, [pc, #588]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030d6:	4b8e      	ldr	r3, [pc, #568]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e4:	498a      	ldr	r1, [pc, #552]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f8:	4b85      	ldr	r3, [pc, #532]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003106:	4982      	ldr	r1, [pc, #520]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800311a:	4b7d      	ldr	r3, [pc, #500]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	4979      	ldr	r1, [pc, #484]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800313c:	4b74      	ldr	r3, [pc, #464]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	4971      	ldr	r1, [pc, #452]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315e:	4b6c      	ldr	r3, [pc, #432]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f023 020c 	bic.w	r2, r3, #12
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	4968      	ldr	r1, [pc, #416]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003180:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	4960      	ldr	r1, [pc, #384]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031a2:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	4957      	ldr	r1, [pc, #348]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031c4:	4b52      	ldr	r3, [pc, #328]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	494f      	ldr	r1, [pc, #316]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031e6:	4b4a      	ldr	r3, [pc, #296]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	4946      	ldr	r1, [pc, #280]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003208:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	493e      	ldr	r1, [pc, #248]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800322a:	4b39      	ldr	r3, [pc, #228]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	4935      	ldr	r1, [pc, #212]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800324c:	4b30      	ldr	r3, [pc, #192]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800325a:	492d      	ldr	r1, [pc, #180]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d011      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800327c:	4924      	ldr	r1, [pc, #144]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800328c:	d101      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800328e:	2301      	movs	r3, #1
 8003290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032bc:	4914      	ldr	r1, [pc, #80]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e0:	490b      	ldr	r1, [pc, #44]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00f      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003304:	4902      	ldr	r1, [pc, #8]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800330c:	e002      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003320:	4b8a      	ldr	r3, [pc, #552]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003326:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	4986      	ldr	r1, [pc, #536]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003344:	4b81      	ldr	r3, [pc, #516]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800334a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003354:	497d      	ldr	r1, [pc, #500]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d006      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 80d6 	beq.w	800351c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003370:	4b76      	ldr	r3, [pc, #472]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a75      	ldr	r2, [pc, #468]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003376:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800337a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337c:	f7fe fd70 	bl	8001e60 <HAL_GetTick>
 8003380:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003384:	f7fe fd6c 	bl	8001e60 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e195      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003396:	4b6d      	ldr	r3, [pc, #436]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d021      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d11d      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033b6:	4b65      	ldr	r3, [pc, #404]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033c4:	4b61      	ldr	r3, [pc, #388]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ca:	0e1b      	lsrs	r3, r3, #24
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	019a      	lsls	r2, r3, #6
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	061b      	lsls	r3, r3, #24
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	071b      	lsls	r3, r3, #28
 80033ea:	4958      	ldr	r1, [pc, #352]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d004      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003410:	2b00      	cmp	r3, #0
 8003412:	d02e      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341c:	d129      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800341e:	4b4b      	ldr	r3, [pc, #300]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800342c:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800342e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003432:	0f1b      	lsrs	r3, r3, #28
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	019a      	lsls	r2, r3, #6
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	061b      	lsls	r3, r3, #24
 800344c:	431a      	orrs	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	071b      	lsls	r3, r3, #28
 8003452:	493e      	ldr	r1, [pc, #248]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800345a:	4b3c      	ldr	r3, [pc, #240]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003460:	f023 021f 	bic.w	r2, r3, #31
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	3b01      	subs	r3, #1
 800346a:	4938      	ldr	r1, [pc, #224]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01d      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800347e:	4b33      	ldr	r3, [pc, #204]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003484:	0e1b      	lsrs	r3, r3, #24
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800348c:	4b2f      	ldr	r3, [pc, #188]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003492:	0f1b      	lsrs	r3, r3, #28
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	019a      	lsls	r2, r3, #6
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	061b      	lsls	r3, r3, #24
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	4926      	ldr	r1, [pc, #152]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d011      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	019a      	lsls	r2, r3, #6
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	071b      	lsls	r3, r3, #28
 80034e2:	491a      	ldr	r1, [pc, #104]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034ea:	4b18      	ldr	r3, [pc, #96]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a17      	ldr	r2, [pc, #92]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f6:	f7fe fcb3 	bl	8001e60 <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034fe:	f7fe fcaf 	bl	8001e60 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	; 0x64
 800350a:	d901      	bls.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0d8      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003510:	4b0e      	ldr	r3, [pc, #56]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b01      	cmp	r3, #1
 8003520:	f040 80ce 	bne.w	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a08      	ldr	r2, [pc, #32]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800352a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003530:	f7fe fc96 	bl	8001e60 <HAL_GetTick>
 8003534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003536:	e00b      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003538:	f7fe fc92 	bl	8001e60 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	; 0x64
 8003544:	d904      	bls.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e0bb      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003550:	4b5e      	ldr	r3, [pc, #376]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800355c:	d0ec      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800357a:	2b00      	cmp	r3, #0
 800357c:	d02e      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d12a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003586:	4b51      	ldr	r3, [pc, #324]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003594:	4b4d      	ldr	r3, [pc, #308]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	0f1b      	lsrs	r3, r3, #28
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	019a      	lsls	r2, r3, #6
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	061b      	lsls	r3, r3, #24
 80035b4:	431a      	orrs	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	071b      	lsls	r3, r3, #28
 80035ba:	4944      	ldr	r1, [pc, #272]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035c2:	4b42      	ldr	r3, [pc, #264]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	3b01      	subs	r3, #1
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	493d      	ldr	r1, [pc, #244]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d022      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f0:	d11d      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035f2:	4b36      	ldr	r3, [pc, #216]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	0e1b      	lsrs	r3, r3, #24
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	0f1b      	lsrs	r3, r3, #28
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	019a      	lsls	r2, r3, #6
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	431a      	orrs	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	061b      	lsls	r3, r3, #24
 8003620:	431a      	orrs	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	071b      	lsls	r3, r3, #28
 8003626:	4929      	ldr	r1, [pc, #164]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d028      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800363a:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	0e1b      	lsrs	r3, r3, #24
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003648:	4b20      	ldr	r3, [pc, #128]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	0c1b      	lsrs	r3, r3, #16
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	019a      	lsls	r2, r3, #6
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	431a      	orrs	r2, r3
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	061b      	lsls	r3, r3, #24
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	071b      	lsls	r3, r3, #28
 800366e:	4917      	ldr	r1, [pc, #92]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800367c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	4911      	ldr	r1, [pc, #68]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003698:	f7fe fbe2 	bl	8001e60 <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036a0:	f7fe fbde 	bl	8001e60 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e007      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036be:	d1ef      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800

080036d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e01c      	b.n	800371c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	795b      	ldrb	r3, [r3, #5]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd faf2 	bl	8000cdc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0204 	orr.w	r2, r2, #4
 800370c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e09d      	b.n	8003872 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003746:	d009      	beq.n	800375c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	61da      	str	r2, [r3, #28]
 800374e:	e005      	b.n	800375c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd fb0e 	bl	8000d98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003792:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800379c:	d902      	bls.n	80037a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e002      	b.n	80037aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037b2:	d007      	beq.n	80037c4 <HAL_SPI_Init+0xa0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037bc:	d002      	beq.n	80037c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	ea42 0103 	orr.w	r1, r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	f003 0204 	and.w	r2, r3, #4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003840:	ea42 0103 	orr.w	r1, r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003860:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b088      	sub	sp, #32
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_SPI_Transmit+0x22>
 8003898:	2302      	movs	r3, #2
 800389a:	e158      	b.n	8003b4e <HAL_SPI_Transmit+0x2d4>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a4:	f7fe fadc 	bl	8001e60 <HAL_GetTick>
 80038a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d002      	beq.n	80038c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
 80038bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038be:	e13d      	b.n	8003b3c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_SPI_Transmit+0x52>
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d0:	e134      	b.n	8003b3c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2203      	movs	r2, #3
 80038d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391c:	d10f      	bne.n	800393e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d007      	beq.n	800395c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003964:	d94b      	bls.n	80039fe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_SPI_Transmit+0xfa>
 800396e:	8afb      	ldrh	r3, [r7, #22]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d13e      	bne.n	80039f2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003998:	e02b      	b.n	80039f2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d112      	bne.n	80039ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	881a      	ldrh	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	1c9a      	adds	r2, r3, #2
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039cc:	e011      	b.n	80039f2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ce:	f7fe fa47 	bl	8001e60 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d803      	bhi.n	80039e6 <HAL_SPI_Transmit+0x16c>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d102      	bne.n	80039ec <HAL_SPI_Transmit+0x172>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f0:	e0a4      	b.n	8003b3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ce      	bne.n	800399a <HAL_SPI_Transmit+0x120>
 80039fc:	e07c      	b.n	8003af8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_SPI_Transmit+0x192>
 8003a06:	8afb      	ldrh	r3, [r7, #22]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d170      	bne.n	8003aee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d912      	bls.n	8003a3c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	881a      	ldrh	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	1c9a      	adds	r2, r3, #2
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b02      	subs	r3, #2
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a3a:	e058      	b.n	8003aee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a62:	e044      	b.n	8003aee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d12b      	bne.n	8003aca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d912      	bls.n	8003aa2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	881a      	ldrh	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	1c9a      	adds	r2, r3, #2
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b02      	subs	r3, #2
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aa0:	e025      	b.n	8003aee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ac8:	e011      	b.n	8003aee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aca:	f7fe f9c9 	bl	8001e60 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d803      	bhi.n	8003ae2 <HAL_SPI_Transmit+0x268>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d102      	bne.n	8003ae8 <HAL_SPI_Transmit+0x26e>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aec:	e026      	b.n	8003b3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1b5      	bne.n	8003a64 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	6839      	ldr	r1, [r7, #0]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f945 	bl	8003d8c <SPI_EndRxTxTransaction>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e000      	b.n	8003b3c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b68:	f7fe f97a 	bl	8001e60 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	4413      	add	r3, r2
 8003b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b78:	f7fe f972 	bl	8001e60 <HAL_GetTick>
 8003b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b7e:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	015b      	lsls	r3, r3, #5
 8003b84:	0d1b      	lsrs	r3, r3, #20
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8e:	e054      	b.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d050      	beq.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b98:	f7fe f962 	bl	8001e60 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d902      	bls.n	8003bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d13d      	bne.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc6:	d111      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd0:	d004      	beq.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d107      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf4:	d10f      	bne.n	8003c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e017      	b.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d19b      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000000 	.word	0x20000000

08003c68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c76:	f7fe f8f3 	bl	8001e60 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c86:	f7fe f8eb 	bl	8001e60 <HAL_GetTick>
 8003c8a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00da      	lsls	r2, r3, #3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	0d1b      	lsrs	r3, r3, #20
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ca4:	e062      	b.n	8003d6c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003cac:	d109      	bne.n	8003cc2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003cc0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d050      	beq.n	8003d6c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cca:	f7fe f8c9 	bl	8001e60 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d902      	bls.n	8003ce0 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d13d      	bne.n	8003d5c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf8:	d111      	bne.n	8003d1e <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d02:	d004      	beq.n	8003d0e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0c:	d107      	bne.n	8003d1e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d26:	d10f      	bne.n	8003d48 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e010      	b.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d194      	bne.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000000 	.word	0x20000000

08003d8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff ff5f 	bl	8003c68 <SPI_WaitFifoStateUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d007      	beq.n	8003dc0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e027      	b.n	8003e10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7ff fec4 	bl	8003b58 <SPI_WaitFlagStateUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e014      	b.n	8003e10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff ff38 	bl	8003c68 <SPI_WaitFifoStateUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e000      	b.n	8003e10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e049      	b.n	8003ebe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd f968 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f000 f8fc 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIM_ConfigClockSource+0x18>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e0b3      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x180>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4b55      	ldr	r3, [pc, #340]	; (8004050 <HAL_TIM_ConfigClockSource+0x188>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f18:	d03e      	beq.n	8003f98 <HAL_TIM_ConfigClockSource+0xd0>
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1e:	f200 8087 	bhi.w	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f26:	f000 8085 	beq.w	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2e:	d87f      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f30:	2b70      	cmp	r3, #112	; 0x70
 8003f32:	d01a      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0xa2>
 8003f34:	2b70      	cmp	r3, #112	; 0x70
 8003f36:	d87b      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f38:	2b60      	cmp	r3, #96	; 0x60
 8003f3a:	d050      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x116>
 8003f3c:	2b60      	cmp	r3, #96	; 0x60
 8003f3e:	d877      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f40:	2b50      	cmp	r3, #80	; 0x50
 8003f42:	d03c      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0xf6>
 8003f44:	2b50      	cmp	r3, #80	; 0x50
 8003f46:	d873      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d058      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x136>
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d86f      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f50:	2b30      	cmp	r3, #48	; 0x30
 8003f52:	d064      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x156>
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	d86b      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d060      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x156>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d867      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05c      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x156>
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d05a      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f68:	e062      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6899      	ldr	r1, [r3, #8]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f000 f985 	bl	8004288 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	609a      	str	r2, [r3, #8]
      break;
 8003f96:	e04e      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f000 f96e 	bl	8004288 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fba:	609a      	str	r2, [r3, #8]
      break;
 8003fbc:	e03b      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 f8e2 	bl	8004194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2150      	movs	r1, #80	; 0x50
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f93b 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e02b      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 f901 	bl	80041f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2160      	movs	r1, #96	; 0x60
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f92b 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e01b      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	461a      	mov	r2, r3
 800400c:	f000 f8c2 	bl	8004194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2140      	movs	r1, #64	; 0x40
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f91b 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 800401c:	e00b      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f000 f912 	bl	8004252 <TIM_ITRx_SetConfig>
        break;
 800402e:	e002      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004030:	bf00      	nop
 8004032:	e000      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004034:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	fffeff88 	.word	0xfffeff88

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a40      	ldr	r2, [pc, #256]	; (8004168 <TIM_Base_SetConfig+0x114>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a3d      	ldr	r2, [pc, #244]	; (800416c <TIM_Base_SetConfig+0x118>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3c      	ldr	r2, [pc, #240]	; (8004170 <TIM_Base_SetConfig+0x11c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3b      	ldr	r2, [pc, #236]	; (8004174 <TIM_Base_SetConfig+0x120>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3a      	ldr	r2, [pc, #232]	; (8004178 <TIM_Base_SetConfig+0x124>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <TIM_Base_SetConfig+0x114>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d027      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a2c      	ldr	r2, [pc, #176]	; (800416c <TIM_Base_SetConfig+0x118>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d023      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2b      	ldr	r2, [pc, #172]	; (8004170 <TIM_Base_SetConfig+0x11c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01f      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2a      	ldr	r2, [pc, #168]	; (8004174 <TIM_Base_SetConfig+0x120>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a29      	ldr	r2, [pc, #164]	; (8004178 <TIM_Base_SetConfig+0x124>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d017      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a28      	ldr	r2, [pc, #160]	; (800417c <TIM_Base_SetConfig+0x128>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a27      	ldr	r2, [pc, #156]	; (8004180 <TIM_Base_SetConfig+0x12c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00f      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a26      	ldr	r2, [pc, #152]	; (8004184 <TIM_Base_SetConfig+0x130>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a25      	ldr	r2, [pc, #148]	; (8004188 <TIM_Base_SetConfig+0x134>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a24      	ldr	r2, [pc, #144]	; (800418c <TIM_Base_SetConfig+0x138>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a23      	ldr	r2, [pc, #140]	; (8004190 <TIM_Base_SetConfig+0x13c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <TIM_Base_SetConfig+0x114>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_Base_SetConfig+0xf8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a0c      	ldr	r2, [pc, #48]	; (8004178 <TIM_Base_SetConfig+0x124>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d103      	bne.n	8004154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	615a      	str	r2, [r3, #20]
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40010000 	.word	0x40010000
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800
 8004174:	40000c00 	.word	0x40000c00
 8004178:	40010400 	.word	0x40010400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800
 8004188:	40001800 	.word	0x40001800
 800418c:	40001c00 	.word	0x40001c00
 8004190:	40002000 	.word	0x40002000

08004194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 030a 	bic.w	r3, r3, #10
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b087      	sub	sp, #28
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0210 	bic.w	r2, r3, #16
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800421c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	f043 0307 	orr.w	r3, r3, #7
 8004274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e06d      	b.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a30      	ldr	r2, [pc, #192]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d108      	bne.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800431a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d022      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004352:	d01d      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d018      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d013      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00e      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a15      	ldr	r2, [pc, #84]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d009      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a16      	ldr	r2, [pc, #88]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d10c      	bne.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004396:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40010400 	.word	0x40010400
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40001800 	.word	0x40001800

080043e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e040      	b.n	8004478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc fed4 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f82c 	bl	8004480 <UART_SetConfig>
 8004428:	4603      	mov	r3, r0
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e022      	b.n	8004478 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa84 	bl	8004948 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800444e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800445e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fb0b 	bl	8004a8c <UART_CheckIdleState>
 8004476:	4603      	mov	r3, r0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4ba6      	ldr	r3, [pc, #664]	; (8004744 <UART_SetConfig+0x2c4>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	6979      	ldr	r1, [r7, #20]
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a94      	ldr	r2, [pc, #592]	; (8004748 <UART_SetConfig+0x2c8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d120      	bne.n	800453e <UART_SetConfig+0xbe>
 80044fc:	4b93      	ldr	r3, [pc, #588]	; (800474c <UART_SetConfig+0x2cc>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b03      	cmp	r3, #3
 8004508:	d816      	bhi.n	8004538 <UART_SetConfig+0xb8>
 800450a:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <UART_SetConfig+0x90>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004521 	.word	0x08004521
 8004514:	0800452d 	.word	0x0800452d
 8004518:	08004527 	.word	0x08004527
 800451c:	08004533 	.word	0x08004533
 8004520:	2301      	movs	r3, #1
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e150      	b.n	80047c8 <UART_SetConfig+0x348>
 8004526:	2302      	movs	r3, #2
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	e14d      	b.n	80047c8 <UART_SetConfig+0x348>
 800452c:	2304      	movs	r3, #4
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e14a      	b.n	80047c8 <UART_SetConfig+0x348>
 8004532:	2308      	movs	r3, #8
 8004534:	77fb      	strb	r3, [r7, #31]
 8004536:	e147      	b.n	80047c8 <UART_SetConfig+0x348>
 8004538:	2310      	movs	r3, #16
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e144      	b.n	80047c8 <UART_SetConfig+0x348>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a83      	ldr	r2, [pc, #524]	; (8004750 <UART_SetConfig+0x2d0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d132      	bne.n	80045ae <UART_SetConfig+0x12e>
 8004548:	4b80      	ldr	r3, [pc, #512]	; (800474c <UART_SetConfig+0x2cc>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b0c      	cmp	r3, #12
 8004554:	d828      	bhi.n	80045a8 <UART_SetConfig+0x128>
 8004556:	a201      	add	r2, pc, #4	; (adr r2, 800455c <UART_SetConfig+0xdc>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	08004591 	.word	0x08004591
 8004560:	080045a9 	.word	0x080045a9
 8004564:	080045a9 	.word	0x080045a9
 8004568:	080045a9 	.word	0x080045a9
 800456c:	0800459d 	.word	0x0800459d
 8004570:	080045a9 	.word	0x080045a9
 8004574:	080045a9 	.word	0x080045a9
 8004578:	080045a9 	.word	0x080045a9
 800457c:	08004597 	.word	0x08004597
 8004580:	080045a9 	.word	0x080045a9
 8004584:	080045a9 	.word	0x080045a9
 8004588:	080045a9 	.word	0x080045a9
 800458c:	080045a3 	.word	0x080045a3
 8004590:	2300      	movs	r3, #0
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e118      	b.n	80047c8 <UART_SetConfig+0x348>
 8004596:	2302      	movs	r3, #2
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e115      	b.n	80047c8 <UART_SetConfig+0x348>
 800459c:	2304      	movs	r3, #4
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e112      	b.n	80047c8 <UART_SetConfig+0x348>
 80045a2:	2308      	movs	r3, #8
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e10f      	b.n	80047c8 <UART_SetConfig+0x348>
 80045a8:	2310      	movs	r3, #16
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e10c      	b.n	80047c8 <UART_SetConfig+0x348>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a68      	ldr	r2, [pc, #416]	; (8004754 <UART_SetConfig+0x2d4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d120      	bne.n	80045fa <UART_SetConfig+0x17a>
 80045b8:	4b64      	ldr	r3, [pc, #400]	; (800474c <UART_SetConfig+0x2cc>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045c2:	2b30      	cmp	r3, #48	; 0x30
 80045c4:	d013      	beq.n	80045ee <UART_SetConfig+0x16e>
 80045c6:	2b30      	cmp	r3, #48	; 0x30
 80045c8:	d814      	bhi.n	80045f4 <UART_SetConfig+0x174>
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d009      	beq.n	80045e2 <UART_SetConfig+0x162>
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d810      	bhi.n	80045f4 <UART_SetConfig+0x174>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <UART_SetConfig+0x15c>
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	d006      	beq.n	80045e8 <UART_SetConfig+0x168>
 80045da:	e00b      	b.n	80045f4 <UART_SetConfig+0x174>
 80045dc:	2300      	movs	r3, #0
 80045de:	77fb      	strb	r3, [r7, #31]
 80045e0:	e0f2      	b.n	80047c8 <UART_SetConfig+0x348>
 80045e2:	2302      	movs	r3, #2
 80045e4:	77fb      	strb	r3, [r7, #31]
 80045e6:	e0ef      	b.n	80047c8 <UART_SetConfig+0x348>
 80045e8:	2304      	movs	r3, #4
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	e0ec      	b.n	80047c8 <UART_SetConfig+0x348>
 80045ee:	2308      	movs	r3, #8
 80045f0:	77fb      	strb	r3, [r7, #31]
 80045f2:	e0e9      	b.n	80047c8 <UART_SetConfig+0x348>
 80045f4:	2310      	movs	r3, #16
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	e0e6      	b.n	80047c8 <UART_SetConfig+0x348>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a56      	ldr	r2, [pc, #344]	; (8004758 <UART_SetConfig+0x2d8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d120      	bne.n	8004646 <UART_SetConfig+0x1c6>
 8004604:	4b51      	ldr	r3, [pc, #324]	; (800474c <UART_SetConfig+0x2cc>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800460e:	2bc0      	cmp	r3, #192	; 0xc0
 8004610:	d013      	beq.n	800463a <UART_SetConfig+0x1ba>
 8004612:	2bc0      	cmp	r3, #192	; 0xc0
 8004614:	d814      	bhi.n	8004640 <UART_SetConfig+0x1c0>
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d009      	beq.n	800462e <UART_SetConfig+0x1ae>
 800461a:	2b80      	cmp	r3, #128	; 0x80
 800461c:	d810      	bhi.n	8004640 <UART_SetConfig+0x1c0>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <UART_SetConfig+0x1a8>
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d006      	beq.n	8004634 <UART_SetConfig+0x1b4>
 8004626:	e00b      	b.n	8004640 <UART_SetConfig+0x1c0>
 8004628:	2300      	movs	r3, #0
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e0cc      	b.n	80047c8 <UART_SetConfig+0x348>
 800462e:	2302      	movs	r3, #2
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e0c9      	b.n	80047c8 <UART_SetConfig+0x348>
 8004634:	2304      	movs	r3, #4
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e0c6      	b.n	80047c8 <UART_SetConfig+0x348>
 800463a:	2308      	movs	r3, #8
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e0c3      	b.n	80047c8 <UART_SetConfig+0x348>
 8004640:	2310      	movs	r3, #16
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e0c0      	b.n	80047c8 <UART_SetConfig+0x348>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a44      	ldr	r2, [pc, #272]	; (800475c <UART_SetConfig+0x2dc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d125      	bne.n	800469c <UART_SetConfig+0x21c>
 8004650:	4b3e      	ldr	r3, [pc, #248]	; (800474c <UART_SetConfig+0x2cc>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465e:	d017      	beq.n	8004690 <UART_SetConfig+0x210>
 8004660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004664:	d817      	bhi.n	8004696 <UART_SetConfig+0x216>
 8004666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466a:	d00b      	beq.n	8004684 <UART_SetConfig+0x204>
 800466c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004670:	d811      	bhi.n	8004696 <UART_SetConfig+0x216>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <UART_SetConfig+0x1fe>
 8004676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467a:	d006      	beq.n	800468a <UART_SetConfig+0x20a>
 800467c:	e00b      	b.n	8004696 <UART_SetConfig+0x216>
 800467e:	2300      	movs	r3, #0
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e0a1      	b.n	80047c8 <UART_SetConfig+0x348>
 8004684:	2302      	movs	r3, #2
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e09e      	b.n	80047c8 <UART_SetConfig+0x348>
 800468a:	2304      	movs	r3, #4
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e09b      	b.n	80047c8 <UART_SetConfig+0x348>
 8004690:	2308      	movs	r3, #8
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e098      	b.n	80047c8 <UART_SetConfig+0x348>
 8004696:	2310      	movs	r3, #16
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e095      	b.n	80047c8 <UART_SetConfig+0x348>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2f      	ldr	r2, [pc, #188]	; (8004760 <UART_SetConfig+0x2e0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d125      	bne.n	80046f2 <UART_SetConfig+0x272>
 80046a6:	4b29      	ldr	r3, [pc, #164]	; (800474c <UART_SetConfig+0x2cc>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b4:	d017      	beq.n	80046e6 <UART_SetConfig+0x266>
 80046b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ba:	d817      	bhi.n	80046ec <UART_SetConfig+0x26c>
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c0:	d00b      	beq.n	80046da <UART_SetConfig+0x25a>
 80046c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c6:	d811      	bhi.n	80046ec <UART_SetConfig+0x26c>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <UART_SetConfig+0x254>
 80046cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d0:	d006      	beq.n	80046e0 <UART_SetConfig+0x260>
 80046d2:	e00b      	b.n	80046ec <UART_SetConfig+0x26c>
 80046d4:	2301      	movs	r3, #1
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e076      	b.n	80047c8 <UART_SetConfig+0x348>
 80046da:	2302      	movs	r3, #2
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e073      	b.n	80047c8 <UART_SetConfig+0x348>
 80046e0:	2304      	movs	r3, #4
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e070      	b.n	80047c8 <UART_SetConfig+0x348>
 80046e6:	2308      	movs	r3, #8
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e06d      	b.n	80047c8 <UART_SetConfig+0x348>
 80046ec:	2310      	movs	r3, #16
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e06a      	b.n	80047c8 <UART_SetConfig+0x348>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1b      	ldr	r2, [pc, #108]	; (8004764 <UART_SetConfig+0x2e4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d138      	bne.n	800476e <UART_SetConfig+0x2ee>
 80046fc:	4b13      	ldr	r3, [pc, #76]	; (800474c <UART_SetConfig+0x2cc>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004706:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800470a:	d017      	beq.n	800473c <UART_SetConfig+0x2bc>
 800470c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004710:	d82a      	bhi.n	8004768 <UART_SetConfig+0x2e8>
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	d00b      	beq.n	8004730 <UART_SetConfig+0x2b0>
 8004718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471c:	d824      	bhi.n	8004768 <UART_SetConfig+0x2e8>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <UART_SetConfig+0x2aa>
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	d006      	beq.n	8004736 <UART_SetConfig+0x2b6>
 8004728:	e01e      	b.n	8004768 <UART_SetConfig+0x2e8>
 800472a:	2300      	movs	r3, #0
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e04b      	b.n	80047c8 <UART_SetConfig+0x348>
 8004730:	2302      	movs	r3, #2
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e048      	b.n	80047c8 <UART_SetConfig+0x348>
 8004736:	2304      	movs	r3, #4
 8004738:	77fb      	strb	r3, [r7, #31]
 800473a:	e045      	b.n	80047c8 <UART_SetConfig+0x348>
 800473c:	2308      	movs	r3, #8
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e042      	b.n	80047c8 <UART_SetConfig+0x348>
 8004742:	bf00      	nop
 8004744:	efff69f3 	.word	0xefff69f3
 8004748:	40011000 	.word	0x40011000
 800474c:	40023800 	.word	0x40023800
 8004750:	40004400 	.word	0x40004400
 8004754:	40004800 	.word	0x40004800
 8004758:	40004c00 	.word	0x40004c00
 800475c:	40005000 	.word	0x40005000
 8004760:	40011400 	.word	0x40011400
 8004764:	40007800 	.word	0x40007800
 8004768:	2310      	movs	r3, #16
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e02c      	b.n	80047c8 <UART_SetConfig+0x348>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a72      	ldr	r2, [pc, #456]	; (800493c <UART_SetConfig+0x4bc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d125      	bne.n	80047c4 <UART_SetConfig+0x344>
 8004778:	4b71      	ldr	r3, [pc, #452]	; (8004940 <UART_SetConfig+0x4c0>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004782:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004786:	d017      	beq.n	80047b8 <UART_SetConfig+0x338>
 8004788:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800478c:	d817      	bhi.n	80047be <UART_SetConfig+0x33e>
 800478e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004792:	d00b      	beq.n	80047ac <UART_SetConfig+0x32c>
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004798:	d811      	bhi.n	80047be <UART_SetConfig+0x33e>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <UART_SetConfig+0x326>
 800479e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a2:	d006      	beq.n	80047b2 <UART_SetConfig+0x332>
 80047a4:	e00b      	b.n	80047be <UART_SetConfig+0x33e>
 80047a6:	2300      	movs	r3, #0
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e00d      	b.n	80047c8 <UART_SetConfig+0x348>
 80047ac:	2302      	movs	r3, #2
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e00a      	b.n	80047c8 <UART_SetConfig+0x348>
 80047b2:	2304      	movs	r3, #4
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e007      	b.n	80047c8 <UART_SetConfig+0x348>
 80047b8:	2308      	movs	r3, #8
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e004      	b.n	80047c8 <UART_SetConfig+0x348>
 80047be:	2310      	movs	r3, #16
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e001      	b.n	80047c8 <UART_SetConfig+0x348>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d0:	d15c      	bne.n	800488c <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80047d2:	7ffb      	ldrb	r3, [r7, #31]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d828      	bhi.n	800482a <UART_SetConfig+0x3aa>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0x360>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004805 	.word	0x08004805
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004815 	.word	0x08004815
 80047ec:	0800482b 	.word	0x0800482b
 80047f0:	0800481b 	.word	0x0800481b
 80047f4:	0800482b 	.word	0x0800482b
 80047f8:	0800482b 	.word	0x0800482b
 80047fc:	0800482b 	.word	0x0800482b
 8004800:	08004823 	.word	0x08004823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7fe fb14 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8004808:	61b8      	str	r0, [r7, #24]
        break;
 800480a:	e013      	b.n	8004834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7fe fb24 	bl	8002e58 <HAL_RCC_GetPCLK2Freq>
 8004810:	61b8      	str	r0, [r7, #24]
        break;
 8004812:	e00f      	b.n	8004834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004814:	4b4b      	ldr	r3, [pc, #300]	; (8004944 <UART_SetConfig+0x4c4>)
 8004816:	61bb      	str	r3, [r7, #24]
        break;
 8004818:	e00c      	b.n	8004834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481a:	f7fe f9f7 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 800481e:	61b8      	str	r0, [r7, #24]
        break;
 8004820:	e008      	b.n	8004834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004826:	61bb      	str	r3, [r7, #24]
        break;
 8004828:	e004      	b.n	8004834 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	77bb      	strb	r3, [r7, #30]
        break;
 8004832:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d074      	beq.n	8004924 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	005a      	lsls	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	b29b      	uxth	r3, r3
 8004850:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b0f      	cmp	r3, #15
 8004856:	d916      	bls.n	8004886 <UART_SetConfig+0x406>
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485e:	d212      	bcs.n	8004886 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f023 030f 	bic.w	r3, r3, #15
 8004868:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	b29b      	uxth	r3, r3
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	b29a      	uxth	r2, r3
 8004876:	89fb      	ldrh	r3, [r7, #14]
 8004878:	4313      	orrs	r3, r2
 800487a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	89fa      	ldrh	r2, [r7, #14]
 8004882:	60da      	str	r2, [r3, #12]
 8004884:	e04e      	b.n	8004924 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	77bb      	strb	r3, [r7, #30]
 800488a:	e04b      	b.n	8004924 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800488c:	7ffb      	ldrb	r3, [r7, #31]
 800488e:	2b08      	cmp	r3, #8
 8004890:	d827      	bhi.n	80048e2 <UART_SetConfig+0x462>
 8004892:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <UART_SetConfig+0x418>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048c5 	.word	0x080048c5
 80048a0:	080048cd 	.word	0x080048cd
 80048a4:	080048e3 	.word	0x080048e3
 80048a8:	080048d3 	.word	0x080048d3
 80048ac:	080048e3 	.word	0x080048e3
 80048b0:	080048e3 	.word	0x080048e3
 80048b4:	080048e3 	.word	0x080048e3
 80048b8:	080048db 	.word	0x080048db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048bc:	f7fe fab8 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 80048c0:	61b8      	str	r0, [r7, #24]
        break;
 80048c2:	e013      	b.n	80048ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c4:	f7fe fac8 	bl	8002e58 <HAL_RCC_GetPCLK2Freq>
 80048c8:	61b8      	str	r0, [r7, #24]
        break;
 80048ca:	e00f      	b.n	80048ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <UART_SetConfig+0x4c4>)
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e00c      	b.n	80048ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d2:	f7fe f99b 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 80048d6:	61b8      	str	r0, [r7, #24]
        break;
 80048d8:	e008      	b.n	80048ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	61bb      	str	r3, [r7, #24]
        break;
 80048e0:	e004      	b.n	80048ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	77bb      	strb	r3, [r7, #30]
        break;
 80048ea:	bf00      	nop
    }

    if (pclk != 0U)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d018      	beq.n	8004924 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	085a      	lsrs	r2, r3, #1
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	441a      	add	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	b29b      	uxth	r3, r3
 8004906:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b0f      	cmp	r3, #15
 800490c:	d908      	bls.n	8004920 <UART_SetConfig+0x4a0>
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004914:	d204      	bcs.n	8004920 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	e001      	b.n	8004924 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004930:	7fbb      	ldrb	r3, [r7, #30]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40007c00 	.word	0x40007c00
 8004940:	40023800 	.word	0x40023800
 8004944:	00f42400 	.word	0x00f42400

08004948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01a      	beq.n	8004a5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a46:	d10a      	bne.n	8004a5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a9c:	f7fd f9e0 	bl	8001e60 <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d10e      	bne.n	8004ace <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f82d 	bl	8004b1e <UART_WaitOnFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e023      	b.n	8004b16 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d10e      	bne.n	8004afa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f817 	bl	8004b1e <UART_WaitOnFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e00d      	b.n	8004b16 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	603b      	str	r3, [r7, #0]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2e:	e05e      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d05a      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b38:	f7fd f992 	bl	8001e60 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d302      	bcc.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x30>
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d11b      	bne.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e043      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d02c      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba2:	d124      	bne.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bbc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e00f      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d091      	beq.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <__cvt>:
 8004c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c18:	ed2d 8b02 	vpush	{d8}
 8004c1c:	eeb0 8b40 	vmov.f64	d8, d0
 8004c20:	b085      	sub	sp, #20
 8004c22:	4617      	mov	r7, r2
 8004c24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004c26:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004c28:	ee18 2a90 	vmov	r2, s17
 8004c2c:	f025 0520 	bic.w	r5, r5, #32
 8004c30:	2a00      	cmp	r2, #0
 8004c32:	bfb6      	itet	lt
 8004c34:	222d      	movlt	r2, #45	; 0x2d
 8004c36:	2200      	movge	r2, #0
 8004c38:	eeb1 8b40 	vneglt.f64	d8, d0
 8004c3c:	2d46      	cmp	r5, #70	; 0x46
 8004c3e:	460c      	mov	r4, r1
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	d004      	beq.n	8004c4e <__cvt+0x38>
 8004c44:	2d45      	cmp	r5, #69	; 0x45
 8004c46:	d100      	bne.n	8004c4a <__cvt+0x34>
 8004c48:	3401      	adds	r4, #1
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	e000      	b.n	8004c50 <__cvt+0x3a>
 8004c4e:	2103      	movs	r1, #3
 8004c50:	ab03      	add	r3, sp, #12
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	ab02      	add	r3, sp, #8
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	4622      	mov	r2, r4
 8004c5a:	4633      	mov	r3, r6
 8004c5c:	eeb0 0b48 	vmov.f64	d0, d8
 8004c60:	f000 fe2e 	bl	80058c0 <_dtoa_r>
 8004c64:	2d47      	cmp	r5, #71	; 0x47
 8004c66:	d101      	bne.n	8004c6c <__cvt+0x56>
 8004c68:	07fb      	lsls	r3, r7, #31
 8004c6a:	d51a      	bpl.n	8004ca2 <__cvt+0x8c>
 8004c6c:	2d46      	cmp	r5, #70	; 0x46
 8004c6e:	eb00 0204 	add.w	r2, r0, r4
 8004c72:	d10c      	bne.n	8004c8e <__cvt+0x78>
 8004c74:	7803      	ldrb	r3, [r0, #0]
 8004c76:	2b30      	cmp	r3, #48	; 0x30
 8004c78:	d107      	bne.n	8004c8a <__cvt+0x74>
 8004c7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c82:	bf1c      	itt	ne
 8004c84:	f1c4 0401 	rsbne	r4, r4, #1
 8004c88:	6034      	strne	r4, [r6, #0]
 8004c8a:	6833      	ldr	r3, [r6, #0]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c96:	bf08      	it	eq
 8004c98:	9203      	streq	r2, [sp, #12]
 8004c9a:	2130      	movs	r1, #48	; 0x30
 8004c9c:	9b03      	ldr	r3, [sp, #12]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d307      	bcc.n	8004cb2 <__cvt+0x9c>
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ca6:	1a1b      	subs	r3, r3, r0
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	b005      	add	sp, #20
 8004cac:	ecbd 8b02 	vpop	{d8}
 8004cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cb2:	1c5c      	adds	r4, r3, #1
 8004cb4:	9403      	str	r4, [sp, #12]
 8004cb6:	7019      	strb	r1, [r3, #0]
 8004cb8:	e7f0      	b.n	8004c9c <__cvt+0x86>

08004cba <__exponent>:
 8004cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2900      	cmp	r1, #0
 8004cc0:	bfb8      	it	lt
 8004cc2:	4249      	neglt	r1, r1
 8004cc4:	f803 2b02 	strb.w	r2, [r3], #2
 8004cc8:	bfb4      	ite	lt
 8004cca:	222d      	movlt	r2, #45	; 0x2d
 8004ccc:	222b      	movge	r2, #43	; 0x2b
 8004cce:	2909      	cmp	r1, #9
 8004cd0:	7042      	strb	r2, [r0, #1]
 8004cd2:	dd2a      	ble.n	8004d2a <__exponent+0x70>
 8004cd4:	f10d 0207 	add.w	r2, sp, #7
 8004cd8:	4617      	mov	r7, r2
 8004cda:	260a      	movs	r6, #10
 8004cdc:	4694      	mov	ip, r2
 8004cde:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ce2:	fb06 1415 	mls	r4, r6, r5, r1
 8004ce6:	3430      	adds	r4, #48	; 0x30
 8004ce8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004cec:	460c      	mov	r4, r1
 8004cee:	2c63      	cmp	r4, #99	; 0x63
 8004cf0:	f102 32ff 	add.w	r2, r2, #4294967295
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	dcf1      	bgt.n	8004cdc <__exponent+0x22>
 8004cf8:	3130      	adds	r1, #48	; 0x30
 8004cfa:	f1ac 0402 	sub.w	r4, ip, #2
 8004cfe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d02:	1c41      	adds	r1, r0, #1
 8004d04:	4622      	mov	r2, r4
 8004d06:	42ba      	cmp	r2, r7
 8004d08:	d30a      	bcc.n	8004d20 <__exponent+0x66>
 8004d0a:	f10d 0209 	add.w	r2, sp, #9
 8004d0e:	eba2 020c 	sub.w	r2, r2, ip
 8004d12:	42bc      	cmp	r4, r7
 8004d14:	bf88      	it	hi
 8004d16:	2200      	movhi	r2, #0
 8004d18:	4413      	add	r3, r2
 8004d1a:	1a18      	subs	r0, r3, r0
 8004d1c:	b003      	add	sp, #12
 8004d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d20:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004d24:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004d28:	e7ed      	b.n	8004d06 <__exponent+0x4c>
 8004d2a:	2330      	movs	r3, #48	; 0x30
 8004d2c:	3130      	adds	r1, #48	; 0x30
 8004d2e:	7083      	strb	r3, [r0, #2]
 8004d30:	70c1      	strb	r1, [r0, #3]
 8004d32:	1d03      	adds	r3, r0, #4
 8004d34:	e7f1      	b.n	8004d1a <__exponent+0x60>
	...

08004d38 <_printf_float>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	b08b      	sub	sp, #44	; 0x2c
 8004d3e:	460c      	mov	r4, r1
 8004d40:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004d44:	4616      	mov	r6, r2
 8004d46:	461f      	mov	r7, r3
 8004d48:	4605      	mov	r5, r0
 8004d4a:	f000 fcbb 	bl	80056c4 <_localeconv_r>
 8004d4e:	f8d0 b000 	ldr.w	fp, [r0]
 8004d52:	4658      	mov	r0, fp
 8004d54:	f7fb fac4 	bl	80002e0 <strlen>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9308      	str	r3, [sp, #32]
 8004d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d60:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004d64:	6822      	ldr	r2, [r4, #0]
 8004d66:	3307      	adds	r3, #7
 8004d68:	f023 0307 	bic.w	r3, r3, #7
 8004d6c:	f103 0108 	add.w	r1, r3, #8
 8004d70:	f8c8 1000 	str.w	r1, [r8]
 8004d74:	ed93 0b00 	vldr	d0, [r3]
 8004d78:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004fd8 <_printf_float+0x2a0>
 8004d7c:	eeb0 7bc0 	vabs.f64	d7, d0
 8004d80:	eeb4 7b46 	vcmp.f64	d7, d6
 8004d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d88:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	dd24      	ble.n	8004dda <_printf_float+0xa2>
 8004d90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d98:	d502      	bpl.n	8004da0 <_printf_float+0x68>
 8004d9a:	232d      	movs	r3, #45	; 0x2d
 8004d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da0:	498f      	ldr	r1, [pc, #572]	; (8004fe0 <_printf_float+0x2a8>)
 8004da2:	4b90      	ldr	r3, [pc, #576]	; (8004fe4 <_printf_float+0x2ac>)
 8004da4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004da8:	bf94      	ite	ls
 8004daa:	4688      	movls	r8, r1
 8004dac:	4698      	movhi	r8, r3
 8004dae:	2303      	movs	r3, #3
 8004db0:	6123      	str	r3, [r4, #16]
 8004db2:	f022 0204 	bic.w	r2, r2, #4
 8004db6:	2300      	movs	r3, #0
 8004db8:	6022      	str	r2, [r4, #0]
 8004dba:	9304      	str	r3, [sp, #16]
 8004dbc:	9700      	str	r7, [sp, #0]
 8004dbe:	4633      	mov	r3, r6
 8004dc0:	aa09      	add	r2, sp, #36	; 0x24
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f000 f9d1 	bl	800516c <_printf_common>
 8004dca:	3001      	adds	r0, #1
 8004dcc:	f040 808a 	bne.w	8004ee4 <_printf_float+0x1ac>
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd4:	b00b      	add	sp, #44	; 0x2c
 8004dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dda:	eeb4 0b40 	vcmp.f64	d0, d0
 8004dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de2:	d709      	bvc.n	8004df8 <_printf_float+0xc0>
 8004de4:	ee10 3a90 	vmov	r3, s1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bfbc      	itt	lt
 8004dec:	232d      	movlt	r3, #45	; 0x2d
 8004dee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004df2:	497d      	ldr	r1, [pc, #500]	; (8004fe8 <_printf_float+0x2b0>)
 8004df4:	4b7d      	ldr	r3, [pc, #500]	; (8004fec <_printf_float+0x2b4>)
 8004df6:	e7d5      	b.n	8004da4 <_printf_float+0x6c>
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004dfe:	9104      	str	r1, [sp, #16]
 8004e00:	1c59      	adds	r1, r3, #1
 8004e02:	d13c      	bne.n	8004e7e <_printf_float+0x146>
 8004e04:	2306      	movs	r3, #6
 8004e06:	6063      	str	r3, [r4, #4]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	9303      	str	r3, [sp, #12]
 8004e0c:	ab08      	add	r3, sp, #32
 8004e0e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004e12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e16:	ab07      	add	r3, sp, #28
 8004e18:	6861      	ldr	r1, [r4, #4]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	6022      	str	r2, [r4, #0]
 8004e1e:	f10d 031b 	add.w	r3, sp, #27
 8004e22:	4628      	mov	r0, r5
 8004e24:	f7ff fef7 	bl	8004c16 <__cvt>
 8004e28:	9b04      	ldr	r3, [sp, #16]
 8004e2a:	9907      	ldr	r1, [sp, #28]
 8004e2c:	2b47      	cmp	r3, #71	; 0x47
 8004e2e:	4680      	mov	r8, r0
 8004e30:	d108      	bne.n	8004e44 <_printf_float+0x10c>
 8004e32:	1cc8      	adds	r0, r1, #3
 8004e34:	db02      	blt.n	8004e3c <_printf_float+0x104>
 8004e36:	6863      	ldr	r3, [r4, #4]
 8004e38:	4299      	cmp	r1, r3
 8004e3a:	dd41      	ble.n	8004ec0 <_printf_float+0x188>
 8004e3c:	f1a9 0902 	sub.w	r9, r9, #2
 8004e40:	fa5f f989 	uxtb.w	r9, r9
 8004e44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e48:	d820      	bhi.n	8004e8c <_printf_float+0x154>
 8004e4a:	3901      	subs	r1, #1
 8004e4c:	464a      	mov	r2, r9
 8004e4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e52:	9107      	str	r1, [sp, #28]
 8004e54:	f7ff ff31 	bl	8004cba <__exponent>
 8004e58:	9a08      	ldr	r2, [sp, #32]
 8004e5a:	9004      	str	r0, [sp, #16]
 8004e5c:	1813      	adds	r3, r2, r0
 8004e5e:	2a01      	cmp	r2, #1
 8004e60:	6123      	str	r3, [r4, #16]
 8004e62:	dc02      	bgt.n	8004e6a <_printf_float+0x132>
 8004e64:	6822      	ldr	r2, [r4, #0]
 8004e66:	07d2      	lsls	r2, r2, #31
 8004e68:	d501      	bpl.n	8004e6e <_printf_float+0x136>
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	6123      	str	r3, [r4, #16]
 8004e6e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0a2      	beq.n	8004dbc <_printf_float+0x84>
 8004e76:	232d      	movs	r3, #45	; 0x2d
 8004e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e7c:	e79e      	b.n	8004dbc <_printf_float+0x84>
 8004e7e:	9904      	ldr	r1, [sp, #16]
 8004e80:	2947      	cmp	r1, #71	; 0x47
 8004e82:	d1c1      	bne.n	8004e08 <_printf_float+0xd0>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1bf      	bne.n	8004e08 <_printf_float+0xd0>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e7bc      	b.n	8004e06 <_printf_float+0xce>
 8004e8c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e90:	d118      	bne.n	8004ec4 <_printf_float+0x18c>
 8004e92:	2900      	cmp	r1, #0
 8004e94:	6863      	ldr	r3, [r4, #4]
 8004e96:	dd0b      	ble.n	8004eb0 <_printf_float+0x178>
 8004e98:	6121      	str	r1, [r4, #16]
 8004e9a:	b913      	cbnz	r3, 8004ea2 <_printf_float+0x16a>
 8004e9c:	6822      	ldr	r2, [r4, #0]
 8004e9e:	07d0      	lsls	r0, r2, #31
 8004ea0:	d502      	bpl.n	8004ea8 <_printf_float+0x170>
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	440b      	add	r3, r1
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8004eac:	9304      	str	r3, [sp, #16]
 8004eae:	e7de      	b.n	8004e6e <_printf_float+0x136>
 8004eb0:	b913      	cbnz	r3, 8004eb8 <_printf_float+0x180>
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	07d2      	lsls	r2, r2, #31
 8004eb6:	d501      	bpl.n	8004ebc <_printf_float+0x184>
 8004eb8:	3302      	adds	r3, #2
 8004eba:	e7f4      	b.n	8004ea6 <_printf_float+0x16e>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e7f2      	b.n	8004ea6 <_printf_float+0x16e>
 8004ec0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004ec4:	9b08      	ldr	r3, [sp, #32]
 8004ec6:	4299      	cmp	r1, r3
 8004ec8:	db05      	blt.n	8004ed6 <_printf_float+0x19e>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	6121      	str	r1, [r4, #16]
 8004ece:	07d8      	lsls	r0, r3, #31
 8004ed0:	d5ea      	bpl.n	8004ea8 <_printf_float+0x170>
 8004ed2:	1c4b      	adds	r3, r1, #1
 8004ed4:	e7e7      	b.n	8004ea6 <_printf_float+0x16e>
 8004ed6:	2900      	cmp	r1, #0
 8004ed8:	bfd4      	ite	le
 8004eda:	f1c1 0202 	rsble	r2, r1, #2
 8004ede:	2201      	movgt	r2, #1
 8004ee0:	4413      	add	r3, r2
 8004ee2:	e7e0      	b.n	8004ea6 <_printf_float+0x16e>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	055a      	lsls	r2, r3, #21
 8004ee8:	d407      	bmi.n	8004efa <_printf_float+0x1c2>
 8004eea:	6923      	ldr	r3, [r4, #16]
 8004eec:	4642      	mov	r2, r8
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b8      	blx	r7
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d12a      	bne.n	8004f4e <_printf_float+0x216>
 8004ef8:	e76a      	b.n	8004dd0 <_printf_float+0x98>
 8004efa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004efe:	f240 80e0 	bls.w	80050c2 <_printf_float+0x38a>
 8004f02:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004f06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0e:	d133      	bne.n	8004f78 <_printf_float+0x240>
 8004f10:	4a37      	ldr	r2, [pc, #220]	; (8004ff0 <_printf_float+0x2b8>)
 8004f12:	2301      	movs	r3, #1
 8004f14:	4631      	mov	r1, r6
 8004f16:	4628      	mov	r0, r5
 8004f18:	47b8      	blx	r7
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	f43f af58 	beq.w	8004dd0 <_printf_float+0x98>
 8004f20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	db02      	blt.n	8004f2e <_printf_float+0x1f6>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	07d8      	lsls	r0, r3, #31
 8004f2c:	d50f      	bpl.n	8004f4e <_printf_float+0x216>
 8004f2e:	4653      	mov	r3, sl
 8004f30:	465a      	mov	r2, fp
 8004f32:	4631      	mov	r1, r6
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f43f af49 	beq.w	8004dd0 <_printf_float+0x98>
 8004f3e:	f04f 0800 	mov.w	r8, #0
 8004f42:	f104 091a 	add.w	r9, r4, #26
 8004f46:	9b08      	ldr	r3, [sp, #32]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	4543      	cmp	r3, r8
 8004f4c:	dc09      	bgt.n	8004f62 <_printf_float+0x22a>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	079b      	lsls	r3, r3, #30
 8004f52:	f100 8106 	bmi.w	8005162 <_printf_float+0x42a>
 8004f56:	68e0      	ldr	r0, [r4, #12]
 8004f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5a:	4298      	cmp	r0, r3
 8004f5c:	bfb8      	it	lt
 8004f5e:	4618      	movlt	r0, r3
 8004f60:	e738      	b.n	8004dd4 <_printf_float+0x9c>
 8004f62:	2301      	movs	r3, #1
 8004f64:	464a      	mov	r2, r9
 8004f66:	4631      	mov	r1, r6
 8004f68:	4628      	mov	r0, r5
 8004f6a:	47b8      	blx	r7
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	f43f af2f 	beq.w	8004dd0 <_printf_float+0x98>
 8004f72:	f108 0801 	add.w	r8, r8, #1
 8004f76:	e7e6      	b.n	8004f46 <_printf_float+0x20e>
 8004f78:	9b07      	ldr	r3, [sp, #28]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dc3a      	bgt.n	8004ff4 <_printf_float+0x2bc>
 8004f7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <_printf_float+0x2b8>)
 8004f80:	2301      	movs	r3, #1
 8004f82:	4631      	mov	r1, r6
 8004f84:	4628      	mov	r0, r5
 8004f86:	47b8      	blx	r7
 8004f88:	3001      	adds	r0, #1
 8004f8a:	f43f af21 	beq.w	8004dd0 <_printf_float+0x98>
 8004f8e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	d102      	bne.n	8004f9c <_printf_float+0x264>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	07d9      	lsls	r1, r3, #31
 8004f9a:	d5d8      	bpl.n	8004f4e <_printf_float+0x216>
 8004f9c:	4653      	mov	r3, sl
 8004f9e:	465a      	mov	r2, fp
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	47b8      	blx	r7
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	f43f af12 	beq.w	8004dd0 <_printf_float+0x98>
 8004fac:	f04f 0900 	mov.w	r9, #0
 8004fb0:	f104 0a1a 	add.w	sl, r4, #26
 8004fb4:	9b07      	ldr	r3, [sp, #28]
 8004fb6:	425b      	negs	r3, r3
 8004fb8:	454b      	cmp	r3, r9
 8004fba:	dc01      	bgt.n	8004fc0 <_printf_float+0x288>
 8004fbc:	9b08      	ldr	r3, [sp, #32]
 8004fbe:	e795      	b.n	8004eec <_printf_float+0x1b4>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4652      	mov	r2, sl
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	47b8      	blx	r7
 8004fca:	3001      	adds	r0, #1
 8004fcc:	f43f af00 	beq.w	8004dd0 <_printf_float+0x98>
 8004fd0:	f109 0901 	add.w	r9, r9, #1
 8004fd4:	e7ee      	b.n	8004fb4 <_printf_float+0x27c>
 8004fd6:	bf00      	nop
 8004fd8:	ffffffff 	.word	0xffffffff
 8004fdc:	7fefffff 	.word	0x7fefffff
 8004fe0:	08007a20 	.word	0x08007a20
 8004fe4:	08007a24 	.word	0x08007a24
 8004fe8:	08007a28 	.word	0x08007a28
 8004fec:	08007a2c 	.word	0x08007a2c
 8004ff0:	08007a30 	.word	0x08007a30
 8004ff4:	9a08      	ldr	r2, [sp, #32]
 8004ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	bfa8      	it	ge
 8004ffc:	461a      	movge	r2, r3
 8004ffe:	2a00      	cmp	r2, #0
 8005000:	4691      	mov	r9, r2
 8005002:	dc38      	bgt.n	8005076 <_printf_float+0x33e>
 8005004:	2300      	movs	r3, #0
 8005006:	9305      	str	r3, [sp, #20]
 8005008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800500c:	f104 021a 	add.w	r2, r4, #26
 8005010:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005012:	9905      	ldr	r1, [sp, #20]
 8005014:	9304      	str	r3, [sp, #16]
 8005016:	eba3 0309 	sub.w	r3, r3, r9
 800501a:	428b      	cmp	r3, r1
 800501c:	dc33      	bgt.n	8005086 <_printf_float+0x34e>
 800501e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005022:	429a      	cmp	r2, r3
 8005024:	db3c      	blt.n	80050a0 <_printf_float+0x368>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	07da      	lsls	r2, r3, #31
 800502a:	d439      	bmi.n	80050a0 <_printf_float+0x368>
 800502c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005030:	eba2 0903 	sub.w	r9, r2, r3
 8005034:	9b04      	ldr	r3, [sp, #16]
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	4591      	cmp	r9, r2
 800503a:	bfa8      	it	ge
 800503c:	4691      	movge	r9, r2
 800503e:	f1b9 0f00 	cmp.w	r9, #0
 8005042:	dc35      	bgt.n	80050b0 <_printf_float+0x378>
 8005044:	f04f 0800 	mov.w	r8, #0
 8005048:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800504c:	f104 0a1a 	add.w	sl, r4, #26
 8005050:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	eba3 0309 	sub.w	r3, r3, r9
 800505a:	4543      	cmp	r3, r8
 800505c:	f77f af77 	ble.w	8004f4e <_printf_float+0x216>
 8005060:	2301      	movs	r3, #1
 8005062:	4652      	mov	r2, sl
 8005064:	4631      	mov	r1, r6
 8005066:	4628      	mov	r0, r5
 8005068:	47b8      	blx	r7
 800506a:	3001      	adds	r0, #1
 800506c:	f43f aeb0 	beq.w	8004dd0 <_printf_float+0x98>
 8005070:	f108 0801 	add.w	r8, r8, #1
 8005074:	e7ec      	b.n	8005050 <_printf_float+0x318>
 8005076:	4613      	mov	r3, r2
 8005078:	4631      	mov	r1, r6
 800507a:	4642      	mov	r2, r8
 800507c:	4628      	mov	r0, r5
 800507e:	47b8      	blx	r7
 8005080:	3001      	adds	r0, #1
 8005082:	d1bf      	bne.n	8005004 <_printf_float+0x2cc>
 8005084:	e6a4      	b.n	8004dd0 <_printf_float+0x98>
 8005086:	2301      	movs	r3, #1
 8005088:	4631      	mov	r1, r6
 800508a:	4628      	mov	r0, r5
 800508c:	9204      	str	r2, [sp, #16]
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	f43f ae9d 	beq.w	8004dd0 <_printf_float+0x98>
 8005096:	9b05      	ldr	r3, [sp, #20]
 8005098:	9a04      	ldr	r2, [sp, #16]
 800509a:	3301      	adds	r3, #1
 800509c:	9305      	str	r3, [sp, #20]
 800509e:	e7b7      	b.n	8005010 <_printf_float+0x2d8>
 80050a0:	4653      	mov	r3, sl
 80050a2:	465a      	mov	r2, fp
 80050a4:	4631      	mov	r1, r6
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b8      	blx	r7
 80050aa:	3001      	adds	r0, #1
 80050ac:	d1be      	bne.n	800502c <_printf_float+0x2f4>
 80050ae:	e68f      	b.n	8004dd0 <_printf_float+0x98>
 80050b0:	9a04      	ldr	r2, [sp, #16]
 80050b2:	464b      	mov	r3, r9
 80050b4:	4442      	add	r2, r8
 80050b6:	4631      	mov	r1, r6
 80050b8:	4628      	mov	r0, r5
 80050ba:	47b8      	blx	r7
 80050bc:	3001      	adds	r0, #1
 80050be:	d1c1      	bne.n	8005044 <_printf_float+0x30c>
 80050c0:	e686      	b.n	8004dd0 <_printf_float+0x98>
 80050c2:	9a08      	ldr	r2, [sp, #32]
 80050c4:	2a01      	cmp	r2, #1
 80050c6:	dc01      	bgt.n	80050cc <_printf_float+0x394>
 80050c8:	07db      	lsls	r3, r3, #31
 80050ca:	d537      	bpl.n	800513c <_printf_float+0x404>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4642      	mov	r2, r8
 80050d0:	4631      	mov	r1, r6
 80050d2:	4628      	mov	r0, r5
 80050d4:	47b8      	blx	r7
 80050d6:	3001      	adds	r0, #1
 80050d8:	f43f ae7a 	beq.w	8004dd0 <_printf_float+0x98>
 80050dc:	4653      	mov	r3, sl
 80050de:	465a      	mov	r2, fp
 80050e0:	4631      	mov	r1, r6
 80050e2:	4628      	mov	r0, r5
 80050e4:	47b8      	blx	r7
 80050e6:	3001      	adds	r0, #1
 80050e8:	f43f ae72 	beq.w	8004dd0 <_printf_float+0x98>
 80050ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80050f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80050f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f8:	9b08      	ldr	r3, [sp, #32]
 80050fa:	d01a      	beq.n	8005132 <_printf_float+0x3fa>
 80050fc:	3b01      	subs	r3, #1
 80050fe:	f108 0201 	add.w	r2, r8, #1
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	d10e      	bne.n	800512a <_printf_float+0x3f2>
 800510c:	e660      	b.n	8004dd0 <_printf_float+0x98>
 800510e:	2301      	movs	r3, #1
 8005110:	464a      	mov	r2, r9
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	f43f ae59 	beq.w	8004dd0 <_printf_float+0x98>
 800511e:	f108 0801 	add.w	r8, r8, #1
 8005122:	9b08      	ldr	r3, [sp, #32]
 8005124:	3b01      	subs	r3, #1
 8005126:	4543      	cmp	r3, r8
 8005128:	dcf1      	bgt.n	800510e <_printf_float+0x3d6>
 800512a:	9b04      	ldr	r3, [sp, #16]
 800512c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005130:	e6dd      	b.n	8004eee <_printf_float+0x1b6>
 8005132:	f04f 0800 	mov.w	r8, #0
 8005136:	f104 091a 	add.w	r9, r4, #26
 800513a:	e7f2      	b.n	8005122 <_printf_float+0x3ea>
 800513c:	2301      	movs	r3, #1
 800513e:	4642      	mov	r2, r8
 8005140:	e7df      	b.n	8005102 <_printf_float+0x3ca>
 8005142:	2301      	movs	r3, #1
 8005144:	464a      	mov	r2, r9
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	f43f ae3f 	beq.w	8004dd0 <_printf_float+0x98>
 8005152:	f108 0801 	add.w	r8, r8, #1
 8005156:	68e3      	ldr	r3, [r4, #12]
 8005158:	9909      	ldr	r1, [sp, #36]	; 0x24
 800515a:	1a5b      	subs	r3, r3, r1
 800515c:	4543      	cmp	r3, r8
 800515e:	dcf0      	bgt.n	8005142 <_printf_float+0x40a>
 8005160:	e6f9      	b.n	8004f56 <_printf_float+0x21e>
 8005162:	f04f 0800 	mov.w	r8, #0
 8005166:	f104 0919 	add.w	r9, r4, #25
 800516a:	e7f4      	b.n	8005156 <_printf_float+0x41e>

0800516c <_printf_common>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	4616      	mov	r6, r2
 8005172:	4699      	mov	r9, r3
 8005174:	688a      	ldr	r2, [r1, #8]
 8005176:	690b      	ldr	r3, [r1, #16]
 8005178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800517c:	4293      	cmp	r3, r2
 800517e:	bfb8      	it	lt
 8005180:	4613      	movlt	r3, r2
 8005182:	6033      	str	r3, [r6, #0]
 8005184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005188:	4607      	mov	r7, r0
 800518a:	460c      	mov	r4, r1
 800518c:	b10a      	cbz	r2, 8005192 <_printf_common+0x26>
 800518e:	3301      	adds	r3, #1
 8005190:	6033      	str	r3, [r6, #0]
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	0699      	lsls	r1, r3, #26
 8005196:	bf42      	ittt	mi
 8005198:	6833      	ldrmi	r3, [r6, #0]
 800519a:	3302      	addmi	r3, #2
 800519c:	6033      	strmi	r3, [r6, #0]
 800519e:	6825      	ldr	r5, [r4, #0]
 80051a0:	f015 0506 	ands.w	r5, r5, #6
 80051a4:	d106      	bne.n	80051b4 <_printf_common+0x48>
 80051a6:	f104 0a19 	add.w	sl, r4, #25
 80051aa:	68e3      	ldr	r3, [r4, #12]
 80051ac:	6832      	ldr	r2, [r6, #0]
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	42ab      	cmp	r3, r5
 80051b2:	dc26      	bgt.n	8005202 <_printf_common+0x96>
 80051b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051b8:	1e13      	subs	r3, r2, #0
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	bf18      	it	ne
 80051be:	2301      	movne	r3, #1
 80051c0:	0692      	lsls	r2, r2, #26
 80051c2:	d42b      	bmi.n	800521c <_printf_common+0xb0>
 80051c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051c8:	4649      	mov	r1, r9
 80051ca:	4638      	mov	r0, r7
 80051cc:	47c0      	blx	r8
 80051ce:	3001      	adds	r0, #1
 80051d0:	d01e      	beq.n	8005210 <_printf_common+0xa4>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	6922      	ldr	r2, [r4, #16]
 80051d6:	f003 0306 	and.w	r3, r3, #6
 80051da:	2b04      	cmp	r3, #4
 80051dc:	bf02      	ittt	eq
 80051de:	68e5      	ldreq	r5, [r4, #12]
 80051e0:	6833      	ldreq	r3, [r6, #0]
 80051e2:	1aed      	subeq	r5, r5, r3
 80051e4:	68a3      	ldr	r3, [r4, #8]
 80051e6:	bf0c      	ite	eq
 80051e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ec:	2500      	movne	r5, #0
 80051ee:	4293      	cmp	r3, r2
 80051f0:	bfc4      	itt	gt
 80051f2:	1a9b      	subgt	r3, r3, r2
 80051f4:	18ed      	addgt	r5, r5, r3
 80051f6:	2600      	movs	r6, #0
 80051f8:	341a      	adds	r4, #26
 80051fa:	42b5      	cmp	r5, r6
 80051fc:	d11a      	bne.n	8005234 <_printf_common+0xc8>
 80051fe:	2000      	movs	r0, #0
 8005200:	e008      	b.n	8005214 <_printf_common+0xa8>
 8005202:	2301      	movs	r3, #1
 8005204:	4652      	mov	r2, sl
 8005206:	4649      	mov	r1, r9
 8005208:	4638      	mov	r0, r7
 800520a:	47c0      	blx	r8
 800520c:	3001      	adds	r0, #1
 800520e:	d103      	bne.n	8005218 <_printf_common+0xac>
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005218:	3501      	adds	r5, #1
 800521a:	e7c6      	b.n	80051aa <_printf_common+0x3e>
 800521c:	18e1      	adds	r1, r4, r3
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	2030      	movs	r0, #48	; 0x30
 8005222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005226:	4422      	add	r2, r4
 8005228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800522c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005230:	3302      	adds	r3, #2
 8005232:	e7c7      	b.n	80051c4 <_printf_common+0x58>
 8005234:	2301      	movs	r3, #1
 8005236:	4622      	mov	r2, r4
 8005238:	4649      	mov	r1, r9
 800523a:	4638      	mov	r0, r7
 800523c:	47c0      	blx	r8
 800523e:	3001      	adds	r0, #1
 8005240:	d0e6      	beq.n	8005210 <_printf_common+0xa4>
 8005242:	3601      	adds	r6, #1
 8005244:	e7d9      	b.n	80051fa <_printf_common+0x8e>
	...

08005248 <_printf_i>:
 8005248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	7e0f      	ldrb	r7, [r1, #24]
 800524e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005250:	2f78      	cmp	r7, #120	; 0x78
 8005252:	4691      	mov	r9, r2
 8005254:	4680      	mov	r8, r0
 8005256:	460c      	mov	r4, r1
 8005258:	469a      	mov	sl, r3
 800525a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800525e:	d807      	bhi.n	8005270 <_printf_i+0x28>
 8005260:	2f62      	cmp	r7, #98	; 0x62
 8005262:	d80a      	bhi.n	800527a <_printf_i+0x32>
 8005264:	2f00      	cmp	r7, #0
 8005266:	f000 80d4 	beq.w	8005412 <_printf_i+0x1ca>
 800526a:	2f58      	cmp	r7, #88	; 0x58
 800526c:	f000 80c0 	beq.w	80053f0 <_printf_i+0x1a8>
 8005270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005278:	e03a      	b.n	80052f0 <_printf_i+0xa8>
 800527a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800527e:	2b15      	cmp	r3, #21
 8005280:	d8f6      	bhi.n	8005270 <_printf_i+0x28>
 8005282:	a101      	add	r1, pc, #4	; (adr r1, 8005288 <_printf_i+0x40>)
 8005284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005288:	080052e1 	.word	0x080052e1
 800528c:	080052f5 	.word	0x080052f5
 8005290:	08005271 	.word	0x08005271
 8005294:	08005271 	.word	0x08005271
 8005298:	08005271 	.word	0x08005271
 800529c:	08005271 	.word	0x08005271
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	08005271 	.word	0x08005271
 80052a8:	08005271 	.word	0x08005271
 80052ac:	08005271 	.word	0x08005271
 80052b0:	08005271 	.word	0x08005271
 80052b4:	080053f9 	.word	0x080053f9
 80052b8:	08005321 	.word	0x08005321
 80052bc:	080053b3 	.word	0x080053b3
 80052c0:	08005271 	.word	0x08005271
 80052c4:	08005271 	.word	0x08005271
 80052c8:	0800541b 	.word	0x0800541b
 80052cc:	08005271 	.word	0x08005271
 80052d0:	08005321 	.word	0x08005321
 80052d4:	08005271 	.word	0x08005271
 80052d8:	08005271 	.word	0x08005271
 80052dc:	080053bb 	.word	0x080053bb
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	1d1a      	adds	r2, r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	602a      	str	r2, [r5, #0]
 80052e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052f0:	2301      	movs	r3, #1
 80052f2:	e09f      	b.n	8005434 <_printf_i+0x1ec>
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	682b      	ldr	r3, [r5, #0]
 80052f8:	0607      	lsls	r7, r0, #24
 80052fa:	f103 0104 	add.w	r1, r3, #4
 80052fe:	6029      	str	r1, [r5, #0]
 8005300:	d501      	bpl.n	8005306 <_printf_i+0xbe>
 8005302:	681e      	ldr	r6, [r3, #0]
 8005304:	e003      	b.n	800530e <_printf_i+0xc6>
 8005306:	0646      	lsls	r6, r0, #25
 8005308:	d5fb      	bpl.n	8005302 <_printf_i+0xba>
 800530a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800530e:	2e00      	cmp	r6, #0
 8005310:	da03      	bge.n	800531a <_printf_i+0xd2>
 8005312:	232d      	movs	r3, #45	; 0x2d
 8005314:	4276      	negs	r6, r6
 8005316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800531a:	485a      	ldr	r0, [pc, #360]	; (8005484 <_printf_i+0x23c>)
 800531c:	230a      	movs	r3, #10
 800531e:	e012      	b.n	8005346 <_printf_i+0xfe>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	6820      	ldr	r0, [r4, #0]
 8005324:	1d19      	adds	r1, r3, #4
 8005326:	6029      	str	r1, [r5, #0]
 8005328:	0605      	lsls	r5, r0, #24
 800532a:	d501      	bpl.n	8005330 <_printf_i+0xe8>
 800532c:	681e      	ldr	r6, [r3, #0]
 800532e:	e002      	b.n	8005336 <_printf_i+0xee>
 8005330:	0641      	lsls	r1, r0, #25
 8005332:	d5fb      	bpl.n	800532c <_printf_i+0xe4>
 8005334:	881e      	ldrh	r6, [r3, #0]
 8005336:	4853      	ldr	r0, [pc, #332]	; (8005484 <_printf_i+0x23c>)
 8005338:	2f6f      	cmp	r7, #111	; 0x6f
 800533a:	bf0c      	ite	eq
 800533c:	2308      	moveq	r3, #8
 800533e:	230a      	movne	r3, #10
 8005340:	2100      	movs	r1, #0
 8005342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005346:	6865      	ldr	r5, [r4, #4]
 8005348:	60a5      	str	r5, [r4, #8]
 800534a:	2d00      	cmp	r5, #0
 800534c:	bfa2      	ittt	ge
 800534e:	6821      	ldrge	r1, [r4, #0]
 8005350:	f021 0104 	bicge.w	r1, r1, #4
 8005354:	6021      	strge	r1, [r4, #0]
 8005356:	b90e      	cbnz	r6, 800535c <_printf_i+0x114>
 8005358:	2d00      	cmp	r5, #0
 800535a:	d04b      	beq.n	80053f4 <_printf_i+0x1ac>
 800535c:	4615      	mov	r5, r2
 800535e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005362:	fb03 6711 	mls	r7, r3, r1, r6
 8005366:	5dc7      	ldrb	r7, [r0, r7]
 8005368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800536c:	4637      	mov	r7, r6
 800536e:	42bb      	cmp	r3, r7
 8005370:	460e      	mov	r6, r1
 8005372:	d9f4      	bls.n	800535e <_printf_i+0x116>
 8005374:	2b08      	cmp	r3, #8
 8005376:	d10b      	bne.n	8005390 <_printf_i+0x148>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	07de      	lsls	r6, r3, #31
 800537c:	d508      	bpl.n	8005390 <_printf_i+0x148>
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	6861      	ldr	r1, [r4, #4]
 8005382:	4299      	cmp	r1, r3
 8005384:	bfde      	ittt	le
 8005386:	2330      	movle	r3, #48	; 0x30
 8005388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800538c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005390:	1b52      	subs	r2, r2, r5
 8005392:	6122      	str	r2, [r4, #16]
 8005394:	f8cd a000 	str.w	sl, [sp]
 8005398:	464b      	mov	r3, r9
 800539a:	aa03      	add	r2, sp, #12
 800539c:	4621      	mov	r1, r4
 800539e:	4640      	mov	r0, r8
 80053a0:	f7ff fee4 	bl	800516c <_printf_common>
 80053a4:	3001      	adds	r0, #1
 80053a6:	d14a      	bne.n	800543e <_printf_i+0x1f6>
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	b004      	add	sp, #16
 80053ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	f043 0320 	orr.w	r3, r3, #32
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	4833      	ldr	r0, [pc, #204]	; (8005488 <_printf_i+0x240>)
 80053bc:	2778      	movs	r7, #120	; 0x78
 80053be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	6829      	ldr	r1, [r5, #0]
 80053c6:	061f      	lsls	r7, r3, #24
 80053c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80053cc:	d402      	bmi.n	80053d4 <_printf_i+0x18c>
 80053ce:	065f      	lsls	r7, r3, #25
 80053d0:	bf48      	it	mi
 80053d2:	b2b6      	uxthmi	r6, r6
 80053d4:	07df      	lsls	r7, r3, #31
 80053d6:	bf48      	it	mi
 80053d8:	f043 0320 	orrmi.w	r3, r3, #32
 80053dc:	6029      	str	r1, [r5, #0]
 80053de:	bf48      	it	mi
 80053e0:	6023      	strmi	r3, [r4, #0]
 80053e2:	b91e      	cbnz	r6, 80053ec <_printf_i+0x1a4>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	f023 0320 	bic.w	r3, r3, #32
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	2310      	movs	r3, #16
 80053ee:	e7a7      	b.n	8005340 <_printf_i+0xf8>
 80053f0:	4824      	ldr	r0, [pc, #144]	; (8005484 <_printf_i+0x23c>)
 80053f2:	e7e4      	b.n	80053be <_printf_i+0x176>
 80053f4:	4615      	mov	r5, r2
 80053f6:	e7bd      	b.n	8005374 <_printf_i+0x12c>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	6826      	ldr	r6, [r4, #0]
 80053fc:	6961      	ldr	r1, [r4, #20]
 80053fe:	1d18      	adds	r0, r3, #4
 8005400:	6028      	str	r0, [r5, #0]
 8005402:	0635      	lsls	r5, r6, #24
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	d501      	bpl.n	800540c <_printf_i+0x1c4>
 8005408:	6019      	str	r1, [r3, #0]
 800540a:	e002      	b.n	8005412 <_printf_i+0x1ca>
 800540c:	0670      	lsls	r0, r6, #25
 800540e:	d5fb      	bpl.n	8005408 <_printf_i+0x1c0>
 8005410:	8019      	strh	r1, [r3, #0]
 8005412:	2300      	movs	r3, #0
 8005414:	6123      	str	r3, [r4, #16]
 8005416:	4615      	mov	r5, r2
 8005418:	e7bc      	b.n	8005394 <_printf_i+0x14c>
 800541a:	682b      	ldr	r3, [r5, #0]
 800541c:	1d1a      	adds	r2, r3, #4
 800541e:	602a      	str	r2, [r5, #0]
 8005420:	681d      	ldr	r5, [r3, #0]
 8005422:	6862      	ldr	r2, [r4, #4]
 8005424:	2100      	movs	r1, #0
 8005426:	4628      	mov	r0, r5
 8005428:	f7fa ff0a 	bl	8000240 <memchr>
 800542c:	b108      	cbz	r0, 8005432 <_printf_i+0x1ea>
 800542e:	1b40      	subs	r0, r0, r5
 8005430:	6060      	str	r0, [r4, #4]
 8005432:	6863      	ldr	r3, [r4, #4]
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	2300      	movs	r3, #0
 8005438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543c:	e7aa      	b.n	8005394 <_printf_i+0x14c>
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	462a      	mov	r2, r5
 8005442:	4649      	mov	r1, r9
 8005444:	4640      	mov	r0, r8
 8005446:	47d0      	blx	sl
 8005448:	3001      	adds	r0, #1
 800544a:	d0ad      	beq.n	80053a8 <_printf_i+0x160>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	079b      	lsls	r3, r3, #30
 8005450:	d413      	bmi.n	800547a <_printf_i+0x232>
 8005452:	68e0      	ldr	r0, [r4, #12]
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	4298      	cmp	r0, r3
 8005458:	bfb8      	it	lt
 800545a:	4618      	movlt	r0, r3
 800545c:	e7a6      	b.n	80053ac <_printf_i+0x164>
 800545e:	2301      	movs	r3, #1
 8005460:	4632      	mov	r2, r6
 8005462:	4649      	mov	r1, r9
 8005464:	4640      	mov	r0, r8
 8005466:	47d0      	blx	sl
 8005468:	3001      	adds	r0, #1
 800546a:	d09d      	beq.n	80053a8 <_printf_i+0x160>
 800546c:	3501      	adds	r5, #1
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	9903      	ldr	r1, [sp, #12]
 8005472:	1a5b      	subs	r3, r3, r1
 8005474:	42ab      	cmp	r3, r5
 8005476:	dcf2      	bgt.n	800545e <_printf_i+0x216>
 8005478:	e7eb      	b.n	8005452 <_printf_i+0x20a>
 800547a:	2500      	movs	r5, #0
 800547c:	f104 0619 	add.w	r6, r4, #25
 8005480:	e7f5      	b.n	800546e <_printf_i+0x226>
 8005482:	bf00      	nop
 8005484:	08007a32 	.word	0x08007a32
 8005488:	08007a43 	.word	0x08007a43

0800548c <std>:
 800548c:	2300      	movs	r3, #0
 800548e:	b510      	push	{r4, lr}
 8005490:	4604      	mov	r4, r0
 8005492:	e9c0 3300 	strd	r3, r3, [r0]
 8005496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800549a:	6083      	str	r3, [r0, #8]
 800549c:	8181      	strh	r1, [r0, #12]
 800549e:	6643      	str	r3, [r0, #100]	; 0x64
 80054a0:	81c2      	strh	r2, [r0, #14]
 80054a2:	6183      	str	r3, [r0, #24]
 80054a4:	4619      	mov	r1, r3
 80054a6:	2208      	movs	r2, #8
 80054a8:	305c      	adds	r0, #92	; 0x5c
 80054aa:	f000 f902 	bl	80056b2 <memset>
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <std+0x38>)
 80054b0:	6263      	str	r3, [r4, #36]	; 0x24
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <std+0x3c>)
 80054b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <std+0x40>)
 80054b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054ba:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <std+0x44>)
 80054bc:	6224      	str	r4, [r4, #32]
 80054be:	6323      	str	r3, [r4, #48]	; 0x30
 80054c0:	bd10      	pop	{r4, pc}
 80054c2:	bf00      	nop
 80054c4:	0800562d 	.word	0x0800562d
 80054c8:	0800564f 	.word	0x0800564f
 80054cc:	08005687 	.word	0x08005687
 80054d0:	080056ab 	.word	0x080056ab

080054d4 <stdio_exit_handler>:
 80054d4:	4a02      	ldr	r2, [pc, #8]	; (80054e0 <stdio_exit_handler+0xc>)
 80054d6:	4903      	ldr	r1, [pc, #12]	; (80054e4 <stdio_exit_handler+0x10>)
 80054d8:	4803      	ldr	r0, [pc, #12]	; (80054e8 <stdio_exit_handler+0x14>)
 80054da:	f000 b869 	b.w	80055b0 <_fwalk_sglue>
 80054de:	bf00      	nop
 80054e0:	20000010 	.word	0x20000010
 80054e4:	0800704d 	.word	0x0800704d
 80054e8:	2000001c 	.word	0x2000001c

080054ec <cleanup_stdio>:
 80054ec:	6841      	ldr	r1, [r0, #4]
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <cleanup_stdio+0x34>)
 80054f0:	4299      	cmp	r1, r3
 80054f2:	b510      	push	{r4, lr}
 80054f4:	4604      	mov	r4, r0
 80054f6:	d001      	beq.n	80054fc <cleanup_stdio+0x10>
 80054f8:	f001 fda8 	bl	800704c <_fflush_r>
 80054fc:	68a1      	ldr	r1, [r4, #8]
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <cleanup_stdio+0x38>)
 8005500:	4299      	cmp	r1, r3
 8005502:	d002      	beq.n	800550a <cleanup_stdio+0x1e>
 8005504:	4620      	mov	r0, r4
 8005506:	f001 fda1 	bl	800704c <_fflush_r>
 800550a:	68e1      	ldr	r1, [r4, #12]
 800550c:	4b06      	ldr	r3, [pc, #24]	; (8005528 <cleanup_stdio+0x3c>)
 800550e:	4299      	cmp	r1, r3
 8005510:	d004      	beq.n	800551c <cleanup_stdio+0x30>
 8005512:	4620      	mov	r0, r4
 8005514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005518:	f001 bd98 	b.w	800704c <_fflush_r>
 800551c:	bd10      	pop	{r4, pc}
 800551e:	bf00      	nop
 8005520:	200003e0 	.word	0x200003e0
 8005524:	20000448 	.word	0x20000448
 8005528:	200004b0 	.word	0x200004b0

0800552c <global_stdio_init.part.0>:
 800552c:	b510      	push	{r4, lr}
 800552e:	4b0b      	ldr	r3, [pc, #44]	; (800555c <global_stdio_init.part.0+0x30>)
 8005530:	4c0b      	ldr	r4, [pc, #44]	; (8005560 <global_stdio_init.part.0+0x34>)
 8005532:	4a0c      	ldr	r2, [pc, #48]	; (8005564 <global_stdio_init.part.0+0x38>)
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	4620      	mov	r0, r4
 8005538:	2200      	movs	r2, #0
 800553a:	2104      	movs	r1, #4
 800553c:	f7ff ffa6 	bl	800548c <std>
 8005540:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005544:	2201      	movs	r2, #1
 8005546:	2109      	movs	r1, #9
 8005548:	f7ff ffa0 	bl	800548c <std>
 800554c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005550:	2202      	movs	r2, #2
 8005552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005556:	2112      	movs	r1, #18
 8005558:	f7ff bf98 	b.w	800548c <std>
 800555c:	20000518 	.word	0x20000518
 8005560:	200003e0 	.word	0x200003e0
 8005564:	080054d5 	.word	0x080054d5

08005568 <__sfp_lock_acquire>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__sfp_lock_acquire+0x8>)
 800556a:	f000 b91f 	b.w	80057ac <__retarget_lock_acquire_recursive>
 800556e:	bf00      	nop
 8005570:	20000521 	.word	0x20000521

08005574 <__sfp_lock_release>:
 8005574:	4801      	ldr	r0, [pc, #4]	; (800557c <__sfp_lock_release+0x8>)
 8005576:	f000 b91a 	b.w	80057ae <__retarget_lock_release_recursive>
 800557a:	bf00      	nop
 800557c:	20000521 	.word	0x20000521

08005580 <__sinit>:
 8005580:	b510      	push	{r4, lr}
 8005582:	4604      	mov	r4, r0
 8005584:	f7ff fff0 	bl	8005568 <__sfp_lock_acquire>
 8005588:	6a23      	ldr	r3, [r4, #32]
 800558a:	b11b      	cbz	r3, 8005594 <__sinit+0x14>
 800558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005590:	f7ff bff0 	b.w	8005574 <__sfp_lock_release>
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <__sinit+0x28>)
 8005596:	6223      	str	r3, [r4, #32]
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <__sinit+0x2c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f5      	bne.n	800558c <__sinit+0xc>
 80055a0:	f7ff ffc4 	bl	800552c <global_stdio_init.part.0>
 80055a4:	e7f2      	b.n	800558c <__sinit+0xc>
 80055a6:	bf00      	nop
 80055a8:	080054ed 	.word	0x080054ed
 80055ac:	20000518 	.word	0x20000518

080055b0 <_fwalk_sglue>:
 80055b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b4:	4607      	mov	r7, r0
 80055b6:	4688      	mov	r8, r1
 80055b8:	4614      	mov	r4, r2
 80055ba:	2600      	movs	r6, #0
 80055bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055c0:	f1b9 0901 	subs.w	r9, r9, #1
 80055c4:	d505      	bpl.n	80055d2 <_fwalk_sglue+0x22>
 80055c6:	6824      	ldr	r4, [r4, #0]
 80055c8:	2c00      	cmp	r4, #0
 80055ca:	d1f7      	bne.n	80055bc <_fwalk_sglue+0xc>
 80055cc:	4630      	mov	r0, r6
 80055ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055d2:	89ab      	ldrh	r3, [r5, #12]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d907      	bls.n	80055e8 <_fwalk_sglue+0x38>
 80055d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055dc:	3301      	adds	r3, #1
 80055de:	d003      	beq.n	80055e8 <_fwalk_sglue+0x38>
 80055e0:	4629      	mov	r1, r5
 80055e2:	4638      	mov	r0, r7
 80055e4:	47c0      	blx	r8
 80055e6:	4306      	orrs	r6, r0
 80055e8:	3568      	adds	r5, #104	; 0x68
 80055ea:	e7e9      	b.n	80055c0 <_fwalk_sglue+0x10>

080055ec <siprintf>:
 80055ec:	b40e      	push	{r1, r2, r3}
 80055ee:	b500      	push	{lr}
 80055f0:	b09c      	sub	sp, #112	; 0x70
 80055f2:	ab1d      	add	r3, sp, #116	; 0x74
 80055f4:	9002      	str	r0, [sp, #8]
 80055f6:	9006      	str	r0, [sp, #24]
 80055f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055fc:	4809      	ldr	r0, [pc, #36]	; (8005624 <siprintf+0x38>)
 80055fe:	9107      	str	r1, [sp, #28]
 8005600:	9104      	str	r1, [sp, #16]
 8005602:	4909      	ldr	r1, [pc, #36]	; (8005628 <siprintf+0x3c>)
 8005604:	f853 2b04 	ldr.w	r2, [r3], #4
 8005608:	9105      	str	r1, [sp, #20]
 800560a:	6800      	ldr	r0, [r0, #0]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	a902      	add	r1, sp, #8
 8005610:	f001 fb98 	bl	8006d44 <_svfiprintf_r>
 8005614:	9b02      	ldr	r3, [sp, #8]
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	b01c      	add	sp, #112	; 0x70
 800561c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005620:	b003      	add	sp, #12
 8005622:	4770      	bx	lr
 8005624:	20000068 	.word	0x20000068
 8005628:	ffff0208 	.word	0xffff0208

0800562c <__sread>:
 800562c:	b510      	push	{r4, lr}
 800562e:	460c      	mov	r4, r1
 8005630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005634:	f000 f86c 	bl	8005710 <_read_r>
 8005638:	2800      	cmp	r0, #0
 800563a:	bfab      	itete	ge
 800563c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800563e:	89a3      	ldrhlt	r3, [r4, #12]
 8005640:	181b      	addge	r3, r3, r0
 8005642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005646:	bfac      	ite	ge
 8005648:	6563      	strge	r3, [r4, #84]	; 0x54
 800564a:	81a3      	strhlt	r3, [r4, #12]
 800564c:	bd10      	pop	{r4, pc}

0800564e <__swrite>:
 800564e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005652:	461f      	mov	r7, r3
 8005654:	898b      	ldrh	r3, [r1, #12]
 8005656:	05db      	lsls	r3, r3, #23
 8005658:	4605      	mov	r5, r0
 800565a:	460c      	mov	r4, r1
 800565c:	4616      	mov	r6, r2
 800565e:	d505      	bpl.n	800566c <__swrite+0x1e>
 8005660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005664:	2302      	movs	r3, #2
 8005666:	2200      	movs	r2, #0
 8005668:	f000 f840 	bl	80056ec <_lseek_r>
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	4632      	mov	r2, r6
 800567a:	463b      	mov	r3, r7
 800567c:	4628      	mov	r0, r5
 800567e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005682:	f000 b857 	b.w	8005734 <_write_r>

08005686 <__sseek>:
 8005686:	b510      	push	{r4, lr}
 8005688:	460c      	mov	r4, r1
 800568a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568e:	f000 f82d 	bl	80056ec <_lseek_r>
 8005692:	1c43      	adds	r3, r0, #1
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	bf15      	itete	ne
 8005698:	6560      	strne	r0, [r4, #84]	; 0x54
 800569a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800569e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056a2:	81a3      	strheq	r3, [r4, #12]
 80056a4:	bf18      	it	ne
 80056a6:	81a3      	strhne	r3, [r4, #12]
 80056a8:	bd10      	pop	{r4, pc}

080056aa <__sclose>:
 80056aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ae:	f000 b80d 	b.w	80056cc <_close_r>

080056b2 <memset>:
 80056b2:	4402      	add	r2, r0
 80056b4:	4603      	mov	r3, r0
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d100      	bne.n	80056bc <memset+0xa>
 80056ba:	4770      	bx	lr
 80056bc:	f803 1b01 	strb.w	r1, [r3], #1
 80056c0:	e7f9      	b.n	80056b6 <memset+0x4>
	...

080056c4 <_localeconv_r>:
 80056c4:	4800      	ldr	r0, [pc, #0]	; (80056c8 <_localeconv_r+0x4>)
 80056c6:	4770      	bx	lr
 80056c8:	2000015c 	.word	0x2000015c

080056cc <_close_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	4d06      	ldr	r5, [pc, #24]	; (80056e8 <_close_r+0x1c>)
 80056d0:	2300      	movs	r3, #0
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	f7fb fc27 	bl	8000f2a <_close>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_close_r+0x1a>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_close_r+0x1a>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	2000051c 	.word	0x2000051c

080056ec <_lseek_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4d07      	ldr	r5, [pc, #28]	; (800570c <_lseek_r+0x20>)
 80056f0:	4604      	mov	r4, r0
 80056f2:	4608      	mov	r0, r1
 80056f4:	4611      	mov	r1, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	602a      	str	r2, [r5, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f7fb fc3c 	bl	8000f78 <_lseek>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_lseek_r+0x1e>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_lseek_r+0x1e>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	2000051c 	.word	0x2000051c

08005710 <_read_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4d07      	ldr	r5, [pc, #28]	; (8005730 <_read_r+0x20>)
 8005714:	4604      	mov	r4, r0
 8005716:	4608      	mov	r0, r1
 8005718:	4611      	mov	r1, r2
 800571a:	2200      	movs	r2, #0
 800571c:	602a      	str	r2, [r5, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f7fb fbca 	bl	8000eb8 <_read>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d102      	bne.n	800572e <_read_r+0x1e>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	b103      	cbz	r3, 800572e <_read_r+0x1e>
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	2000051c 	.word	0x2000051c

08005734 <_write_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d07      	ldr	r5, [pc, #28]	; (8005754 <_write_r+0x20>)
 8005738:	4604      	mov	r4, r0
 800573a:	4608      	mov	r0, r1
 800573c:	4611      	mov	r1, r2
 800573e:	2200      	movs	r2, #0
 8005740:	602a      	str	r2, [r5, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	f7fb fbd5 	bl	8000ef2 <_write>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_write_r+0x1e>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_write_r+0x1e>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	2000051c 	.word	0x2000051c

08005758 <__errno>:
 8005758:	4b01      	ldr	r3, [pc, #4]	; (8005760 <__errno+0x8>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000068 	.word	0x20000068

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4d0d      	ldr	r5, [pc, #52]	; (800579c <__libc_init_array+0x38>)
 8005768:	4c0d      	ldr	r4, [pc, #52]	; (80057a0 <__libc_init_array+0x3c>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	2600      	movs	r6, #0
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	4d0b      	ldr	r5, [pc, #44]	; (80057a4 <__libc_init_array+0x40>)
 8005776:	4c0c      	ldr	r4, [pc, #48]	; (80057a8 <__libc_init_array+0x44>)
 8005778:	f002 f80c 	bl	8007794 <_init>
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	2600      	movs	r6, #0
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f855 3b04 	ldr.w	r3, [r5], #4
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f855 3b04 	ldr.w	r3, [r5], #4
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	08007d9c 	.word	0x08007d9c
 80057a0:	08007d9c 	.word	0x08007d9c
 80057a4:	08007d9c 	.word	0x08007d9c
 80057a8:	08007da0 	.word	0x08007da0

080057ac <__retarget_lock_acquire_recursive>:
 80057ac:	4770      	bx	lr

080057ae <__retarget_lock_release_recursive>:
 80057ae:	4770      	bx	lr

080057b0 <quorem>:
 80057b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	6903      	ldr	r3, [r0, #16]
 80057b6:	690c      	ldr	r4, [r1, #16]
 80057b8:	42a3      	cmp	r3, r4
 80057ba:	4607      	mov	r7, r0
 80057bc:	db7e      	blt.n	80058bc <quorem+0x10c>
 80057be:	3c01      	subs	r4, #1
 80057c0:	f101 0814 	add.w	r8, r1, #20
 80057c4:	f100 0514 	add.w	r5, r0, #20
 80057c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057d6:	3301      	adds	r3, #1
 80057d8:	429a      	cmp	r2, r3
 80057da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80057e6:	d331      	bcc.n	800584c <quorem+0x9c>
 80057e8:	f04f 0e00 	mov.w	lr, #0
 80057ec:	4640      	mov	r0, r8
 80057ee:	46ac      	mov	ip, r5
 80057f0:	46f2      	mov	sl, lr
 80057f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80057f6:	b293      	uxth	r3, r2
 80057f8:	fb06 e303 	mla	r3, r6, r3, lr
 80057fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005800:	0c1a      	lsrs	r2, r3, #16
 8005802:	b29b      	uxth	r3, r3
 8005804:	ebaa 0303 	sub.w	r3, sl, r3
 8005808:	f8dc a000 	ldr.w	sl, [ip]
 800580c:	fa13 f38a 	uxtah	r3, r3, sl
 8005810:	fb06 220e 	mla	r2, r6, lr, r2
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	9b00      	ldr	r3, [sp, #0]
 8005818:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800581c:	b292      	uxth	r2, r2
 800581e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005822:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005826:	f8bd 3000 	ldrh.w	r3, [sp]
 800582a:	4581      	cmp	r9, r0
 800582c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005830:	f84c 3b04 	str.w	r3, [ip], #4
 8005834:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005838:	d2db      	bcs.n	80057f2 <quorem+0x42>
 800583a:	f855 300b 	ldr.w	r3, [r5, fp]
 800583e:	b92b      	cbnz	r3, 800584c <quorem+0x9c>
 8005840:	9b01      	ldr	r3, [sp, #4]
 8005842:	3b04      	subs	r3, #4
 8005844:	429d      	cmp	r5, r3
 8005846:	461a      	mov	r2, r3
 8005848:	d32c      	bcc.n	80058a4 <quorem+0xf4>
 800584a:	613c      	str	r4, [r7, #16]
 800584c:	4638      	mov	r0, r7
 800584e:	f001 f91f 	bl	8006a90 <__mcmp>
 8005852:	2800      	cmp	r0, #0
 8005854:	db22      	blt.n	800589c <quorem+0xec>
 8005856:	3601      	adds	r6, #1
 8005858:	4629      	mov	r1, r5
 800585a:	2000      	movs	r0, #0
 800585c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005860:	f8d1 c000 	ldr.w	ip, [r1]
 8005864:	b293      	uxth	r3, r2
 8005866:	1ac3      	subs	r3, r0, r3
 8005868:	0c12      	lsrs	r2, r2, #16
 800586a:	fa13 f38c 	uxtah	r3, r3, ip
 800586e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005872:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005876:	b29b      	uxth	r3, r3
 8005878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800587c:	45c1      	cmp	r9, r8
 800587e:	f841 3b04 	str.w	r3, [r1], #4
 8005882:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005886:	d2e9      	bcs.n	800585c <quorem+0xac>
 8005888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800588c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005890:	b922      	cbnz	r2, 800589c <quorem+0xec>
 8005892:	3b04      	subs	r3, #4
 8005894:	429d      	cmp	r5, r3
 8005896:	461a      	mov	r2, r3
 8005898:	d30a      	bcc.n	80058b0 <quorem+0x100>
 800589a:	613c      	str	r4, [r7, #16]
 800589c:	4630      	mov	r0, r6
 800589e:	b003      	add	sp, #12
 80058a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	3b04      	subs	r3, #4
 80058a8:	2a00      	cmp	r2, #0
 80058aa:	d1ce      	bne.n	800584a <quorem+0x9a>
 80058ac:	3c01      	subs	r4, #1
 80058ae:	e7c9      	b.n	8005844 <quorem+0x94>
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	3b04      	subs	r3, #4
 80058b4:	2a00      	cmp	r2, #0
 80058b6:	d1f0      	bne.n	800589a <quorem+0xea>
 80058b8:	3c01      	subs	r4, #1
 80058ba:	e7eb      	b.n	8005894 <quorem+0xe4>
 80058bc:	2000      	movs	r0, #0
 80058be:	e7ee      	b.n	800589e <quorem+0xee>

080058c0 <_dtoa_r>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	ed2d 8b02 	vpush	{d8}
 80058c8:	69c5      	ldr	r5, [r0, #28]
 80058ca:	b091      	sub	sp, #68	; 0x44
 80058cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80058d0:	ec59 8b10 	vmov	r8, r9, d0
 80058d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80058d6:	9106      	str	r1, [sp, #24]
 80058d8:	4606      	mov	r6, r0
 80058da:	9208      	str	r2, [sp, #32]
 80058dc:	930c      	str	r3, [sp, #48]	; 0x30
 80058de:	b975      	cbnz	r5, 80058fe <_dtoa_r+0x3e>
 80058e0:	2010      	movs	r0, #16
 80058e2:	f000 fda5 	bl	8006430 <malloc>
 80058e6:	4602      	mov	r2, r0
 80058e8:	61f0      	str	r0, [r6, #28]
 80058ea:	b920      	cbnz	r0, 80058f6 <_dtoa_r+0x36>
 80058ec:	4ba6      	ldr	r3, [pc, #664]	; (8005b88 <_dtoa_r+0x2c8>)
 80058ee:	21ef      	movs	r1, #239	; 0xef
 80058f0:	48a6      	ldr	r0, [pc, #664]	; (8005b8c <_dtoa_r+0x2cc>)
 80058f2:	f001 fc0b 	bl	800710c <__assert_func>
 80058f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058fa:	6005      	str	r5, [r0, #0]
 80058fc:	60c5      	str	r5, [r0, #12]
 80058fe:	69f3      	ldr	r3, [r6, #28]
 8005900:	6819      	ldr	r1, [r3, #0]
 8005902:	b151      	cbz	r1, 800591a <_dtoa_r+0x5a>
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	604a      	str	r2, [r1, #4]
 8005908:	2301      	movs	r3, #1
 800590a:	4093      	lsls	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
 800590e:	4630      	mov	r0, r6
 8005910:	f000 fe82 	bl	8006618 <_Bfree>
 8005914:	69f3      	ldr	r3, [r6, #28]
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	f1b9 0300 	subs.w	r3, r9, #0
 800591e:	bfbb      	ittet	lt
 8005920:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005924:	9303      	strlt	r3, [sp, #12]
 8005926:	2300      	movge	r3, #0
 8005928:	2201      	movlt	r2, #1
 800592a:	bfac      	ite	ge
 800592c:	6023      	strge	r3, [r4, #0]
 800592e:	6022      	strlt	r2, [r4, #0]
 8005930:	4b97      	ldr	r3, [pc, #604]	; (8005b90 <_dtoa_r+0x2d0>)
 8005932:	9c03      	ldr	r4, [sp, #12]
 8005934:	43a3      	bics	r3, r4
 8005936:	d11c      	bne.n	8005972 <_dtoa_r+0xb2>
 8005938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800593a:	f242 730f 	movw	r3, #9999	; 0x270f
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005944:	ea53 0308 	orrs.w	r3, r3, r8
 8005948:	f000 84fb 	beq.w	8006342 <_dtoa_r+0xa82>
 800594c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800594e:	b963      	cbnz	r3, 800596a <_dtoa_r+0xaa>
 8005950:	4b90      	ldr	r3, [pc, #576]	; (8005b94 <_dtoa_r+0x2d4>)
 8005952:	e020      	b.n	8005996 <_dtoa_r+0xd6>
 8005954:	4b90      	ldr	r3, [pc, #576]	; (8005b98 <_dtoa_r+0x2d8>)
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	3308      	adds	r3, #8
 800595a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	9801      	ldr	r0, [sp, #4]
 8005960:	b011      	add	sp, #68	; 0x44
 8005962:	ecbd 8b02 	vpop	{d8}
 8005966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596a:	4b8a      	ldr	r3, [pc, #552]	; (8005b94 <_dtoa_r+0x2d4>)
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	3303      	adds	r3, #3
 8005970:	e7f3      	b.n	800595a <_dtoa_r+0x9a>
 8005972:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005976:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597e:	d10c      	bne.n	800599a <_dtoa_r+0xda>
 8005980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005982:	2301      	movs	r3, #1
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 84d7 	beq.w	800633c <_dtoa_r+0xa7c>
 800598e:	4b83      	ldr	r3, [pc, #524]	; (8005b9c <_dtoa_r+0x2dc>)
 8005990:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	3b01      	subs	r3, #1
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	e7e1      	b.n	800595e <_dtoa_r+0x9e>
 800599a:	aa0e      	add	r2, sp, #56	; 0x38
 800599c:	a90f      	add	r1, sp, #60	; 0x3c
 800599e:	4630      	mov	r0, r6
 80059a0:	eeb0 0b48 	vmov.f64	d0, d8
 80059a4:	f001 f91a 	bl	8006bdc <__d2b>
 80059a8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80059ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059ae:	4605      	mov	r5, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d046      	beq.n	8005a42 <_dtoa_r+0x182>
 80059b4:	eeb0 7b48 	vmov.f64	d7, d8
 80059b8:	ee18 1a90 	vmov	r1, s17
 80059bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80059c0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80059c4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80059c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059cc:	2000      	movs	r0, #0
 80059ce:	ee07 1a90 	vmov	s15, r1
 80059d2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80059d6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005b70 <_dtoa_r+0x2b0>
 80059da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059de:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005b78 <_dtoa_r+0x2b8>
 80059e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80059e6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005b80 <_dtoa_r+0x2c0>
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80059f2:	eeb0 7b46 	vmov.f64	d7, d6
 80059f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80059fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80059fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a06:	ee16 ba90 	vmov	fp, s13
 8005a0a:	9009      	str	r0, [sp, #36]	; 0x24
 8005a0c:	d508      	bpl.n	8005a20 <_dtoa_r+0x160>
 8005a0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005a12:	eeb4 6b47 	vcmp.f64	d6, d7
 8005a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1a:	bf18      	it	ne
 8005a1c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005a20:	f1bb 0f16 	cmp.w	fp, #22
 8005a24:	d82b      	bhi.n	8005a7e <_dtoa_r+0x1be>
 8005a26:	495e      	ldr	r1, [pc, #376]	; (8005ba0 <_dtoa_r+0x2e0>)
 8005a28:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005a2c:	ed91 7b00 	vldr	d7, [r1]
 8005a30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a38:	d501      	bpl.n	8005a3e <_dtoa_r+0x17e>
 8005a3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a3e:	2100      	movs	r1, #0
 8005a40:	e01e      	b.n	8005a80 <_dtoa_r+0x1c0>
 8005a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a44:	4413      	add	r3, r2
 8005a46:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8005a4a:	2920      	cmp	r1, #32
 8005a4c:	bfc1      	itttt	gt
 8005a4e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8005a52:	408c      	lslgt	r4, r1
 8005a54:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005a58:	fa28 f101 	lsrgt.w	r1, r8, r1
 8005a5c:	bfd6      	itet	le
 8005a5e:	f1c1 0120 	rsble	r1, r1, #32
 8005a62:	4321      	orrgt	r1, r4
 8005a64:	fa08 f101 	lslle.w	r1, r8, r1
 8005a68:	ee07 1a90 	vmov	s15, r1
 8005a6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005a70:	3b01      	subs	r3, #1
 8005a72:	ee17 1a90 	vmov	r1, s15
 8005a76:	2001      	movs	r0, #1
 8005a78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005a7c:	e7a7      	b.n	80059ce <_dtoa_r+0x10e>
 8005a7e:	2101      	movs	r1, #1
 8005a80:	1ad2      	subs	r2, r2, r3
 8005a82:	1e53      	subs	r3, r2, #1
 8005a84:	9305      	str	r3, [sp, #20]
 8005a86:	bf45      	ittet	mi
 8005a88:	f1c2 0301 	rsbmi	r3, r2, #1
 8005a8c:	9304      	strmi	r3, [sp, #16]
 8005a8e:	2300      	movpl	r3, #0
 8005a90:	2300      	movmi	r3, #0
 8005a92:	bf4c      	ite	mi
 8005a94:	9305      	strmi	r3, [sp, #20]
 8005a96:	9304      	strpl	r3, [sp, #16]
 8005a98:	f1bb 0f00 	cmp.w	fp, #0
 8005a9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a9e:	db18      	blt.n	8005ad2 <_dtoa_r+0x212>
 8005aa0:	9b05      	ldr	r3, [sp, #20]
 8005aa2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005aa6:	445b      	add	r3, fp
 8005aa8:	9305      	str	r3, [sp, #20]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	9a06      	ldr	r2, [sp, #24]
 8005aae:	2a09      	cmp	r2, #9
 8005ab0:	d848      	bhi.n	8005b44 <_dtoa_r+0x284>
 8005ab2:	2a05      	cmp	r2, #5
 8005ab4:	bfc4      	itt	gt
 8005ab6:	3a04      	subgt	r2, #4
 8005ab8:	9206      	strgt	r2, [sp, #24]
 8005aba:	9a06      	ldr	r2, [sp, #24]
 8005abc:	f1a2 0202 	sub.w	r2, r2, #2
 8005ac0:	bfcc      	ite	gt
 8005ac2:	2400      	movgt	r4, #0
 8005ac4:	2401      	movle	r4, #1
 8005ac6:	2a03      	cmp	r2, #3
 8005ac8:	d847      	bhi.n	8005b5a <_dtoa_r+0x29a>
 8005aca:	e8df f002 	tbb	[pc, r2]
 8005ace:	2d0b      	.short	0x2d0b
 8005ad0:	392b      	.short	0x392b
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	eba3 030b 	sub.w	r3, r3, fp
 8005ada:	9304      	str	r3, [sp, #16]
 8005adc:	920a      	str	r2, [sp, #40]	; 0x28
 8005ade:	f1cb 0300 	rsb	r3, fp, #0
 8005ae2:	e7e3      	b.n	8005aac <_dtoa_r+0x1ec>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	9207      	str	r2, [sp, #28]
 8005ae8:	9a08      	ldr	r2, [sp, #32]
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	dc38      	bgt.n	8005b60 <_dtoa_r+0x2a0>
 8005aee:	f04f 0a01 	mov.w	sl, #1
 8005af2:	46d1      	mov	r9, sl
 8005af4:	4652      	mov	r2, sl
 8005af6:	f8cd a020 	str.w	sl, [sp, #32]
 8005afa:	69f7      	ldr	r7, [r6, #28]
 8005afc:	2100      	movs	r1, #0
 8005afe:	2004      	movs	r0, #4
 8005b00:	f100 0c14 	add.w	ip, r0, #20
 8005b04:	4594      	cmp	ip, r2
 8005b06:	d930      	bls.n	8005b6a <_dtoa_r+0x2aa>
 8005b08:	6079      	str	r1, [r7, #4]
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8005b0e:	f000 fd43 	bl	8006598 <_Balloc>
 8005b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b14:	9001      	str	r0, [sp, #4]
 8005b16:	4602      	mov	r2, r0
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d145      	bne.n	8005ba8 <_dtoa_r+0x2e8>
 8005b1c:	4b21      	ldr	r3, [pc, #132]	; (8005ba4 <_dtoa_r+0x2e4>)
 8005b1e:	f240 11af 	movw	r1, #431	; 0x1af
 8005b22:	e6e5      	b.n	80058f0 <_dtoa_r+0x30>
 8005b24:	2201      	movs	r2, #1
 8005b26:	e7de      	b.n	8005ae6 <_dtoa_r+0x226>
 8005b28:	2200      	movs	r2, #0
 8005b2a:	9207      	str	r2, [sp, #28]
 8005b2c:	9a08      	ldr	r2, [sp, #32]
 8005b2e:	eb0b 0a02 	add.w	sl, fp, r2
 8005b32:	f10a 0901 	add.w	r9, sl, #1
 8005b36:	464a      	mov	r2, r9
 8005b38:	2a01      	cmp	r2, #1
 8005b3a:	bfb8      	it	lt
 8005b3c:	2201      	movlt	r2, #1
 8005b3e:	e7dc      	b.n	8005afa <_dtoa_r+0x23a>
 8005b40:	2201      	movs	r2, #1
 8005b42:	e7f2      	b.n	8005b2a <_dtoa_r+0x26a>
 8005b44:	2401      	movs	r4, #1
 8005b46:	2200      	movs	r2, #0
 8005b48:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005b4c:	f04f 3aff 	mov.w	sl, #4294967295
 8005b50:	2100      	movs	r1, #0
 8005b52:	46d1      	mov	r9, sl
 8005b54:	2212      	movs	r2, #18
 8005b56:	9108      	str	r1, [sp, #32]
 8005b58:	e7cf      	b.n	8005afa <_dtoa_r+0x23a>
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	9207      	str	r2, [sp, #28]
 8005b5e:	e7f5      	b.n	8005b4c <_dtoa_r+0x28c>
 8005b60:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005b64:	46d1      	mov	r9, sl
 8005b66:	4652      	mov	r2, sl
 8005b68:	e7c7      	b.n	8005afa <_dtoa_r+0x23a>
 8005b6a:	3101      	adds	r1, #1
 8005b6c:	0040      	lsls	r0, r0, #1
 8005b6e:	e7c7      	b.n	8005b00 <_dtoa_r+0x240>
 8005b70:	636f4361 	.word	0x636f4361
 8005b74:	3fd287a7 	.word	0x3fd287a7
 8005b78:	8b60c8b3 	.word	0x8b60c8b3
 8005b7c:	3fc68a28 	.word	0x3fc68a28
 8005b80:	509f79fb 	.word	0x509f79fb
 8005b84:	3fd34413 	.word	0x3fd34413
 8005b88:	08007a61 	.word	0x08007a61
 8005b8c:	08007a78 	.word	0x08007a78
 8005b90:	7ff00000 	.word	0x7ff00000
 8005b94:	08007a5d 	.word	0x08007a5d
 8005b98:	08007a54 	.word	0x08007a54
 8005b9c:	08007a31 	.word	0x08007a31
 8005ba0:	08007b68 	.word	0x08007b68
 8005ba4:	08007ad0 	.word	0x08007ad0
 8005ba8:	69f2      	ldr	r2, [r6, #28]
 8005baa:	9901      	ldr	r1, [sp, #4]
 8005bac:	6011      	str	r1, [r2, #0]
 8005bae:	f1b9 0f0e 	cmp.w	r9, #14
 8005bb2:	d86c      	bhi.n	8005c8e <_dtoa_r+0x3ce>
 8005bb4:	2c00      	cmp	r4, #0
 8005bb6:	d06a      	beq.n	8005c8e <_dtoa_r+0x3ce>
 8005bb8:	f1bb 0f00 	cmp.w	fp, #0
 8005bbc:	f340 80a0 	ble.w	8005d00 <_dtoa_r+0x440>
 8005bc0:	4ac1      	ldr	r2, [pc, #772]	; (8005ec8 <_dtoa_r+0x608>)
 8005bc2:	f00b 010f 	and.w	r1, fp, #15
 8005bc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005bca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005bce:	ed92 7b00 	vldr	d7, [r2]
 8005bd2:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005bd6:	f000 8087 	beq.w	8005ce8 <_dtoa_r+0x428>
 8005bda:	49bc      	ldr	r1, [pc, #752]	; (8005ecc <_dtoa_r+0x60c>)
 8005bdc:	ed91 6b08 	vldr	d6, [r1, #32]
 8005be0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005be4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005be8:	f002 020f 	and.w	r2, r2, #15
 8005bec:	2103      	movs	r1, #3
 8005bee:	48b7      	ldr	r0, [pc, #732]	; (8005ecc <_dtoa_r+0x60c>)
 8005bf0:	2a00      	cmp	r2, #0
 8005bf2:	d17b      	bne.n	8005cec <_dtoa_r+0x42c>
 8005bf4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005bf8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005bfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c06:	2a00      	cmp	r2, #0
 8005c08:	f000 80a0 	beq.w	8005d4c <_dtoa_r+0x48c>
 8005c0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005c10:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c18:	f140 8098 	bpl.w	8005d4c <_dtoa_r+0x48c>
 8005c1c:	f1b9 0f00 	cmp.w	r9, #0
 8005c20:	f000 8094 	beq.w	8005d4c <_dtoa_r+0x48c>
 8005c24:	f1ba 0f00 	cmp.w	sl, #0
 8005c28:	dd2f      	ble.n	8005c8a <_dtoa_r+0x3ca>
 8005c2a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005c2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c32:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c36:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005c3a:	3101      	adds	r1, #1
 8005c3c:	4654      	mov	r4, sl
 8005c3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005c42:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005c46:	ee07 1a90 	vmov	s15, r1
 8005c4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005c4e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005c52:	ee15 7a90 	vmov	r7, s11
 8005c56:	ec51 0b15 	vmov	r0, r1, d5
 8005c5a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005c5e:	2c00      	cmp	r4, #0
 8005c60:	d177      	bne.n	8005d52 <_dtoa_r+0x492>
 8005c62:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005c66:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005c6a:	ec41 0b17 	vmov	d7, r0, r1
 8005c6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c76:	f300 826a 	bgt.w	800614e <_dtoa_r+0x88e>
 8005c7a:	eeb1 7b47 	vneg.f64	d7, d7
 8005c7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c86:	f100 8260 	bmi.w	800614a <_dtoa_r+0x88a>
 8005c8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005c8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c90:	2a00      	cmp	r2, #0
 8005c92:	f2c0 811d 	blt.w	8005ed0 <_dtoa_r+0x610>
 8005c96:	f1bb 0f0e 	cmp.w	fp, #14
 8005c9a:	f300 8119 	bgt.w	8005ed0 <_dtoa_r+0x610>
 8005c9e:	4b8a      	ldr	r3, [pc, #552]	; (8005ec8 <_dtoa_r+0x608>)
 8005ca0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ca4:	ed93 6b00 	vldr	d6, [r3]
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f280 80b7 	bge.w	8005e1e <_dtoa_r+0x55e>
 8005cb0:	f1b9 0f00 	cmp.w	r9, #0
 8005cb4:	f300 80b3 	bgt.w	8005e1e <_dtoa_r+0x55e>
 8005cb8:	f040 8246 	bne.w	8006148 <_dtoa_r+0x888>
 8005cbc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005cc0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005cc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd0:	464c      	mov	r4, r9
 8005cd2:	464f      	mov	r7, r9
 8005cd4:	f280 821c 	bge.w	8006110 <_dtoa_r+0x850>
 8005cd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005cdc:	2331      	movs	r3, #49	; 0x31
 8005cde:	f808 3b01 	strb.w	r3, [r8], #1
 8005ce2:	f10b 0b01 	add.w	fp, fp, #1
 8005ce6:	e218      	b.n	800611a <_dtoa_r+0x85a>
 8005ce8:	2102      	movs	r1, #2
 8005cea:	e780      	b.n	8005bee <_dtoa_r+0x32e>
 8005cec:	07d4      	lsls	r4, r2, #31
 8005cee:	d504      	bpl.n	8005cfa <_dtoa_r+0x43a>
 8005cf0:	ed90 6b00 	vldr	d6, [r0]
 8005cf4:	3101      	adds	r1, #1
 8005cf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005cfa:	1052      	asrs	r2, r2, #1
 8005cfc:	3008      	adds	r0, #8
 8005cfe:	e777      	b.n	8005bf0 <_dtoa_r+0x330>
 8005d00:	d022      	beq.n	8005d48 <_dtoa_r+0x488>
 8005d02:	f1cb 0200 	rsb	r2, fp, #0
 8005d06:	4970      	ldr	r1, [pc, #448]	; (8005ec8 <_dtoa_r+0x608>)
 8005d08:	f002 000f 	and.w	r0, r2, #15
 8005d0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005d10:	ed91 7b00 	vldr	d7, [r1]
 8005d14:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005d18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d1c:	486b      	ldr	r0, [pc, #428]	; (8005ecc <_dtoa_r+0x60c>)
 8005d1e:	1112      	asrs	r2, r2, #4
 8005d20:	2400      	movs	r4, #0
 8005d22:	2102      	movs	r1, #2
 8005d24:	b92a      	cbnz	r2, 8005d32 <_dtoa_r+0x472>
 8005d26:	2c00      	cmp	r4, #0
 8005d28:	f43f af6a 	beq.w	8005c00 <_dtoa_r+0x340>
 8005d2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d30:	e766      	b.n	8005c00 <_dtoa_r+0x340>
 8005d32:	07d7      	lsls	r7, r2, #31
 8005d34:	d505      	bpl.n	8005d42 <_dtoa_r+0x482>
 8005d36:	ed90 6b00 	vldr	d6, [r0]
 8005d3a:	3101      	adds	r1, #1
 8005d3c:	2401      	movs	r4, #1
 8005d3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d42:	1052      	asrs	r2, r2, #1
 8005d44:	3008      	adds	r0, #8
 8005d46:	e7ed      	b.n	8005d24 <_dtoa_r+0x464>
 8005d48:	2102      	movs	r1, #2
 8005d4a:	e759      	b.n	8005c00 <_dtoa_r+0x340>
 8005d4c:	465a      	mov	r2, fp
 8005d4e:	464c      	mov	r4, r9
 8005d50:	e775      	b.n	8005c3e <_dtoa_r+0x37e>
 8005d52:	ec41 0b17 	vmov	d7, r0, r1
 8005d56:	495c      	ldr	r1, [pc, #368]	; (8005ec8 <_dtoa_r+0x608>)
 8005d58:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005d5c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005d60:	9901      	ldr	r1, [sp, #4]
 8005d62:	440c      	add	r4, r1
 8005d64:	9907      	ldr	r1, [sp, #28]
 8005d66:	b351      	cbz	r1, 8005dbe <_dtoa_r+0x4fe>
 8005d68:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005d6c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005d70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005d74:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005d78:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005d7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005d80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005d84:	ee14 1a90 	vmov	r1, s9
 8005d88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005d8c:	3130      	adds	r1, #48	; 0x30
 8005d8e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005d92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d9a:	f808 1b01 	strb.w	r1, [r8], #1
 8005d9e:	d439      	bmi.n	8005e14 <_dtoa_r+0x554>
 8005da0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005da4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dac:	d472      	bmi.n	8005e94 <_dtoa_r+0x5d4>
 8005dae:	45a0      	cmp	r8, r4
 8005db0:	f43f af6b 	beq.w	8005c8a <_dtoa_r+0x3ca>
 8005db4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005db8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005dbc:	e7e0      	b.n	8005d80 <_dtoa_r+0x4c0>
 8005dbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005dc2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005dcc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005dd0:	ee14 1a90 	vmov	r1, s9
 8005dd4:	3130      	adds	r1, #48	; 0x30
 8005dd6:	f808 1b01 	strb.w	r1, [r8], #1
 8005dda:	45a0      	cmp	r8, r4
 8005ddc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005de0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005de4:	d118      	bne.n	8005e18 <_dtoa_r+0x558>
 8005de6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005dea:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005dee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df6:	dc4d      	bgt.n	8005e94 <_dtoa_r+0x5d4>
 8005df8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005dfc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e04:	f57f af41 	bpl.w	8005c8a <_dtoa_r+0x3ca>
 8005e08:	4680      	mov	r8, r0
 8005e0a:	3801      	subs	r0, #1
 8005e0c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005e10:	2b30      	cmp	r3, #48	; 0x30
 8005e12:	d0f9      	beq.n	8005e08 <_dtoa_r+0x548>
 8005e14:	4693      	mov	fp, r2
 8005e16:	e02a      	b.n	8005e6e <_dtoa_r+0x5ae>
 8005e18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005e1c:	e7d6      	b.n	8005dcc <_dtoa_r+0x50c>
 8005e1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e22:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005e26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e2a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005e2e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005e32:	ee15 3a10 	vmov	r3, s10
 8005e36:	3330      	adds	r3, #48	; 0x30
 8005e38:	f808 3b01 	strb.w	r3, [r8], #1
 8005e3c:	9b01      	ldr	r3, [sp, #4]
 8005e3e:	eba8 0303 	sub.w	r3, r8, r3
 8005e42:	4599      	cmp	r9, r3
 8005e44:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005e48:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005e4c:	d133      	bne.n	8005eb6 <_dtoa_r+0x5f6>
 8005e4e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005e52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5a:	dc1a      	bgt.n	8005e92 <_dtoa_r+0x5d2>
 8005e5c:	eeb4 7b46 	vcmp.f64	d7, d6
 8005e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e64:	d103      	bne.n	8005e6e <_dtoa_r+0x5ae>
 8005e66:	ee15 3a10 	vmov	r3, s10
 8005e6a:	07d9      	lsls	r1, r3, #31
 8005e6c:	d411      	bmi.n	8005e92 <_dtoa_r+0x5d2>
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 fbd1 	bl	8006618 <_Bfree>
 8005e76:	2300      	movs	r3, #0
 8005e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e7a:	f888 3000 	strb.w	r3, [r8]
 8005e7e:	f10b 0301 	add.w	r3, fp, #1
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f43f ad69 	beq.w	800595e <_dtoa_r+0x9e>
 8005e8c:	f8c3 8000 	str.w	r8, [r3]
 8005e90:	e565      	b.n	800595e <_dtoa_r+0x9e>
 8005e92:	465a      	mov	r2, fp
 8005e94:	4643      	mov	r3, r8
 8005e96:	4698      	mov	r8, r3
 8005e98:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8005e9c:	2939      	cmp	r1, #57	; 0x39
 8005e9e:	d106      	bne.n	8005eae <_dtoa_r+0x5ee>
 8005ea0:	9901      	ldr	r1, [sp, #4]
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	d1f7      	bne.n	8005e96 <_dtoa_r+0x5d6>
 8005ea6:	9801      	ldr	r0, [sp, #4]
 8005ea8:	2130      	movs	r1, #48	; 0x30
 8005eaa:	3201      	adds	r2, #1
 8005eac:	7001      	strb	r1, [r0, #0]
 8005eae:	7819      	ldrb	r1, [r3, #0]
 8005eb0:	3101      	adds	r1, #1
 8005eb2:	7019      	strb	r1, [r3, #0]
 8005eb4:	e7ae      	b.n	8005e14 <_dtoa_r+0x554>
 8005eb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005eba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec2:	d1b2      	bne.n	8005e2a <_dtoa_r+0x56a>
 8005ec4:	e7d3      	b.n	8005e6e <_dtoa_r+0x5ae>
 8005ec6:	bf00      	nop
 8005ec8:	08007b68 	.word	0x08007b68
 8005ecc:	08007b40 	.word	0x08007b40
 8005ed0:	9907      	ldr	r1, [sp, #28]
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	f000 80d0 	beq.w	8006078 <_dtoa_r+0x7b8>
 8005ed8:	9906      	ldr	r1, [sp, #24]
 8005eda:	2901      	cmp	r1, #1
 8005edc:	f300 80b4 	bgt.w	8006048 <_dtoa_r+0x788>
 8005ee0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ee2:	2900      	cmp	r1, #0
 8005ee4:	f000 80ac 	beq.w	8006040 <_dtoa_r+0x780>
 8005ee8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005eec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005ef0:	461c      	mov	r4, r3
 8005ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef4:	9b04      	ldr	r3, [sp, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	9304      	str	r3, [sp, #16]
 8005efa:	9b05      	ldr	r3, [sp, #20]
 8005efc:	2101      	movs	r1, #1
 8005efe:	4413      	add	r3, r2
 8005f00:	4630      	mov	r0, r6
 8005f02:	9305      	str	r3, [sp, #20]
 8005f04:	f000 fc3e 	bl	8006784 <__i2b>
 8005f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0a:	4607      	mov	r7, r0
 8005f0c:	f1b8 0f00 	cmp.w	r8, #0
 8005f10:	d00d      	beq.n	8005f2e <_dtoa_r+0x66e>
 8005f12:	9a05      	ldr	r2, [sp, #20]
 8005f14:	2a00      	cmp	r2, #0
 8005f16:	dd0a      	ble.n	8005f2e <_dtoa_r+0x66e>
 8005f18:	4542      	cmp	r2, r8
 8005f1a:	9904      	ldr	r1, [sp, #16]
 8005f1c:	bfa8      	it	ge
 8005f1e:	4642      	movge	r2, r8
 8005f20:	1a89      	subs	r1, r1, r2
 8005f22:	9104      	str	r1, [sp, #16]
 8005f24:	9905      	ldr	r1, [sp, #20]
 8005f26:	eba8 0802 	sub.w	r8, r8, r2
 8005f2a:	1a8a      	subs	r2, r1, r2
 8005f2c:	9205      	str	r2, [sp, #20]
 8005f2e:	b303      	cbz	r3, 8005f72 <_dtoa_r+0x6b2>
 8005f30:	9a07      	ldr	r2, [sp, #28]
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	f000 80a5 	beq.w	8006082 <_dtoa_r+0x7c2>
 8005f38:	2c00      	cmp	r4, #0
 8005f3a:	dd13      	ble.n	8005f64 <_dtoa_r+0x6a4>
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	4622      	mov	r2, r4
 8005f40:	4630      	mov	r0, r6
 8005f42:	930d      	str	r3, [sp, #52]	; 0x34
 8005f44:	f000 fcde 	bl	8006904 <__pow5mult>
 8005f48:	462a      	mov	r2, r5
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f000 fc2e 	bl	80067b0 <__multiply>
 8005f54:	4629      	mov	r1, r5
 8005f56:	9009      	str	r0, [sp, #36]	; 0x24
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f000 fb5d 	bl	8006618 <_Bfree>
 8005f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f62:	4615      	mov	r5, r2
 8005f64:	1b1a      	subs	r2, r3, r4
 8005f66:	d004      	beq.n	8005f72 <_dtoa_r+0x6b2>
 8005f68:	4629      	mov	r1, r5
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	f000 fcca 	bl	8006904 <__pow5mult>
 8005f70:	4605      	mov	r5, r0
 8005f72:	2101      	movs	r1, #1
 8005f74:	4630      	mov	r0, r6
 8005f76:	f000 fc05 	bl	8006784 <__i2b>
 8005f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	f340 8081 	ble.w	8006086 <_dtoa_r+0x7c6>
 8005f84:	461a      	mov	r2, r3
 8005f86:	4601      	mov	r1, r0
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 fcbb 	bl	8006904 <__pow5mult>
 8005f8e:	9b06      	ldr	r3, [sp, #24]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	4604      	mov	r4, r0
 8005f94:	dd7a      	ble.n	800608c <_dtoa_r+0x7cc>
 8005f96:	2300      	movs	r3, #0
 8005f98:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9a:	6922      	ldr	r2, [r4, #16]
 8005f9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005fa0:	6910      	ldr	r0, [r2, #16]
 8005fa2:	f000 fba1 	bl	80066e8 <__hi0bits>
 8005fa6:	f1c0 0020 	rsb	r0, r0, #32
 8005faa:	9b05      	ldr	r3, [sp, #20]
 8005fac:	4418      	add	r0, r3
 8005fae:	f010 001f 	ands.w	r0, r0, #31
 8005fb2:	f000 8093 	beq.w	80060dc <_dtoa_r+0x81c>
 8005fb6:	f1c0 0220 	rsb	r2, r0, #32
 8005fba:	2a04      	cmp	r2, #4
 8005fbc:	f340 8085 	ble.w	80060ca <_dtoa_r+0x80a>
 8005fc0:	9b04      	ldr	r3, [sp, #16]
 8005fc2:	f1c0 001c 	rsb	r0, r0, #28
 8005fc6:	4403      	add	r3, r0
 8005fc8:	9304      	str	r3, [sp, #16]
 8005fca:	9b05      	ldr	r3, [sp, #20]
 8005fcc:	4480      	add	r8, r0
 8005fce:	4403      	add	r3, r0
 8005fd0:	9305      	str	r3, [sp, #20]
 8005fd2:	9b04      	ldr	r3, [sp, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dd05      	ble.n	8005fe4 <_dtoa_r+0x724>
 8005fd8:	4629      	mov	r1, r5
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f000 fceb 	bl	80069b8 <__lshift>
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	9b05      	ldr	r3, [sp, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	dd05      	ble.n	8005ff6 <_dtoa_r+0x736>
 8005fea:	4621      	mov	r1, r4
 8005fec:	461a      	mov	r2, r3
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f000 fce2 	bl	80069b8 <__lshift>
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d071      	beq.n	80060e0 <_dtoa_r+0x820>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 fd46 	bl	8006a90 <__mcmp>
 8006004:	2800      	cmp	r0, #0
 8006006:	da6b      	bge.n	80060e0 <_dtoa_r+0x820>
 8006008:	2300      	movs	r3, #0
 800600a:	4629      	mov	r1, r5
 800600c:	220a      	movs	r2, #10
 800600e:	4630      	mov	r0, r6
 8006010:	f000 fb24 	bl	800665c <__multadd>
 8006014:	9b07      	ldr	r3, [sp, #28]
 8006016:	f10b 3bff 	add.w	fp, fp, #4294967295
 800601a:	4605      	mov	r5, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8197 	beq.w	8006350 <_dtoa_r+0xa90>
 8006022:	4639      	mov	r1, r7
 8006024:	2300      	movs	r3, #0
 8006026:	220a      	movs	r2, #10
 8006028:	4630      	mov	r0, r6
 800602a:	f000 fb17 	bl	800665c <__multadd>
 800602e:	f1ba 0f00 	cmp.w	sl, #0
 8006032:	4607      	mov	r7, r0
 8006034:	f300 8093 	bgt.w	800615e <_dtoa_r+0x89e>
 8006038:	9b06      	ldr	r3, [sp, #24]
 800603a:	2b02      	cmp	r3, #2
 800603c:	dc57      	bgt.n	80060ee <_dtoa_r+0x82e>
 800603e:	e08e      	b.n	800615e <_dtoa_r+0x89e>
 8006040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006042:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006046:	e751      	b.n	8005eec <_dtoa_r+0x62c>
 8006048:	f109 34ff 	add.w	r4, r9, #4294967295
 800604c:	42a3      	cmp	r3, r4
 800604e:	bfbf      	itttt	lt
 8006050:	1ae2      	sublt	r2, r4, r3
 8006052:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006054:	189b      	addlt	r3, r3, r2
 8006056:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006058:	bfae      	itee	ge
 800605a:	1b1c      	subge	r4, r3, r4
 800605c:	4623      	movlt	r3, r4
 800605e:	2400      	movlt	r4, #0
 8006060:	f1b9 0f00 	cmp.w	r9, #0
 8006064:	bfb5      	itete	lt
 8006066:	9a04      	ldrlt	r2, [sp, #16]
 8006068:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800606c:	eba2 0809 	sublt.w	r8, r2, r9
 8006070:	464a      	movge	r2, r9
 8006072:	bfb8      	it	lt
 8006074:	2200      	movlt	r2, #0
 8006076:	e73c      	b.n	8005ef2 <_dtoa_r+0x632>
 8006078:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800607c:	9f07      	ldr	r7, [sp, #28]
 800607e:	461c      	mov	r4, r3
 8006080:	e744      	b.n	8005f0c <_dtoa_r+0x64c>
 8006082:	461a      	mov	r2, r3
 8006084:	e770      	b.n	8005f68 <_dtoa_r+0x6a8>
 8006086:	9b06      	ldr	r3, [sp, #24]
 8006088:	2b01      	cmp	r3, #1
 800608a:	dc18      	bgt.n	80060be <_dtoa_r+0x7fe>
 800608c:	9b02      	ldr	r3, [sp, #8]
 800608e:	b9b3      	cbnz	r3, 80060be <_dtoa_r+0x7fe>
 8006090:	9b03      	ldr	r3, [sp, #12]
 8006092:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006096:	b9a2      	cbnz	r2, 80060c2 <_dtoa_r+0x802>
 8006098:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800609c:	0d12      	lsrs	r2, r2, #20
 800609e:	0512      	lsls	r2, r2, #20
 80060a0:	b18a      	cbz	r2, 80060c6 <_dtoa_r+0x806>
 80060a2:	9b04      	ldr	r3, [sp, #16]
 80060a4:	3301      	adds	r3, #1
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	9b05      	ldr	r3, [sp, #20]
 80060aa:	3301      	adds	r3, #1
 80060ac:	9305      	str	r3, [sp, #20]
 80060ae:	2301      	movs	r3, #1
 80060b0:	9309      	str	r3, [sp, #36]	; 0x24
 80060b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f47f af70 	bne.w	8005f9a <_dtoa_r+0x6da>
 80060ba:	2001      	movs	r0, #1
 80060bc:	e775      	b.n	8005faa <_dtoa_r+0x6ea>
 80060be:	2300      	movs	r3, #0
 80060c0:	e7f6      	b.n	80060b0 <_dtoa_r+0x7f0>
 80060c2:	9b02      	ldr	r3, [sp, #8]
 80060c4:	e7f4      	b.n	80060b0 <_dtoa_r+0x7f0>
 80060c6:	9209      	str	r2, [sp, #36]	; 0x24
 80060c8:	e7f3      	b.n	80060b2 <_dtoa_r+0x7f2>
 80060ca:	d082      	beq.n	8005fd2 <_dtoa_r+0x712>
 80060cc:	9b04      	ldr	r3, [sp, #16]
 80060ce:	321c      	adds	r2, #28
 80060d0:	4413      	add	r3, r2
 80060d2:	9304      	str	r3, [sp, #16]
 80060d4:	9b05      	ldr	r3, [sp, #20]
 80060d6:	4490      	add	r8, r2
 80060d8:	4413      	add	r3, r2
 80060da:	e779      	b.n	8005fd0 <_dtoa_r+0x710>
 80060dc:	4602      	mov	r2, r0
 80060de:	e7f5      	b.n	80060cc <_dtoa_r+0x80c>
 80060e0:	f1b9 0f00 	cmp.w	r9, #0
 80060e4:	dc36      	bgt.n	8006154 <_dtoa_r+0x894>
 80060e6:	9b06      	ldr	r3, [sp, #24]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	dd33      	ble.n	8006154 <_dtoa_r+0x894>
 80060ec:	46ca      	mov	sl, r9
 80060ee:	f1ba 0f00 	cmp.w	sl, #0
 80060f2:	d10d      	bne.n	8006110 <_dtoa_r+0x850>
 80060f4:	4621      	mov	r1, r4
 80060f6:	4653      	mov	r3, sl
 80060f8:	2205      	movs	r2, #5
 80060fa:	4630      	mov	r0, r6
 80060fc:	f000 faae 	bl	800665c <__multadd>
 8006100:	4601      	mov	r1, r0
 8006102:	4604      	mov	r4, r0
 8006104:	4628      	mov	r0, r5
 8006106:	f000 fcc3 	bl	8006a90 <__mcmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	f73f ade4 	bgt.w	8005cd8 <_dtoa_r+0x418>
 8006110:	9b08      	ldr	r3, [sp, #32]
 8006112:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006116:	ea6f 0b03 	mvn.w	fp, r3
 800611a:	f04f 0900 	mov.w	r9, #0
 800611e:	4621      	mov	r1, r4
 8006120:	4630      	mov	r0, r6
 8006122:	f000 fa79 	bl	8006618 <_Bfree>
 8006126:	2f00      	cmp	r7, #0
 8006128:	f43f aea1 	beq.w	8005e6e <_dtoa_r+0x5ae>
 800612c:	f1b9 0f00 	cmp.w	r9, #0
 8006130:	d005      	beq.n	800613e <_dtoa_r+0x87e>
 8006132:	45b9      	cmp	r9, r7
 8006134:	d003      	beq.n	800613e <_dtoa_r+0x87e>
 8006136:	4649      	mov	r1, r9
 8006138:	4630      	mov	r0, r6
 800613a:	f000 fa6d 	bl	8006618 <_Bfree>
 800613e:	4639      	mov	r1, r7
 8006140:	4630      	mov	r0, r6
 8006142:	f000 fa69 	bl	8006618 <_Bfree>
 8006146:	e692      	b.n	8005e6e <_dtoa_r+0x5ae>
 8006148:	2400      	movs	r4, #0
 800614a:	4627      	mov	r7, r4
 800614c:	e7e0      	b.n	8006110 <_dtoa_r+0x850>
 800614e:	4693      	mov	fp, r2
 8006150:	4627      	mov	r7, r4
 8006152:	e5c1      	b.n	8005cd8 <_dtoa_r+0x418>
 8006154:	9b07      	ldr	r3, [sp, #28]
 8006156:	46ca      	mov	sl, r9
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8100 	beq.w	800635e <_dtoa_r+0xa9e>
 800615e:	f1b8 0f00 	cmp.w	r8, #0
 8006162:	dd05      	ble.n	8006170 <_dtoa_r+0x8b0>
 8006164:	4639      	mov	r1, r7
 8006166:	4642      	mov	r2, r8
 8006168:	4630      	mov	r0, r6
 800616a:	f000 fc25 	bl	80069b8 <__lshift>
 800616e:	4607      	mov	r7, r0
 8006170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d05d      	beq.n	8006232 <_dtoa_r+0x972>
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	4630      	mov	r0, r6
 800617a:	f000 fa0d 	bl	8006598 <_Balloc>
 800617e:	4680      	mov	r8, r0
 8006180:	b928      	cbnz	r0, 800618e <_dtoa_r+0x8ce>
 8006182:	4b82      	ldr	r3, [pc, #520]	; (800638c <_dtoa_r+0xacc>)
 8006184:	4602      	mov	r2, r0
 8006186:	f240 21ef 	movw	r1, #751	; 0x2ef
 800618a:	f7ff bbb1 	b.w	80058f0 <_dtoa_r+0x30>
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	3202      	adds	r2, #2
 8006192:	0092      	lsls	r2, r2, #2
 8006194:	f107 010c 	add.w	r1, r7, #12
 8006198:	300c      	adds	r0, #12
 800619a:	f000 ffa9 	bl	80070f0 <memcpy>
 800619e:	2201      	movs	r2, #1
 80061a0:	4641      	mov	r1, r8
 80061a2:	4630      	mov	r0, r6
 80061a4:	f000 fc08 	bl	80069b8 <__lshift>
 80061a8:	9b01      	ldr	r3, [sp, #4]
 80061aa:	3301      	adds	r3, #1
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	9b01      	ldr	r3, [sp, #4]
 80061b0:	4453      	add	r3, sl
 80061b2:	9308      	str	r3, [sp, #32]
 80061b4:	9b02      	ldr	r3, [sp, #8]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	46b9      	mov	r9, r7
 80061bc:	9307      	str	r3, [sp, #28]
 80061be:	4607      	mov	r7, r0
 80061c0:	9b04      	ldr	r3, [sp, #16]
 80061c2:	4621      	mov	r1, r4
 80061c4:	3b01      	subs	r3, #1
 80061c6:	4628      	mov	r0, r5
 80061c8:	9302      	str	r3, [sp, #8]
 80061ca:	f7ff faf1 	bl	80057b0 <quorem>
 80061ce:	4603      	mov	r3, r0
 80061d0:	3330      	adds	r3, #48	; 0x30
 80061d2:	9005      	str	r0, [sp, #20]
 80061d4:	4649      	mov	r1, r9
 80061d6:	4628      	mov	r0, r5
 80061d8:	9309      	str	r3, [sp, #36]	; 0x24
 80061da:	f000 fc59 	bl	8006a90 <__mcmp>
 80061de:	463a      	mov	r2, r7
 80061e0:	4682      	mov	sl, r0
 80061e2:	4621      	mov	r1, r4
 80061e4:	4630      	mov	r0, r6
 80061e6:	f000 fc6f 	bl	8006ac8 <__mdiff>
 80061ea:	68c2      	ldr	r2, [r0, #12]
 80061ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ee:	4680      	mov	r8, r0
 80061f0:	bb0a      	cbnz	r2, 8006236 <_dtoa_r+0x976>
 80061f2:	4601      	mov	r1, r0
 80061f4:	4628      	mov	r0, r5
 80061f6:	f000 fc4b 	bl	8006a90 <__mcmp>
 80061fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fc:	4602      	mov	r2, r0
 80061fe:	4641      	mov	r1, r8
 8006200:	4630      	mov	r0, r6
 8006202:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006206:	f000 fa07 	bl	8006618 <_Bfree>
 800620a:	9b06      	ldr	r3, [sp, #24]
 800620c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800620e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006212:	ea43 0102 	orr.w	r1, r3, r2
 8006216:	9b07      	ldr	r3, [sp, #28]
 8006218:	4319      	orrs	r1, r3
 800621a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621c:	d10d      	bne.n	800623a <_dtoa_r+0x97a>
 800621e:	2b39      	cmp	r3, #57	; 0x39
 8006220:	d029      	beq.n	8006276 <_dtoa_r+0x9b6>
 8006222:	f1ba 0f00 	cmp.w	sl, #0
 8006226:	dd01      	ble.n	800622c <_dtoa_r+0x96c>
 8006228:	9b05      	ldr	r3, [sp, #20]
 800622a:	3331      	adds	r3, #49	; 0x31
 800622c:	9a02      	ldr	r2, [sp, #8]
 800622e:	7013      	strb	r3, [r2, #0]
 8006230:	e775      	b.n	800611e <_dtoa_r+0x85e>
 8006232:	4638      	mov	r0, r7
 8006234:	e7b8      	b.n	80061a8 <_dtoa_r+0x8e8>
 8006236:	2201      	movs	r2, #1
 8006238:	e7e1      	b.n	80061fe <_dtoa_r+0x93e>
 800623a:	f1ba 0f00 	cmp.w	sl, #0
 800623e:	db06      	blt.n	800624e <_dtoa_r+0x98e>
 8006240:	9906      	ldr	r1, [sp, #24]
 8006242:	ea41 0a0a 	orr.w	sl, r1, sl
 8006246:	9907      	ldr	r1, [sp, #28]
 8006248:	ea5a 0a01 	orrs.w	sl, sl, r1
 800624c:	d120      	bne.n	8006290 <_dtoa_r+0x9d0>
 800624e:	2a00      	cmp	r2, #0
 8006250:	ddec      	ble.n	800622c <_dtoa_r+0x96c>
 8006252:	4629      	mov	r1, r5
 8006254:	2201      	movs	r2, #1
 8006256:	4630      	mov	r0, r6
 8006258:	9304      	str	r3, [sp, #16]
 800625a:	f000 fbad 	bl	80069b8 <__lshift>
 800625e:	4621      	mov	r1, r4
 8006260:	4605      	mov	r5, r0
 8006262:	f000 fc15 	bl	8006a90 <__mcmp>
 8006266:	2800      	cmp	r0, #0
 8006268:	9b04      	ldr	r3, [sp, #16]
 800626a:	dc02      	bgt.n	8006272 <_dtoa_r+0x9b2>
 800626c:	d1de      	bne.n	800622c <_dtoa_r+0x96c>
 800626e:	07da      	lsls	r2, r3, #31
 8006270:	d5dc      	bpl.n	800622c <_dtoa_r+0x96c>
 8006272:	2b39      	cmp	r3, #57	; 0x39
 8006274:	d1d8      	bne.n	8006228 <_dtoa_r+0x968>
 8006276:	9a02      	ldr	r2, [sp, #8]
 8006278:	2339      	movs	r3, #57	; 0x39
 800627a:	7013      	strb	r3, [r2, #0]
 800627c:	4643      	mov	r3, r8
 800627e:	4698      	mov	r8, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006286:	2a39      	cmp	r2, #57	; 0x39
 8006288:	d051      	beq.n	800632e <_dtoa_r+0xa6e>
 800628a:	3201      	adds	r2, #1
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	e746      	b.n	800611e <_dtoa_r+0x85e>
 8006290:	2a00      	cmp	r2, #0
 8006292:	dd03      	ble.n	800629c <_dtoa_r+0x9dc>
 8006294:	2b39      	cmp	r3, #57	; 0x39
 8006296:	d0ee      	beq.n	8006276 <_dtoa_r+0x9b6>
 8006298:	3301      	adds	r3, #1
 800629a:	e7c7      	b.n	800622c <_dtoa_r+0x96c>
 800629c:	9a04      	ldr	r2, [sp, #16]
 800629e:	9908      	ldr	r1, [sp, #32]
 80062a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80062a4:	428a      	cmp	r2, r1
 80062a6:	d02b      	beq.n	8006300 <_dtoa_r+0xa40>
 80062a8:	4629      	mov	r1, r5
 80062aa:	2300      	movs	r3, #0
 80062ac:	220a      	movs	r2, #10
 80062ae:	4630      	mov	r0, r6
 80062b0:	f000 f9d4 	bl	800665c <__multadd>
 80062b4:	45b9      	cmp	r9, r7
 80062b6:	4605      	mov	r5, r0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	f04f 020a 	mov.w	r2, #10
 80062c0:	4649      	mov	r1, r9
 80062c2:	4630      	mov	r0, r6
 80062c4:	d107      	bne.n	80062d6 <_dtoa_r+0xa16>
 80062c6:	f000 f9c9 	bl	800665c <__multadd>
 80062ca:	4681      	mov	r9, r0
 80062cc:	4607      	mov	r7, r0
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	3301      	adds	r3, #1
 80062d2:	9304      	str	r3, [sp, #16]
 80062d4:	e774      	b.n	80061c0 <_dtoa_r+0x900>
 80062d6:	f000 f9c1 	bl	800665c <__multadd>
 80062da:	4639      	mov	r1, r7
 80062dc:	4681      	mov	r9, r0
 80062de:	2300      	movs	r3, #0
 80062e0:	220a      	movs	r2, #10
 80062e2:	4630      	mov	r0, r6
 80062e4:	f000 f9ba 	bl	800665c <__multadd>
 80062e8:	4607      	mov	r7, r0
 80062ea:	e7f0      	b.n	80062ce <_dtoa_r+0xa0e>
 80062ec:	f1ba 0f00 	cmp.w	sl, #0
 80062f0:	9a01      	ldr	r2, [sp, #4]
 80062f2:	bfcc      	ite	gt
 80062f4:	46d0      	movgt	r8, sl
 80062f6:	f04f 0801 	movle.w	r8, #1
 80062fa:	4490      	add	r8, r2
 80062fc:	f04f 0900 	mov.w	r9, #0
 8006300:	4629      	mov	r1, r5
 8006302:	2201      	movs	r2, #1
 8006304:	4630      	mov	r0, r6
 8006306:	9302      	str	r3, [sp, #8]
 8006308:	f000 fb56 	bl	80069b8 <__lshift>
 800630c:	4621      	mov	r1, r4
 800630e:	4605      	mov	r5, r0
 8006310:	f000 fbbe 	bl	8006a90 <__mcmp>
 8006314:	2800      	cmp	r0, #0
 8006316:	dcb1      	bgt.n	800627c <_dtoa_r+0x9bc>
 8006318:	d102      	bne.n	8006320 <_dtoa_r+0xa60>
 800631a:	9b02      	ldr	r3, [sp, #8]
 800631c:	07db      	lsls	r3, r3, #31
 800631e:	d4ad      	bmi.n	800627c <_dtoa_r+0x9bc>
 8006320:	4643      	mov	r3, r8
 8006322:	4698      	mov	r8, r3
 8006324:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006328:	2a30      	cmp	r2, #48	; 0x30
 800632a:	d0fa      	beq.n	8006322 <_dtoa_r+0xa62>
 800632c:	e6f7      	b.n	800611e <_dtoa_r+0x85e>
 800632e:	9a01      	ldr	r2, [sp, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	d1a4      	bne.n	800627e <_dtoa_r+0x9be>
 8006334:	f10b 0b01 	add.w	fp, fp, #1
 8006338:	2331      	movs	r3, #49	; 0x31
 800633a:	e778      	b.n	800622e <_dtoa_r+0x96e>
 800633c:	4b14      	ldr	r3, [pc, #80]	; (8006390 <_dtoa_r+0xad0>)
 800633e:	f7ff bb2a 	b.w	8005996 <_dtoa_r+0xd6>
 8006342:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006344:	2b00      	cmp	r3, #0
 8006346:	f47f ab05 	bne.w	8005954 <_dtoa_r+0x94>
 800634a:	4b12      	ldr	r3, [pc, #72]	; (8006394 <_dtoa_r+0xad4>)
 800634c:	f7ff bb23 	b.w	8005996 <_dtoa_r+0xd6>
 8006350:	f1ba 0f00 	cmp.w	sl, #0
 8006354:	dc03      	bgt.n	800635e <_dtoa_r+0xa9e>
 8006356:	9b06      	ldr	r3, [sp, #24]
 8006358:	2b02      	cmp	r3, #2
 800635a:	f73f aec8 	bgt.w	80060ee <_dtoa_r+0x82e>
 800635e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006362:	4621      	mov	r1, r4
 8006364:	4628      	mov	r0, r5
 8006366:	f7ff fa23 	bl	80057b0 <quorem>
 800636a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800636e:	f808 3b01 	strb.w	r3, [r8], #1
 8006372:	9a01      	ldr	r2, [sp, #4]
 8006374:	eba8 0202 	sub.w	r2, r8, r2
 8006378:	4592      	cmp	sl, r2
 800637a:	ddb7      	ble.n	80062ec <_dtoa_r+0xa2c>
 800637c:	4629      	mov	r1, r5
 800637e:	2300      	movs	r3, #0
 8006380:	220a      	movs	r2, #10
 8006382:	4630      	mov	r0, r6
 8006384:	f000 f96a 	bl	800665c <__multadd>
 8006388:	4605      	mov	r5, r0
 800638a:	e7ea      	b.n	8006362 <_dtoa_r+0xaa2>
 800638c:	08007ad0 	.word	0x08007ad0
 8006390:	08007a30 	.word	0x08007a30
 8006394:	08007a54 	.word	0x08007a54

08006398 <_free_r>:
 8006398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800639a:	2900      	cmp	r1, #0
 800639c:	d044      	beq.n	8006428 <_free_r+0x90>
 800639e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a2:	9001      	str	r0, [sp, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f1a1 0404 	sub.w	r4, r1, #4
 80063aa:	bfb8      	it	lt
 80063ac:	18e4      	addlt	r4, r4, r3
 80063ae:	f000 f8e7 	bl	8006580 <__malloc_lock>
 80063b2:	4a1e      	ldr	r2, [pc, #120]	; (800642c <_free_r+0x94>)
 80063b4:	9801      	ldr	r0, [sp, #4]
 80063b6:	6813      	ldr	r3, [r2, #0]
 80063b8:	b933      	cbnz	r3, 80063c8 <_free_r+0x30>
 80063ba:	6063      	str	r3, [r4, #4]
 80063bc:	6014      	str	r4, [r2, #0]
 80063be:	b003      	add	sp, #12
 80063c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063c4:	f000 b8e2 	b.w	800658c <__malloc_unlock>
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d908      	bls.n	80063de <_free_r+0x46>
 80063cc:	6825      	ldr	r5, [r4, #0]
 80063ce:	1961      	adds	r1, r4, r5
 80063d0:	428b      	cmp	r3, r1
 80063d2:	bf01      	itttt	eq
 80063d4:	6819      	ldreq	r1, [r3, #0]
 80063d6:	685b      	ldreq	r3, [r3, #4]
 80063d8:	1949      	addeq	r1, r1, r5
 80063da:	6021      	streq	r1, [r4, #0]
 80063dc:	e7ed      	b.n	80063ba <_free_r+0x22>
 80063de:	461a      	mov	r2, r3
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	b10b      	cbz	r3, 80063e8 <_free_r+0x50>
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d9fa      	bls.n	80063de <_free_r+0x46>
 80063e8:	6811      	ldr	r1, [r2, #0]
 80063ea:	1855      	adds	r5, r2, r1
 80063ec:	42a5      	cmp	r5, r4
 80063ee:	d10b      	bne.n	8006408 <_free_r+0x70>
 80063f0:	6824      	ldr	r4, [r4, #0]
 80063f2:	4421      	add	r1, r4
 80063f4:	1854      	adds	r4, r2, r1
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	6011      	str	r1, [r2, #0]
 80063fa:	d1e0      	bne.n	80063be <_free_r+0x26>
 80063fc:	681c      	ldr	r4, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	6053      	str	r3, [r2, #4]
 8006402:	440c      	add	r4, r1
 8006404:	6014      	str	r4, [r2, #0]
 8006406:	e7da      	b.n	80063be <_free_r+0x26>
 8006408:	d902      	bls.n	8006410 <_free_r+0x78>
 800640a:	230c      	movs	r3, #12
 800640c:	6003      	str	r3, [r0, #0]
 800640e:	e7d6      	b.n	80063be <_free_r+0x26>
 8006410:	6825      	ldr	r5, [r4, #0]
 8006412:	1961      	adds	r1, r4, r5
 8006414:	428b      	cmp	r3, r1
 8006416:	bf04      	itt	eq
 8006418:	6819      	ldreq	r1, [r3, #0]
 800641a:	685b      	ldreq	r3, [r3, #4]
 800641c:	6063      	str	r3, [r4, #4]
 800641e:	bf04      	itt	eq
 8006420:	1949      	addeq	r1, r1, r5
 8006422:	6021      	streq	r1, [r4, #0]
 8006424:	6054      	str	r4, [r2, #4]
 8006426:	e7ca      	b.n	80063be <_free_r+0x26>
 8006428:	b003      	add	sp, #12
 800642a:	bd30      	pop	{r4, r5, pc}
 800642c:	20000524 	.word	0x20000524

08006430 <malloc>:
 8006430:	4b02      	ldr	r3, [pc, #8]	; (800643c <malloc+0xc>)
 8006432:	4601      	mov	r1, r0
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	f000 b823 	b.w	8006480 <_malloc_r>
 800643a:	bf00      	nop
 800643c:	20000068 	.word	0x20000068

08006440 <sbrk_aligned>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	4e0e      	ldr	r6, [pc, #56]	; (800647c <sbrk_aligned+0x3c>)
 8006444:	460c      	mov	r4, r1
 8006446:	6831      	ldr	r1, [r6, #0]
 8006448:	4605      	mov	r5, r0
 800644a:	b911      	cbnz	r1, 8006452 <sbrk_aligned+0x12>
 800644c:	f000 fe40 	bl	80070d0 <_sbrk_r>
 8006450:	6030      	str	r0, [r6, #0]
 8006452:	4621      	mov	r1, r4
 8006454:	4628      	mov	r0, r5
 8006456:	f000 fe3b 	bl	80070d0 <_sbrk_r>
 800645a:	1c43      	adds	r3, r0, #1
 800645c:	d00a      	beq.n	8006474 <sbrk_aligned+0x34>
 800645e:	1cc4      	adds	r4, r0, #3
 8006460:	f024 0403 	bic.w	r4, r4, #3
 8006464:	42a0      	cmp	r0, r4
 8006466:	d007      	beq.n	8006478 <sbrk_aligned+0x38>
 8006468:	1a21      	subs	r1, r4, r0
 800646a:	4628      	mov	r0, r5
 800646c:	f000 fe30 	bl	80070d0 <_sbrk_r>
 8006470:	3001      	adds	r0, #1
 8006472:	d101      	bne.n	8006478 <sbrk_aligned+0x38>
 8006474:	f04f 34ff 	mov.w	r4, #4294967295
 8006478:	4620      	mov	r0, r4
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	20000528 	.word	0x20000528

08006480 <_malloc_r>:
 8006480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006484:	1ccd      	adds	r5, r1, #3
 8006486:	f025 0503 	bic.w	r5, r5, #3
 800648a:	3508      	adds	r5, #8
 800648c:	2d0c      	cmp	r5, #12
 800648e:	bf38      	it	cc
 8006490:	250c      	movcc	r5, #12
 8006492:	2d00      	cmp	r5, #0
 8006494:	4607      	mov	r7, r0
 8006496:	db01      	blt.n	800649c <_malloc_r+0x1c>
 8006498:	42a9      	cmp	r1, r5
 800649a:	d905      	bls.n	80064a8 <_malloc_r+0x28>
 800649c:	230c      	movs	r3, #12
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	2600      	movs	r6, #0
 80064a2:	4630      	mov	r0, r6
 80064a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800657c <_malloc_r+0xfc>
 80064ac:	f000 f868 	bl	8006580 <__malloc_lock>
 80064b0:	f8d8 3000 	ldr.w	r3, [r8]
 80064b4:	461c      	mov	r4, r3
 80064b6:	bb5c      	cbnz	r4, 8006510 <_malloc_r+0x90>
 80064b8:	4629      	mov	r1, r5
 80064ba:	4638      	mov	r0, r7
 80064bc:	f7ff ffc0 	bl	8006440 <sbrk_aligned>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	4604      	mov	r4, r0
 80064c4:	d155      	bne.n	8006572 <_malloc_r+0xf2>
 80064c6:	f8d8 4000 	ldr.w	r4, [r8]
 80064ca:	4626      	mov	r6, r4
 80064cc:	2e00      	cmp	r6, #0
 80064ce:	d145      	bne.n	800655c <_malloc_r+0xdc>
 80064d0:	2c00      	cmp	r4, #0
 80064d2:	d048      	beq.n	8006566 <_malloc_r+0xe6>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	4631      	mov	r1, r6
 80064d8:	4638      	mov	r0, r7
 80064da:	eb04 0903 	add.w	r9, r4, r3
 80064de:	f000 fdf7 	bl	80070d0 <_sbrk_r>
 80064e2:	4581      	cmp	r9, r0
 80064e4:	d13f      	bne.n	8006566 <_malloc_r+0xe6>
 80064e6:	6821      	ldr	r1, [r4, #0]
 80064e8:	1a6d      	subs	r5, r5, r1
 80064ea:	4629      	mov	r1, r5
 80064ec:	4638      	mov	r0, r7
 80064ee:	f7ff ffa7 	bl	8006440 <sbrk_aligned>
 80064f2:	3001      	adds	r0, #1
 80064f4:	d037      	beq.n	8006566 <_malloc_r+0xe6>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	442b      	add	r3, r5
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d038      	beq.n	8006576 <_malloc_r+0xf6>
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	42a2      	cmp	r2, r4
 8006508:	d12b      	bne.n	8006562 <_malloc_r+0xe2>
 800650a:	2200      	movs	r2, #0
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	e00f      	b.n	8006530 <_malloc_r+0xb0>
 8006510:	6822      	ldr	r2, [r4, #0]
 8006512:	1b52      	subs	r2, r2, r5
 8006514:	d41f      	bmi.n	8006556 <_malloc_r+0xd6>
 8006516:	2a0b      	cmp	r2, #11
 8006518:	d917      	bls.n	800654a <_malloc_r+0xca>
 800651a:	1961      	adds	r1, r4, r5
 800651c:	42a3      	cmp	r3, r4
 800651e:	6025      	str	r5, [r4, #0]
 8006520:	bf18      	it	ne
 8006522:	6059      	strne	r1, [r3, #4]
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	bf08      	it	eq
 8006528:	f8c8 1000 	streq.w	r1, [r8]
 800652c:	5162      	str	r2, [r4, r5]
 800652e:	604b      	str	r3, [r1, #4]
 8006530:	4638      	mov	r0, r7
 8006532:	f104 060b 	add.w	r6, r4, #11
 8006536:	f000 f829 	bl	800658c <__malloc_unlock>
 800653a:	f026 0607 	bic.w	r6, r6, #7
 800653e:	1d23      	adds	r3, r4, #4
 8006540:	1af2      	subs	r2, r6, r3
 8006542:	d0ae      	beq.n	80064a2 <_malloc_r+0x22>
 8006544:	1b9b      	subs	r3, r3, r6
 8006546:	50a3      	str	r3, [r4, r2]
 8006548:	e7ab      	b.n	80064a2 <_malloc_r+0x22>
 800654a:	42a3      	cmp	r3, r4
 800654c:	6862      	ldr	r2, [r4, #4]
 800654e:	d1dd      	bne.n	800650c <_malloc_r+0x8c>
 8006550:	f8c8 2000 	str.w	r2, [r8]
 8006554:	e7ec      	b.n	8006530 <_malloc_r+0xb0>
 8006556:	4623      	mov	r3, r4
 8006558:	6864      	ldr	r4, [r4, #4]
 800655a:	e7ac      	b.n	80064b6 <_malloc_r+0x36>
 800655c:	4634      	mov	r4, r6
 800655e:	6876      	ldr	r6, [r6, #4]
 8006560:	e7b4      	b.n	80064cc <_malloc_r+0x4c>
 8006562:	4613      	mov	r3, r2
 8006564:	e7cc      	b.n	8006500 <_malloc_r+0x80>
 8006566:	230c      	movs	r3, #12
 8006568:	603b      	str	r3, [r7, #0]
 800656a:	4638      	mov	r0, r7
 800656c:	f000 f80e 	bl	800658c <__malloc_unlock>
 8006570:	e797      	b.n	80064a2 <_malloc_r+0x22>
 8006572:	6025      	str	r5, [r4, #0]
 8006574:	e7dc      	b.n	8006530 <_malloc_r+0xb0>
 8006576:	605b      	str	r3, [r3, #4]
 8006578:	deff      	udf	#255	; 0xff
 800657a:	bf00      	nop
 800657c:	20000524 	.word	0x20000524

08006580 <__malloc_lock>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__malloc_lock+0x8>)
 8006582:	f7ff b913 	b.w	80057ac <__retarget_lock_acquire_recursive>
 8006586:	bf00      	nop
 8006588:	20000520 	.word	0x20000520

0800658c <__malloc_unlock>:
 800658c:	4801      	ldr	r0, [pc, #4]	; (8006594 <__malloc_unlock+0x8>)
 800658e:	f7ff b90e 	b.w	80057ae <__retarget_lock_release_recursive>
 8006592:	bf00      	nop
 8006594:	20000520 	.word	0x20000520

08006598 <_Balloc>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	69c6      	ldr	r6, [r0, #28]
 800659c:	4604      	mov	r4, r0
 800659e:	460d      	mov	r5, r1
 80065a0:	b976      	cbnz	r6, 80065c0 <_Balloc+0x28>
 80065a2:	2010      	movs	r0, #16
 80065a4:	f7ff ff44 	bl	8006430 <malloc>
 80065a8:	4602      	mov	r2, r0
 80065aa:	61e0      	str	r0, [r4, #28]
 80065ac:	b920      	cbnz	r0, 80065b8 <_Balloc+0x20>
 80065ae:	4b18      	ldr	r3, [pc, #96]	; (8006610 <_Balloc+0x78>)
 80065b0:	4818      	ldr	r0, [pc, #96]	; (8006614 <_Balloc+0x7c>)
 80065b2:	216b      	movs	r1, #107	; 0x6b
 80065b4:	f000 fdaa 	bl	800710c <__assert_func>
 80065b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065bc:	6006      	str	r6, [r0, #0]
 80065be:	60c6      	str	r6, [r0, #12]
 80065c0:	69e6      	ldr	r6, [r4, #28]
 80065c2:	68f3      	ldr	r3, [r6, #12]
 80065c4:	b183      	cbz	r3, 80065e8 <_Balloc+0x50>
 80065c6:	69e3      	ldr	r3, [r4, #28]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065ce:	b9b8      	cbnz	r0, 8006600 <_Balloc+0x68>
 80065d0:	2101      	movs	r1, #1
 80065d2:	fa01 f605 	lsl.w	r6, r1, r5
 80065d6:	1d72      	adds	r2, r6, #5
 80065d8:	0092      	lsls	r2, r2, #2
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 fdb4 	bl	8007148 <_calloc_r>
 80065e0:	b160      	cbz	r0, 80065fc <_Balloc+0x64>
 80065e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065e6:	e00e      	b.n	8006606 <_Balloc+0x6e>
 80065e8:	2221      	movs	r2, #33	; 0x21
 80065ea:	2104      	movs	r1, #4
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 fdab 	bl	8007148 <_calloc_r>
 80065f2:	69e3      	ldr	r3, [r4, #28]
 80065f4:	60f0      	str	r0, [r6, #12]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e4      	bne.n	80065c6 <_Balloc+0x2e>
 80065fc:	2000      	movs	r0, #0
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
 8006600:	6802      	ldr	r2, [r0, #0]
 8006602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006606:	2300      	movs	r3, #0
 8006608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800660c:	e7f7      	b.n	80065fe <_Balloc+0x66>
 800660e:	bf00      	nop
 8006610:	08007a61 	.word	0x08007a61
 8006614:	08007ae1 	.word	0x08007ae1

08006618 <_Bfree>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	69c6      	ldr	r6, [r0, #28]
 800661c:	4605      	mov	r5, r0
 800661e:	460c      	mov	r4, r1
 8006620:	b976      	cbnz	r6, 8006640 <_Bfree+0x28>
 8006622:	2010      	movs	r0, #16
 8006624:	f7ff ff04 	bl	8006430 <malloc>
 8006628:	4602      	mov	r2, r0
 800662a:	61e8      	str	r0, [r5, #28]
 800662c:	b920      	cbnz	r0, 8006638 <_Bfree+0x20>
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <_Bfree+0x3c>)
 8006630:	4809      	ldr	r0, [pc, #36]	; (8006658 <_Bfree+0x40>)
 8006632:	218f      	movs	r1, #143	; 0x8f
 8006634:	f000 fd6a 	bl	800710c <__assert_func>
 8006638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800663c:	6006      	str	r6, [r0, #0]
 800663e:	60c6      	str	r6, [r0, #12]
 8006640:	b13c      	cbz	r4, 8006652 <_Bfree+0x3a>
 8006642:	69eb      	ldr	r3, [r5, #28]
 8006644:	6862      	ldr	r2, [r4, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800664c:	6021      	str	r1, [r4, #0]
 800664e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	08007a61 	.word	0x08007a61
 8006658:	08007ae1 	.word	0x08007ae1

0800665c <__multadd>:
 800665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006660:	690d      	ldr	r5, [r1, #16]
 8006662:	4607      	mov	r7, r0
 8006664:	460c      	mov	r4, r1
 8006666:	461e      	mov	r6, r3
 8006668:	f101 0c14 	add.w	ip, r1, #20
 800666c:	2000      	movs	r0, #0
 800666e:	f8dc 3000 	ldr.w	r3, [ip]
 8006672:	b299      	uxth	r1, r3
 8006674:	fb02 6101 	mla	r1, r2, r1, r6
 8006678:	0c1e      	lsrs	r6, r3, #16
 800667a:	0c0b      	lsrs	r3, r1, #16
 800667c:	fb02 3306 	mla	r3, r2, r6, r3
 8006680:	b289      	uxth	r1, r1
 8006682:	3001      	adds	r0, #1
 8006684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006688:	4285      	cmp	r5, r0
 800668a:	f84c 1b04 	str.w	r1, [ip], #4
 800668e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006692:	dcec      	bgt.n	800666e <__multadd+0x12>
 8006694:	b30e      	cbz	r6, 80066da <__multadd+0x7e>
 8006696:	68a3      	ldr	r3, [r4, #8]
 8006698:	42ab      	cmp	r3, r5
 800669a:	dc19      	bgt.n	80066d0 <__multadd+0x74>
 800669c:	6861      	ldr	r1, [r4, #4]
 800669e:	4638      	mov	r0, r7
 80066a0:	3101      	adds	r1, #1
 80066a2:	f7ff ff79 	bl	8006598 <_Balloc>
 80066a6:	4680      	mov	r8, r0
 80066a8:	b928      	cbnz	r0, 80066b6 <__multadd+0x5a>
 80066aa:	4602      	mov	r2, r0
 80066ac:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <__multadd+0x84>)
 80066ae:	480d      	ldr	r0, [pc, #52]	; (80066e4 <__multadd+0x88>)
 80066b0:	21ba      	movs	r1, #186	; 0xba
 80066b2:	f000 fd2b 	bl	800710c <__assert_func>
 80066b6:	6922      	ldr	r2, [r4, #16]
 80066b8:	3202      	adds	r2, #2
 80066ba:	f104 010c 	add.w	r1, r4, #12
 80066be:	0092      	lsls	r2, r2, #2
 80066c0:	300c      	adds	r0, #12
 80066c2:	f000 fd15 	bl	80070f0 <memcpy>
 80066c6:	4621      	mov	r1, r4
 80066c8:	4638      	mov	r0, r7
 80066ca:	f7ff ffa5 	bl	8006618 <_Bfree>
 80066ce:	4644      	mov	r4, r8
 80066d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066d4:	3501      	adds	r5, #1
 80066d6:	615e      	str	r6, [r3, #20]
 80066d8:	6125      	str	r5, [r4, #16]
 80066da:	4620      	mov	r0, r4
 80066dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e0:	08007ad0 	.word	0x08007ad0
 80066e4:	08007ae1 	.word	0x08007ae1

080066e8 <__hi0bits>:
 80066e8:	0c03      	lsrs	r3, r0, #16
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	b9d3      	cbnz	r3, 8006724 <__hi0bits+0x3c>
 80066ee:	0400      	lsls	r0, r0, #16
 80066f0:	2310      	movs	r3, #16
 80066f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80066f6:	bf04      	itt	eq
 80066f8:	0200      	lsleq	r0, r0, #8
 80066fa:	3308      	addeq	r3, #8
 80066fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006700:	bf04      	itt	eq
 8006702:	0100      	lsleq	r0, r0, #4
 8006704:	3304      	addeq	r3, #4
 8006706:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800670a:	bf04      	itt	eq
 800670c:	0080      	lsleq	r0, r0, #2
 800670e:	3302      	addeq	r3, #2
 8006710:	2800      	cmp	r0, #0
 8006712:	db05      	blt.n	8006720 <__hi0bits+0x38>
 8006714:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006718:	f103 0301 	add.w	r3, r3, #1
 800671c:	bf08      	it	eq
 800671e:	2320      	moveq	r3, #32
 8006720:	4618      	mov	r0, r3
 8006722:	4770      	bx	lr
 8006724:	2300      	movs	r3, #0
 8006726:	e7e4      	b.n	80066f2 <__hi0bits+0xa>

08006728 <__lo0bits>:
 8006728:	6803      	ldr	r3, [r0, #0]
 800672a:	f013 0207 	ands.w	r2, r3, #7
 800672e:	d00c      	beq.n	800674a <__lo0bits+0x22>
 8006730:	07d9      	lsls	r1, r3, #31
 8006732:	d422      	bmi.n	800677a <__lo0bits+0x52>
 8006734:	079a      	lsls	r2, r3, #30
 8006736:	bf49      	itett	mi
 8006738:	085b      	lsrmi	r3, r3, #1
 800673a:	089b      	lsrpl	r3, r3, #2
 800673c:	6003      	strmi	r3, [r0, #0]
 800673e:	2201      	movmi	r2, #1
 8006740:	bf5c      	itt	pl
 8006742:	6003      	strpl	r3, [r0, #0]
 8006744:	2202      	movpl	r2, #2
 8006746:	4610      	mov	r0, r2
 8006748:	4770      	bx	lr
 800674a:	b299      	uxth	r1, r3
 800674c:	b909      	cbnz	r1, 8006752 <__lo0bits+0x2a>
 800674e:	0c1b      	lsrs	r3, r3, #16
 8006750:	2210      	movs	r2, #16
 8006752:	b2d9      	uxtb	r1, r3
 8006754:	b909      	cbnz	r1, 800675a <__lo0bits+0x32>
 8006756:	3208      	adds	r2, #8
 8006758:	0a1b      	lsrs	r3, r3, #8
 800675a:	0719      	lsls	r1, r3, #28
 800675c:	bf04      	itt	eq
 800675e:	091b      	lsreq	r3, r3, #4
 8006760:	3204      	addeq	r2, #4
 8006762:	0799      	lsls	r1, r3, #30
 8006764:	bf04      	itt	eq
 8006766:	089b      	lsreq	r3, r3, #2
 8006768:	3202      	addeq	r2, #2
 800676a:	07d9      	lsls	r1, r3, #31
 800676c:	d403      	bmi.n	8006776 <__lo0bits+0x4e>
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	f102 0201 	add.w	r2, r2, #1
 8006774:	d003      	beq.n	800677e <__lo0bits+0x56>
 8006776:	6003      	str	r3, [r0, #0]
 8006778:	e7e5      	b.n	8006746 <__lo0bits+0x1e>
 800677a:	2200      	movs	r2, #0
 800677c:	e7e3      	b.n	8006746 <__lo0bits+0x1e>
 800677e:	2220      	movs	r2, #32
 8006780:	e7e1      	b.n	8006746 <__lo0bits+0x1e>
	...

08006784 <__i2b>:
 8006784:	b510      	push	{r4, lr}
 8006786:	460c      	mov	r4, r1
 8006788:	2101      	movs	r1, #1
 800678a:	f7ff ff05 	bl	8006598 <_Balloc>
 800678e:	4602      	mov	r2, r0
 8006790:	b928      	cbnz	r0, 800679e <__i2b+0x1a>
 8006792:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <__i2b+0x24>)
 8006794:	4805      	ldr	r0, [pc, #20]	; (80067ac <__i2b+0x28>)
 8006796:	f240 1145 	movw	r1, #325	; 0x145
 800679a:	f000 fcb7 	bl	800710c <__assert_func>
 800679e:	2301      	movs	r3, #1
 80067a0:	6144      	str	r4, [r0, #20]
 80067a2:	6103      	str	r3, [r0, #16]
 80067a4:	bd10      	pop	{r4, pc}
 80067a6:	bf00      	nop
 80067a8:	08007ad0 	.word	0x08007ad0
 80067ac:	08007ae1 	.word	0x08007ae1

080067b0 <__multiply>:
 80067b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	4691      	mov	r9, r2
 80067b6:	690a      	ldr	r2, [r1, #16]
 80067b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80067bc:	429a      	cmp	r2, r3
 80067be:	bfb8      	it	lt
 80067c0:	460b      	movlt	r3, r1
 80067c2:	460c      	mov	r4, r1
 80067c4:	bfbc      	itt	lt
 80067c6:	464c      	movlt	r4, r9
 80067c8:	4699      	movlt	r9, r3
 80067ca:	6927      	ldr	r7, [r4, #16]
 80067cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80067d0:	68a3      	ldr	r3, [r4, #8]
 80067d2:	6861      	ldr	r1, [r4, #4]
 80067d4:	eb07 060a 	add.w	r6, r7, sl
 80067d8:	42b3      	cmp	r3, r6
 80067da:	b085      	sub	sp, #20
 80067dc:	bfb8      	it	lt
 80067de:	3101      	addlt	r1, #1
 80067e0:	f7ff feda 	bl	8006598 <_Balloc>
 80067e4:	b930      	cbnz	r0, 80067f4 <__multiply+0x44>
 80067e6:	4602      	mov	r2, r0
 80067e8:	4b44      	ldr	r3, [pc, #272]	; (80068fc <__multiply+0x14c>)
 80067ea:	4845      	ldr	r0, [pc, #276]	; (8006900 <__multiply+0x150>)
 80067ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80067f0:	f000 fc8c 	bl	800710c <__assert_func>
 80067f4:	f100 0514 	add.w	r5, r0, #20
 80067f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067fc:	462b      	mov	r3, r5
 80067fe:	2200      	movs	r2, #0
 8006800:	4543      	cmp	r3, r8
 8006802:	d321      	bcc.n	8006848 <__multiply+0x98>
 8006804:	f104 0314 	add.w	r3, r4, #20
 8006808:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800680c:	f109 0314 	add.w	r3, r9, #20
 8006810:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006814:	9202      	str	r2, [sp, #8]
 8006816:	1b3a      	subs	r2, r7, r4
 8006818:	3a15      	subs	r2, #21
 800681a:	f022 0203 	bic.w	r2, r2, #3
 800681e:	3204      	adds	r2, #4
 8006820:	f104 0115 	add.w	r1, r4, #21
 8006824:	428f      	cmp	r7, r1
 8006826:	bf38      	it	cc
 8006828:	2204      	movcc	r2, #4
 800682a:	9201      	str	r2, [sp, #4]
 800682c:	9a02      	ldr	r2, [sp, #8]
 800682e:	9303      	str	r3, [sp, #12]
 8006830:	429a      	cmp	r2, r3
 8006832:	d80c      	bhi.n	800684e <__multiply+0x9e>
 8006834:	2e00      	cmp	r6, #0
 8006836:	dd03      	ble.n	8006840 <__multiply+0x90>
 8006838:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800683c:	2b00      	cmp	r3, #0
 800683e:	d05b      	beq.n	80068f8 <__multiply+0x148>
 8006840:	6106      	str	r6, [r0, #16]
 8006842:	b005      	add	sp, #20
 8006844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006848:	f843 2b04 	str.w	r2, [r3], #4
 800684c:	e7d8      	b.n	8006800 <__multiply+0x50>
 800684e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006852:	f1ba 0f00 	cmp.w	sl, #0
 8006856:	d024      	beq.n	80068a2 <__multiply+0xf2>
 8006858:	f104 0e14 	add.w	lr, r4, #20
 800685c:	46a9      	mov	r9, r5
 800685e:	f04f 0c00 	mov.w	ip, #0
 8006862:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006866:	f8d9 1000 	ldr.w	r1, [r9]
 800686a:	fa1f fb82 	uxth.w	fp, r2
 800686e:	b289      	uxth	r1, r1
 8006870:	fb0a 110b 	mla	r1, sl, fp, r1
 8006874:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006878:	f8d9 2000 	ldr.w	r2, [r9]
 800687c:	4461      	add	r1, ip
 800687e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006882:	fb0a c20b 	mla	r2, sl, fp, ip
 8006886:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800688a:	b289      	uxth	r1, r1
 800688c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006890:	4577      	cmp	r7, lr
 8006892:	f849 1b04 	str.w	r1, [r9], #4
 8006896:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800689a:	d8e2      	bhi.n	8006862 <__multiply+0xb2>
 800689c:	9a01      	ldr	r2, [sp, #4]
 800689e:	f845 c002 	str.w	ip, [r5, r2]
 80068a2:	9a03      	ldr	r2, [sp, #12]
 80068a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068a8:	3304      	adds	r3, #4
 80068aa:	f1b9 0f00 	cmp.w	r9, #0
 80068ae:	d021      	beq.n	80068f4 <__multiply+0x144>
 80068b0:	6829      	ldr	r1, [r5, #0]
 80068b2:	f104 0c14 	add.w	ip, r4, #20
 80068b6:	46ae      	mov	lr, r5
 80068b8:	f04f 0a00 	mov.w	sl, #0
 80068bc:	f8bc b000 	ldrh.w	fp, [ip]
 80068c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80068c4:	fb09 220b 	mla	r2, r9, fp, r2
 80068c8:	4452      	add	r2, sl
 80068ca:	b289      	uxth	r1, r1
 80068cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068d0:	f84e 1b04 	str.w	r1, [lr], #4
 80068d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80068d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068dc:	f8be 1000 	ldrh.w	r1, [lr]
 80068e0:	fb09 110a 	mla	r1, r9, sl, r1
 80068e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80068e8:	4567      	cmp	r7, ip
 80068ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068ee:	d8e5      	bhi.n	80068bc <__multiply+0x10c>
 80068f0:	9a01      	ldr	r2, [sp, #4]
 80068f2:	50a9      	str	r1, [r5, r2]
 80068f4:	3504      	adds	r5, #4
 80068f6:	e799      	b.n	800682c <__multiply+0x7c>
 80068f8:	3e01      	subs	r6, #1
 80068fa:	e79b      	b.n	8006834 <__multiply+0x84>
 80068fc:	08007ad0 	.word	0x08007ad0
 8006900:	08007ae1 	.word	0x08007ae1

08006904 <__pow5mult>:
 8006904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006908:	4615      	mov	r5, r2
 800690a:	f012 0203 	ands.w	r2, r2, #3
 800690e:	4606      	mov	r6, r0
 8006910:	460f      	mov	r7, r1
 8006912:	d007      	beq.n	8006924 <__pow5mult+0x20>
 8006914:	4c25      	ldr	r4, [pc, #148]	; (80069ac <__pow5mult+0xa8>)
 8006916:	3a01      	subs	r2, #1
 8006918:	2300      	movs	r3, #0
 800691a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800691e:	f7ff fe9d 	bl	800665c <__multadd>
 8006922:	4607      	mov	r7, r0
 8006924:	10ad      	asrs	r5, r5, #2
 8006926:	d03d      	beq.n	80069a4 <__pow5mult+0xa0>
 8006928:	69f4      	ldr	r4, [r6, #28]
 800692a:	b97c      	cbnz	r4, 800694c <__pow5mult+0x48>
 800692c:	2010      	movs	r0, #16
 800692e:	f7ff fd7f 	bl	8006430 <malloc>
 8006932:	4602      	mov	r2, r0
 8006934:	61f0      	str	r0, [r6, #28]
 8006936:	b928      	cbnz	r0, 8006944 <__pow5mult+0x40>
 8006938:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <__pow5mult+0xac>)
 800693a:	481e      	ldr	r0, [pc, #120]	; (80069b4 <__pow5mult+0xb0>)
 800693c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006940:	f000 fbe4 	bl	800710c <__assert_func>
 8006944:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006948:	6004      	str	r4, [r0, #0]
 800694a:	60c4      	str	r4, [r0, #12]
 800694c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006950:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006954:	b94c      	cbnz	r4, 800696a <__pow5mult+0x66>
 8006956:	f240 2171 	movw	r1, #625	; 0x271
 800695a:	4630      	mov	r0, r6
 800695c:	f7ff ff12 	bl	8006784 <__i2b>
 8006960:	2300      	movs	r3, #0
 8006962:	f8c8 0008 	str.w	r0, [r8, #8]
 8006966:	4604      	mov	r4, r0
 8006968:	6003      	str	r3, [r0, #0]
 800696a:	f04f 0900 	mov.w	r9, #0
 800696e:	07eb      	lsls	r3, r5, #31
 8006970:	d50a      	bpl.n	8006988 <__pow5mult+0x84>
 8006972:	4639      	mov	r1, r7
 8006974:	4622      	mov	r2, r4
 8006976:	4630      	mov	r0, r6
 8006978:	f7ff ff1a 	bl	80067b0 <__multiply>
 800697c:	4639      	mov	r1, r7
 800697e:	4680      	mov	r8, r0
 8006980:	4630      	mov	r0, r6
 8006982:	f7ff fe49 	bl	8006618 <_Bfree>
 8006986:	4647      	mov	r7, r8
 8006988:	106d      	asrs	r5, r5, #1
 800698a:	d00b      	beq.n	80069a4 <__pow5mult+0xa0>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	b938      	cbnz	r0, 80069a0 <__pow5mult+0x9c>
 8006990:	4622      	mov	r2, r4
 8006992:	4621      	mov	r1, r4
 8006994:	4630      	mov	r0, r6
 8006996:	f7ff ff0b 	bl	80067b0 <__multiply>
 800699a:	6020      	str	r0, [r4, #0]
 800699c:	f8c0 9000 	str.w	r9, [r0]
 80069a0:	4604      	mov	r4, r0
 80069a2:	e7e4      	b.n	800696e <__pow5mult+0x6a>
 80069a4:	4638      	mov	r0, r7
 80069a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069aa:	bf00      	nop
 80069ac:	08007c30 	.word	0x08007c30
 80069b0:	08007a61 	.word	0x08007a61
 80069b4:	08007ae1 	.word	0x08007ae1

080069b8 <__lshift>:
 80069b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069bc:	460c      	mov	r4, r1
 80069be:	6849      	ldr	r1, [r1, #4]
 80069c0:	6923      	ldr	r3, [r4, #16]
 80069c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069c6:	68a3      	ldr	r3, [r4, #8]
 80069c8:	4607      	mov	r7, r0
 80069ca:	4691      	mov	r9, r2
 80069cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069d0:	f108 0601 	add.w	r6, r8, #1
 80069d4:	42b3      	cmp	r3, r6
 80069d6:	db0b      	blt.n	80069f0 <__lshift+0x38>
 80069d8:	4638      	mov	r0, r7
 80069da:	f7ff fddd 	bl	8006598 <_Balloc>
 80069de:	4605      	mov	r5, r0
 80069e0:	b948      	cbnz	r0, 80069f6 <__lshift+0x3e>
 80069e2:	4602      	mov	r2, r0
 80069e4:	4b28      	ldr	r3, [pc, #160]	; (8006a88 <__lshift+0xd0>)
 80069e6:	4829      	ldr	r0, [pc, #164]	; (8006a8c <__lshift+0xd4>)
 80069e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80069ec:	f000 fb8e 	bl	800710c <__assert_func>
 80069f0:	3101      	adds	r1, #1
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	e7ee      	b.n	80069d4 <__lshift+0x1c>
 80069f6:	2300      	movs	r3, #0
 80069f8:	f100 0114 	add.w	r1, r0, #20
 80069fc:	f100 0210 	add.w	r2, r0, #16
 8006a00:	4618      	mov	r0, r3
 8006a02:	4553      	cmp	r3, sl
 8006a04:	db33      	blt.n	8006a6e <__lshift+0xb6>
 8006a06:	6920      	ldr	r0, [r4, #16]
 8006a08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a0c:	f104 0314 	add.w	r3, r4, #20
 8006a10:	f019 091f 	ands.w	r9, r9, #31
 8006a14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a1c:	d02b      	beq.n	8006a76 <__lshift+0xbe>
 8006a1e:	f1c9 0e20 	rsb	lr, r9, #32
 8006a22:	468a      	mov	sl, r1
 8006a24:	2200      	movs	r2, #0
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	fa00 f009 	lsl.w	r0, r0, r9
 8006a2c:	4310      	orrs	r0, r2
 8006a2e:	f84a 0b04 	str.w	r0, [sl], #4
 8006a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a36:	459c      	cmp	ip, r3
 8006a38:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a3c:	d8f3      	bhi.n	8006a26 <__lshift+0x6e>
 8006a3e:	ebac 0304 	sub.w	r3, ip, r4
 8006a42:	3b15      	subs	r3, #21
 8006a44:	f023 0303 	bic.w	r3, r3, #3
 8006a48:	3304      	adds	r3, #4
 8006a4a:	f104 0015 	add.w	r0, r4, #21
 8006a4e:	4584      	cmp	ip, r0
 8006a50:	bf38      	it	cc
 8006a52:	2304      	movcc	r3, #4
 8006a54:	50ca      	str	r2, [r1, r3]
 8006a56:	b10a      	cbz	r2, 8006a5c <__lshift+0xa4>
 8006a58:	f108 0602 	add.w	r6, r8, #2
 8006a5c:	3e01      	subs	r6, #1
 8006a5e:	4638      	mov	r0, r7
 8006a60:	612e      	str	r6, [r5, #16]
 8006a62:	4621      	mov	r1, r4
 8006a64:	f7ff fdd8 	bl	8006618 <_Bfree>
 8006a68:	4628      	mov	r0, r5
 8006a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a72:	3301      	adds	r3, #1
 8006a74:	e7c5      	b.n	8006a02 <__lshift+0x4a>
 8006a76:	3904      	subs	r1, #4
 8006a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a80:	459c      	cmp	ip, r3
 8006a82:	d8f9      	bhi.n	8006a78 <__lshift+0xc0>
 8006a84:	e7ea      	b.n	8006a5c <__lshift+0xa4>
 8006a86:	bf00      	nop
 8006a88:	08007ad0 	.word	0x08007ad0
 8006a8c:	08007ae1 	.word	0x08007ae1

08006a90 <__mcmp>:
 8006a90:	b530      	push	{r4, r5, lr}
 8006a92:	6902      	ldr	r2, [r0, #16]
 8006a94:	690c      	ldr	r4, [r1, #16]
 8006a96:	1b12      	subs	r2, r2, r4
 8006a98:	d10e      	bne.n	8006ab8 <__mcmp+0x28>
 8006a9a:	f100 0314 	add.w	r3, r0, #20
 8006a9e:	3114      	adds	r1, #20
 8006aa0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006aa4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006aa8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006aac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ab0:	42a5      	cmp	r5, r4
 8006ab2:	d003      	beq.n	8006abc <__mcmp+0x2c>
 8006ab4:	d305      	bcc.n	8006ac2 <__mcmp+0x32>
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4610      	mov	r0, r2
 8006aba:	bd30      	pop	{r4, r5, pc}
 8006abc:	4283      	cmp	r3, r0
 8006abe:	d3f3      	bcc.n	8006aa8 <__mcmp+0x18>
 8006ac0:	e7fa      	b.n	8006ab8 <__mcmp+0x28>
 8006ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac6:	e7f7      	b.n	8006ab8 <__mcmp+0x28>

08006ac8 <__mdiff>:
 8006ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006acc:	460c      	mov	r4, r1
 8006ace:	4606      	mov	r6, r0
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	4690      	mov	r8, r2
 8006ad6:	f7ff ffdb 	bl	8006a90 <__mcmp>
 8006ada:	1e05      	subs	r5, r0, #0
 8006adc:	d110      	bne.n	8006b00 <__mdiff+0x38>
 8006ade:	4629      	mov	r1, r5
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f7ff fd59 	bl	8006598 <_Balloc>
 8006ae6:	b930      	cbnz	r0, 8006af6 <__mdiff+0x2e>
 8006ae8:	4b3a      	ldr	r3, [pc, #232]	; (8006bd4 <__mdiff+0x10c>)
 8006aea:	4602      	mov	r2, r0
 8006aec:	f240 2137 	movw	r1, #567	; 0x237
 8006af0:	4839      	ldr	r0, [pc, #228]	; (8006bd8 <__mdiff+0x110>)
 8006af2:	f000 fb0b 	bl	800710c <__assert_func>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006afc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b00:	bfa4      	itt	ge
 8006b02:	4643      	movge	r3, r8
 8006b04:	46a0      	movge	r8, r4
 8006b06:	4630      	mov	r0, r6
 8006b08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006b0c:	bfa6      	itte	ge
 8006b0e:	461c      	movge	r4, r3
 8006b10:	2500      	movge	r5, #0
 8006b12:	2501      	movlt	r5, #1
 8006b14:	f7ff fd40 	bl	8006598 <_Balloc>
 8006b18:	b920      	cbnz	r0, 8006b24 <__mdiff+0x5c>
 8006b1a:	4b2e      	ldr	r3, [pc, #184]	; (8006bd4 <__mdiff+0x10c>)
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	f240 2145 	movw	r1, #581	; 0x245
 8006b22:	e7e5      	b.n	8006af0 <__mdiff+0x28>
 8006b24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006b28:	6926      	ldr	r6, [r4, #16]
 8006b2a:	60c5      	str	r5, [r0, #12]
 8006b2c:	f104 0914 	add.w	r9, r4, #20
 8006b30:	f108 0514 	add.w	r5, r8, #20
 8006b34:	f100 0e14 	add.w	lr, r0, #20
 8006b38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006b3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b40:	f108 0210 	add.w	r2, r8, #16
 8006b44:	46f2      	mov	sl, lr
 8006b46:	2100      	movs	r1, #0
 8006b48:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b50:	fa11 f88b 	uxtah	r8, r1, fp
 8006b54:	b299      	uxth	r1, r3
 8006b56:	0c1b      	lsrs	r3, r3, #16
 8006b58:	eba8 0801 	sub.w	r8, r8, r1
 8006b5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006b64:	fa1f f888 	uxth.w	r8, r8
 8006b68:	1419      	asrs	r1, r3, #16
 8006b6a:	454e      	cmp	r6, r9
 8006b6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b70:	f84a 3b04 	str.w	r3, [sl], #4
 8006b74:	d8e8      	bhi.n	8006b48 <__mdiff+0x80>
 8006b76:	1b33      	subs	r3, r6, r4
 8006b78:	3b15      	subs	r3, #21
 8006b7a:	f023 0303 	bic.w	r3, r3, #3
 8006b7e:	3304      	adds	r3, #4
 8006b80:	3415      	adds	r4, #21
 8006b82:	42a6      	cmp	r6, r4
 8006b84:	bf38      	it	cc
 8006b86:	2304      	movcc	r3, #4
 8006b88:	441d      	add	r5, r3
 8006b8a:	4473      	add	r3, lr
 8006b8c:	469e      	mov	lr, r3
 8006b8e:	462e      	mov	r6, r5
 8006b90:	4566      	cmp	r6, ip
 8006b92:	d30e      	bcc.n	8006bb2 <__mdiff+0xea>
 8006b94:	f10c 0203 	add.w	r2, ip, #3
 8006b98:	1b52      	subs	r2, r2, r5
 8006b9a:	f022 0203 	bic.w	r2, r2, #3
 8006b9e:	3d03      	subs	r5, #3
 8006ba0:	45ac      	cmp	ip, r5
 8006ba2:	bf38      	it	cc
 8006ba4:	2200      	movcc	r2, #0
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006bac:	b17a      	cbz	r2, 8006bce <__mdiff+0x106>
 8006bae:	6107      	str	r7, [r0, #16]
 8006bb0:	e7a4      	b.n	8006afc <__mdiff+0x34>
 8006bb2:	f856 8b04 	ldr.w	r8, [r6], #4
 8006bb6:	fa11 f288 	uxtah	r2, r1, r8
 8006bba:	1414      	asrs	r4, r2, #16
 8006bbc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006bc0:	b292      	uxth	r2, r2
 8006bc2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006bc6:	f84e 2b04 	str.w	r2, [lr], #4
 8006bca:	1421      	asrs	r1, r4, #16
 8006bcc:	e7e0      	b.n	8006b90 <__mdiff+0xc8>
 8006bce:	3f01      	subs	r7, #1
 8006bd0:	e7ea      	b.n	8006ba8 <__mdiff+0xe0>
 8006bd2:	bf00      	nop
 8006bd4:	08007ad0 	.word	0x08007ad0
 8006bd8:	08007ae1 	.word	0x08007ae1

08006bdc <__d2b>:
 8006bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006be0:	460f      	mov	r7, r1
 8006be2:	2101      	movs	r1, #1
 8006be4:	ec59 8b10 	vmov	r8, r9, d0
 8006be8:	4616      	mov	r6, r2
 8006bea:	f7ff fcd5 	bl	8006598 <_Balloc>
 8006bee:	4604      	mov	r4, r0
 8006bf0:	b930      	cbnz	r0, 8006c00 <__d2b+0x24>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	4b24      	ldr	r3, [pc, #144]	; (8006c88 <__d2b+0xac>)
 8006bf6:	4825      	ldr	r0, [pc, #148]	; (8006c8c <__d2b+0xb0>)
 8006bf8:	f240 310f 	movw	r1, #783	; 0x30f
 8006bfc:	f000 fa86 	bl	800710c <__assert_func>
 8006c00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c08:	bb2d      	cbnz	r5, 8006c56 <__d2b+0x7a>
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	f1b8 0300 	subs.w	r3, r8, #0
 8006c10:	d026      	beq.n	8006c60 <__d2b+0x84>
 8006c12:	4668      	mov	r0, sp
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	f7ff fd87 	bl	8006728 <__lo0bits>
 8006c1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c1e:	b1e8      	cbz	r0, 8006c5c <__d2b+0x80>
 8006c20:	f1c0 0320 	rsb	r3, r0, #32
 8006c24:	fa02 f303 	lsl.w	r3, r2, r3
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	40c2      	lsrs	r2, r0
 8006c2c:	6163      	str	r3, [r4, #20]
 8006c2e:	9201      	str	r2, [sp, #4]
 8006c30:	9b01      	ldr	r3, [sp, #4]
 8006c32:	61a3      	str	r3, [r4, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	bf14      	ite	ne
 8006c38:	2202      	movne	r2, #2
 8006c3a:	2201      	moveq	r2, #1
 8006c3c:	6122      	str	r2, [r4, #16]
 8006c3e:	b1bd      	cbz	r5, 8006c70 <__d2b+0x94>
 8006c40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c44:	4405      	add	r5, r0
 8006c46:	603d      	str	r5, [r7, #0]
 8006c48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c4c:	6030      	str	r0, [r6, #0]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	b003      	add	sp, #12
 8006c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c5a:	e7d6      	b.n	8006c0a <__d2b+0x2e>
 8006c5c:	6161      	str	r1, [r4, #20]
 8006c5e:	e7e7      	b.n	8006c30 <__d2b+0x54>
 8006c60:	a801      	add	r0, sp, #4
 8006c62:	f7ff fd61 	bl	8006728 <__lo0bits>
 8006c66:	9b01      	ldr	r3, [sp, #4]
 8006c68:	6163      	str	r3, [r4, #20]
 8006c6a:	3020      	adds	r0, #32
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	e7e5      	b.n	8006c3c <__d2b+0x60>
 8006c70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c78:	6038      	str	r0, [r7, #0]
 8006c7a:	6918      	ldr	r0, [r3, #16]
 8006c7c:	f7ff fd34 	bl	80066e8 <__hi0bits>
 8006c80:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c84:	e7e2      	b.n	8006c4c <__d2b+0x70>
 8006c86:	bf00      	nop
 8006c88:	08007ad0 	.word	0x08007ad0
 8006c8c:	08007ae1 	.word	0x08007ae1

08006c90 <__ssputs_r>:
 8006c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c94:	688e      	ldr	r6, [r1, #8]
 8006c96:	461f      	mov	r7, r3
 8006c98:	42be      	cmp	r6, r7
 8006c9a:	680b      	ldr	r3, [r1, #0]
 8006c9c:	4682      	mov	sl, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	4690      	mov	r8, r2
 8006ca2:	d82c      	bhi.n	8006cfe <__ssputs_r+0x6e>
 8006ca4:	898a      	ldrh	r2, [r1, #12]
 8006ca6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006caa:	d026      	beq.n	8006cfa <__ssputs_r+0x6a>
 8006cac:	6965      	ldr	r5, [r4, #20]
 8006cae:	6909      	ldr	r1, [r1, #16]
 8006cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cb4:	eba3 0901 	sub.w	r9, r3, r1
 8006cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cbc:	1c7b      	adds	r3, r7, #1
 8006cbe:	444b      	add	r3, r9
 8006cc0:	106d      	asrs	r5, r5, #1
 8006cc2:	429d      	cmp	r5, r3
 8006cc4:	bf38      	it	cc
 8006cc6:	461d      	movcc	r5, r3
 8006cc8:	0553      	lsls	r3, r2, #21
 8006cca:	d527      	bpl.n	8006d1c <__ssputs_r+0x8c>
 8006ccc:	4629      	mov	r1, r5
 8006cce:	f7ff fbd7 	bl	8006480 <_malloc_r>
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	b360      	cbz	r0, 8006d30 <__ssputs_r+0xa0>
 8006cd6:	6921      	ldr	r1, [r4, #16]
 8006cd8:	464a      	mov	r2, r9
 8006cda:	f000 fa09 	bl	80070f0 <memcpy>
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce8:	81a3      	strh	r3, [r4, #12]
 8006cea:	6126      	str	r6, [r4, #16]
 8006cec:	6165      	str	r5, [r4, #20]
 8006cee:	444e      	add	r6, r9
 8006cf0:	eba5 0509 	sub.w	r5, r5, r9
 8006cf4:	6026      	str	r6, [r4, #0]
 8006cf6:	60a5      	str	r5, [r4, #8]
 8006cf8:	463e      	mov	r6, r7
 8006cfa:	42be      	cmp	r6, r7
 8006cfc:	d900      	bls.n	8006d00 <__ssputs_r+0x70>
 8006cfe:	463e      	mov	r6, r7
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	4632      	mov	r2, r6
 8006d04:	4641      	mov	r1, r8
 8006d06:	f000 f9c9 	bl	800709c <memmove>
 8006d0a:	68a3      	ldr	r3, [r4, #8]
 8006d0c:	1b9b      	subs	r3, r3, r6
 8006d0e:	60a3      	str	r3, [r4, #8]
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	4433      	add	r3, r6
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	2000      	movs	r0, #0
 8006d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	f000 fa3b 	bl	8007198 <_realloc_r>
 8006d22:	4606      	mov	r6, r0
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d1e0      	bne.n	8006cea <__ssputs_r+0x5a>
 8006d28:	6921      	ldr	r1, [r4, #16]
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	f7ff fb34 	bl	8006398 <_free_r>
 8006d30:	230c      	movs	r3, #12
 8006d32:	f8ca 3000 	str.w	r3, [sl]
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	e7e9      	b.n	8006d18 <__ssputs_r+0x88>

08006d44 <_svfiprintf_r>:
 8006d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d48:	4698      	mov	r8, r3
 8006d4a:	898b      	ldrh	r3, [r1, #12]
 8006d4c:	061b      	lsls	r3, r3, #24
 8006d4e:	b09d      	sub	sp, #116	; 0x74
 8006d50:	4607      	mov	r7, r0
 8006d52:	460d      	mov	r5, r1
 8006d54:	4614      	mov	r4, r2
 8006d56:	d50e      	bpl.n	8006d76 <_svfiprintf_r+0x32>
 8006d58:	690b      	ldr	r3, [r1, #16]
 8006d5a:	b963      	cbnz	r3, 8006d76 <_svfiprintf_r+0x32>
 8006d5c:	2140      	movs	r1, #64	; 0x40
 8006d5e:	f7ff fb8f 	bl	8006480 <_malloc_r>
 8006d62:	6028      	str	r0, [r5, #0]
 8006d64:	6128      	str	r0, [r5, #16]
 8006d66:	b920      	cbnz	r0, 8006d72 <_svfiprintf_r+0x2e>
 8006d68:	230c      	movs	r3, #12
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	e0d0      	b.n	8006f14 <_svfiprintf_r+0x1d0>
 8006d72:	2340      	movs	r3, #64	; 0x40
 8006d74:	616b      	str	r3, [r5, #20]
 8006d76:	2300      	movs	r3, #0
 8006d78:	9309      	str	r3, [sp, #36]	; 0x24
 8006d7a:	2320      	movs	r3, #32
 8006d7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d84:	2330      	movs	r3, #48	; 0x30
 8006d86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f2c <_svfiprintf_r+0x1e8>
 8006d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d8e:	f04f 0901 	mov.w	r9, #1
 8006d92:	4623      	mov	r3, r4
 8006d94:	469a      	mov	sl, r3
 8006d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d9a:	b10a      	cbz	r2, 8006da0 <_svfiprintf_r+0x5c>
 8006d9c:	2a25      	cmp	r2, #37	; 0x25
 8006d9e:	d1f9      	bne.n	8006d94 <_svfiprintf_r+0x50>
 8006da0:	ebba 0b04 	subs.w	fp, sl, r4
 8006da4:	d00b      	beq.n	8006dbe <_svfiprintf_r+0x7a>
 8006da6:	465b      	mov	r3, fp
 8006da8:	4622      	mov	r2, r4
 8006daa:	4629      	mov	r1, r5
 8006dac:	4638      	mov	r0, r7
 8006dae:	f7ff ff6f 	bl	8006c90 <__ssputs_r>
 8006db2:	3001      	adds	r0, #1
 8006db4:	f000 80a9 	beq.w	8006f0a <_svfiprintf_r+0x1c6>
 8006db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dba:	445a      	add	r2, fp
 8006dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80a1 	beq.w	8006f0a <_svfiprintf_r+0x1c6>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f04f 32ff 	mov.w	r2, #4294967295
 8006dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dd2:	f10a 0a01 	add.w	sl, sl, #1
 8006dd6:	9304      	str	r3, [sp, #16]
 8006dd8:	9307      	str	r3, [sp, #28]
 8006dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dde:	931a      	str	r3, [sp, #104]	; 0x68
 8006de0:	4654      	mov	r4, sl
 8006de2:	2205      	movs	r2, #5
 8006de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de8:	4850      	ldr	r0, [pc, #320]	; (8006f2c <_svfiprintf_r+0x1e8>)
 8006dea:	f7f9 fa29 	bl	8000240 <memchr>
 8006dee:	9a04      	ldr	r2, [sp, #16]
 8006df0:	b9d8      	cbnz	r0, 8006e2a <_svfiprintf_r+0xe6>
 8006df2:	06d0      	lsls	r0, r2, #27
 8006df4:	bf44      	itt	mi
 8006df6:	2320      	movmi	r3, #32
 8006df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dfc:	0711      	lsls	r1, r2, #28
 8006dfe:	bf44      	itt	mi
 8006e00:	232b      	movmi	r3, #43	; 0x2b
 8006e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e06:	f89a 3000 	ldrb.w	r3, [sl]
 8006e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e0c:	d015      	beq.n	8006e3a <_svfiprintf_r+0xf6>
 8006e0e:	9a07      	ldr	r2, [sp, #28]
 8006e10:	4654      	mov	r4, sl
 8006e12:	2000      	movs	r0, #0
 8006e14:	f04f 0c0a 	mov.w	ip, #10
 8006e18:	4621      	mov	r1, r4
 8006e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e1e:	3b30      	subs	r3, #48	; 0x30
 8006e20:	2b09      	cmp	r3, #9
 8006e22:	d94d      	bls.n	8006ec0 <_svfiprintf_r+0x17c>
 8006e24:	b1b0      	cbz	r0, 8006e54 <_svfiprintf_r+0x110>
 8006e26:	9207      	str	r2, [sp, #28]
 8006e28:	e014      	b.n	8006e54 <_svfiprintf_r+0x110>
 8006e2a:	eba0 0308 	sub.w	r3, r0, r8
 8006e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e32:	4313      	orrs	r3, r2
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	46a2      	mov	sl, r4
 8006e38:	e7d2      	b.n	8006de0 <_svfiprintf_r+0x9c>
 8006e3a:	9b03      	ldr	r3, [sp, #12]
 8006e3c:	1d19      	adds	r1, r3, #4
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	9103      	str	r1, [sp, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bfbb      	ittet	lt
 8006e46:	425b      	neglt	r3, r3
 8006e48:	f042 0202 	orrlt.w	r2, r2, #2
 8006e4c:	9307      	strge	r3, [sp, #28]
 8006e4e:	9307      	strlt	r3, [sp, #28]
 8006e50:	bfb8      	it	lt
 8006e52:	9204      	strlt	r2, [sp, #16]
 8006e54:	7823      	ldrb	r3, [r4, #0]
 8006e56:	2b2e      	cmp	r3, #46	; 0x2e
 8006e58:	d10c      	bne.n	8006e74 <_svfiprintf_r+0x130>
 8006e5a:	7863      	ldrb	r3, [r4, #1]
 8006e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e5e:	d134      	bne.n	8006eca <_svfiprintf_r+0x186>
 8006e60:	9b03      	ldr	r3, [sp, #12]
 8006e62:	1d1a      	adds	r2, r3, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	9203      	str	r2, [sp, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bfb8      	it	lt
 8006e6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e70:	3402      	adds	r4, #2
 8006e72:	9305      	str	r3, [sp, #20]
 8006e74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006f3c <_svfiprintf_r+0x1f8>
 8006e78:	7821      	ldrb	r1, [r4, #0]
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	4650      	mov	r0, sl
 8006e7e:	f7f9 f9df 	bl	8000240 <memchr>
 8006e82:	b138      	cbz	r0, 8006e94 <_svfiprintf_r+0x150>
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	eba0 000a 	sub.w	r0, r0, sl
 8006e8a:	2240      	movs	r2, #64	; 0x40
 8006e8c:	4082      	lsls	r2, r0
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	3401      	adds	r4, #1
 8006e92:	9304      	str	r3, [sp, #16]
 8006e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e98:	4825      	ldr	r0, [pc, #148]	; (8006f30 <_svfiprintf_r+0x1ec>)
 8006e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e9e:	2206      	movs	r2, #6
 8006ea0:	f7f9 f9ce 	bl	8000240 <memchr>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d038      	beq.n	8006f1a <_svfiprintf_r+0x1d6>
 8006ea8:	4b22      	ldr	r3, [pc, #136]	; (8006f34 <_svfiprintf_r+0x1f0>)
 8006eaa:	bb1b      	cbnz	r3, 8006ef4 <_svfiprintf_r+0x1b0>
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	3307      	adds	r3, #7
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	9303      	str	r3, [sp, #12]
 8006eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eba:	4433      	add	r3, r6
 8006ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ebe:	e768      	b.n	8006d92 <_svfiprintf_r+0x4e>
 8006ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	e7a6      	b.n	8006e18 <_svfiprintf_r+0xd4>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	3401      	adds	r4, #1
 8006ece:	9305      	str	r3, [sp, #20]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f04f 0c0a 	mov.w	ip, #10
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006edc:	3a30      	subs	r2, #48	; 0x30
 8006ede:	2a09      	cmp	r2, #9
 8006ee0:	d903      	bls.n	8006eea <_svfiprintf_r+0x1a6>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0c6      	beq.n	8006e74 <_svfiprintf_r+0x130>
 8006ee6:	9105      	str	r1, [sp, #20]
 8006ee8:	e7c4      	b.n	8006e74 <_svfiprintf_r+0x130>
 8006eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eee:	4604      	mov	r4, r0
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e7f0      	b.n	8006ed6 <_svfiprintf_r+0x192>
 8006ef4:	ab03      	add	r3, sp, #12
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	462a      	mov	r2, r5
 8006efa:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <_svfiprintf_r+0x1f4>)
 8006efc:	a904      	add	r1, sp, #16
 8006efe:	4638      	mov	r0, r7
 8006f00:	f7fd ff1a 	bl	8004d38 <_printf_float>
 8006f04:	1c42      	adds	r2, r0, #1
 8006f06:	4606      	mov	r6, r0
 8006f08:	d1d6      	bne.n	8006eb8 <_svfiprintf_r+0x174>
 8006f0a:	89ab      	ldrh	r3, [r5, #12]
 8006f0c:	065b      	lsls	r3, r3, #25
 8006f0e:	f53f af2d 	bmi.w	8006d6c <_svfiprintf_r+0x28>
 8006f12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f14:	b01d      	add	sp, #116	; 0x74
 8006f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1a:	ab03      	add	r3, sp, #12
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <_svfiprintf_r+0x1f4>)
 8006f22:	a904      	add	r1, sp, #16
 8006f24:	4638      	mov	r0, r7
 8006f26:	f7fe f98f 	bl	8005248 <_printf_i>
 8006f2a:	e7eb      	b.n	8006f04 <_svfiprintf_r+0x1c0>
 8006f2c:	08007c3c 	.word	0x08007c3c
 8006f30:	08007c46 	.word	0x08007c46
 8006f34:	08004d39 	.word	0x08004d39
 8006f38:	08006c91 	.word	0x08006c91
 8006f3c:	08007c42 	.word	0x08007c42

08006f40 <__sflush_r>:
 8006f40:	898a      	ldrh	r2, [r1, #12]
 8006f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f46:	4605      	mov	r5, r0
 8006f48:	0710      	lsls	r0, r2, #28
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	d458      	bmi.n	8007000 <__sflush_r+0xc0>
 8006f4e:	684b      	ldr	r3, [r1, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	dc05      	bgt.n	8006f60 <__sflush_r+0x20>
 8006f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	dc02      	bgt.n	8006f60 <__sflush_r+0x20>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f62:	2e00      	cmp	r6, #0
 8006f64:	d0f9      	beq.n	8006f5a <__sflush_r+0x1a>
 8006f66:	2300      	movs	r3, #0
 8006f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f6c:	682f      	ldr	r7, [r5, #0]
 8006f6e:	6a21      	ldr	r1, [r4, #32]
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	d032      	beq.n	8006fda <__sflush_r+0x9a>
 8006f74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	075a      	lsls	r2, r3, #29
 8006f7a:	d505      	bpl.n	8006f88 <__sflush_r+0x48>
 8006f7c:	6863      	ldr	r3, [r4, #4]
 8006f7e:	1ac0      	subs	r0, r0, r3
 8006f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f82:	b10b      	cbz	r3, 8006f88 <__sflush_r+0x48>
 8006f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f86:	1ac0      	subs	r0, r0, r3
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f8e:	6a21      	ldr	r1, [r4, #32]
 8006f90:	4628      	mov	r0, r5
 8006f92:	47b0      	blx	r6
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	d106      	bne.n	8006fa8 <__sflush_r+0x68>
 8006f9a:	6829      	ldr	r1, [r5, #0]
 8006f9c:	291d      	cmp	r1, #29
 8006f9e:	d82b      	bhi.n	8006ff8 <__sflush_r+0xb8>
 8006fa0:	4a29      	ldr	r2, [pc, #164]	; (8007048 <__sflush_r+0x108>)
 8006fa2:	410a      	asrs	r2, r1
 8006fa4:	07d6      	lsls	r6, r2, #31
 8006fa6:	d427      	bmi.n	8006ff8 <__sflush_r+0xb8>
 8006fa8:	2200      	movs	r2, #0
 8006faa:	6062      	str	r2, [r4, #4]
 8006fac:	04d9      	lsls	r1, r3, #19
 8006fae:	6922      	ldr	r2, [r4, #16]
 8006fb0:	6022      	str	r2, [r4, #0]
 8006fb2:	d504      	bpl.n	8006fbe <__sflush_r+0x7e>
 8006fb4:	1c42      	adds	r2, r0, #1
 8006fb6:	d101      	bne.n	8006fbc <__sflush_r+0x7c>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	b903      	cbnz	r3, 8006fbe <__sflush_r+0x7e>
 8006fbc:	6560      	str	r0, [r4, #84]	; 0x54
 8006fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fc0:	602f      	str	r7, [r5, #0]
 8006fc2:	2900      	cmp	r1, #0
 8006fc4:	d0c9      	beq.n	8006f5a <__sflush_r+0x1a>
 8006fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fca:	4299      	cmp	r1, r3
 8006fcc:	d002      	beq.n	8006fd4 <__sflush_r+0x94>
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7ff f9e2 	bl	8006398 <_free_r>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	6360      	str	r0, [r4, #52]	; 0x34
 8006fd8:	e7c0      	b.n	8006f5c <__sflush_r+0x1c>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b0      	blx	r6
 8006fe0:	1c41      	adds	r1, r0, #1
 8006fe2:	d1c8      	bne.n	8006f76 <__sflush_r+0x36>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0c5      	beq.n	8006f76 <__sflush_r+0x36>
 8006fea:	2b1d      	cmp	r3, #29
 8006fec:	d001      	beq.n	8006ff2 <__sflush_r+0xb2>
 8006fee:	2b16      	cmp	r3, #22
 8006ff0:	d101      	bne.n	8006ff6 <__sflush_r+0xb6>
 8006ff2:	602f      	str	r7, [r5, #0]
 8006ff4:	e7b1      	b.n	8006f5a <__sflush_r+0x1a>
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	e7ad      	b.n	8006f5c <__sflush_r+0x1c>
 8007000:	690f      	ldr	r7, [r1, #16]
 8007002:	2f00      	cmp	r7, #0
 8007004:	d0a9      	beq.n	8006f5a <__sflush_r+0x1a>
 8007006:	0793      	lsls	r3, r2, #30
 8007008:	680e      	ldr	r6, [r1, #0]
 800700a:	bf08      	it	eq
 800700c:	694b      	ldreq	r3, [r1, #20]
 800700e:	600f      	str	r7, [r1, #0]
 8007010:	bf18      	it	ne
 8007012:	2300      	movne	r3, #0
 8007014:	eba6 0807 	sub.w	r8, r6, r7
 8007018:	608b      	str	r3, [r1, #8]
 800701a:	f1b8 0f00 	cmp.w	r8, #0
 800701e:	dd9c      	ble.n	8006f5a <__sflush_r+0x1a>
 8007020:	6a21      	ldr	r1, [r4, #32]
 8007022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007024:	4643      	mov	r3, r8
 8007026:	463a      	mov	r2, r7
 8007028:	4628      	mov	r0, r5
 800702a:	47b0      	blx	r6
 800702c:	2800      	cmp	r0, #0
 800702e:	dc06      	bgt.n	800703e <__sflush_r+0xfe>
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	f04f 30ff 	mov.w	r0, #4294967295
 800703c:	e78e      	b.n	8006f5c <__sflush_r+0x1c>
 800703e:	4407      	add	r7, r0
 8007040:	eba8 0800 	sub.w	r8, r8, r0
 8007044:	e7e9      	b.n	800701a <__sflush_r+0xda>
 8007046:	bf00      	nop
 8007048:	dfbffffe 	.word	0xdfbffffe

0800704c <_fflush_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	690b      	ldr	r3, [r1, #16]
 8007050:	4605      	mov	r5, r0
 8007052:	460c      	mov	r4, r1
 8007054:	b913      	cbnz	r3, 800705c <_fflush_r+0x10>
 8007056:	2500      	movs	r5, #0
 8007058:	4628      	mov	r0, r5
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	b118      	cbz	r0, 8007066 <_fflush_r+0x1a>
 800705e:	6a03      	ldr	r3, [r0, #32]
 8007060:	b90b      	cbnz	r3, 8007066 <_fflush_r+0x1a>
 8007062:	f7fe fa8d 	bl	8005580 <__sinit>
 8007066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f3      	beq.n	8007056 <_fflush_r+0xa>
 800706e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007070:	07d0      	lsls	r0, r2, #31
 8007072:	d404      	bmi.n	800707e <_fflush_r+0x32>
 8007074:	0599      	lsls	r1, r3, #22
 8007076:	d402      	bmi.n	800707e <_fflush_r+0x32>
 8007078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800707a:	f7fe fb97 	bl	80057ac <__retarget_lock_acquire_recursive>
 800707e:	4628      	mov	r0, r5
 8007080:	4621      	mov	r1, r4
 8007082:	f7ff ff5d 	bl	8006f40 <__sflush_r>
 8007086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007088:	07da      	lsls	r2, r3, #31
 800708a:	4605      	mov	r5, r0
 800708c:	d4e4      	bmi.n	8007058 <_fflush_r+0xc>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	059b      	lsls	r3, r3, #22
 8007092:	d4e1      	bmi.n	8007058 <_fflush_r+0xc>
 8007094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007096:	f7fe fb8a 	bl	80057ae <__retarget_lock_release_recursive>
 800709a:	e7dd      	b.n	8007058 <_fflush_r+0xc>

0800709c <memmove>:
 800709c:	4288      	cmp	r0, r1
 800709e:	b510      	push	{r4, lr}
 80070a0:	eb01 0402 	add.w	r4, r1, r2
 80070a4:	d902      	bls.n	80070ac <memmove+0x10>
 80070a6:	4284      	cmp	r4, r0
 80070a8:	4623      	mov	r3, r4
 80070aa:	d807      	bhi.n	80070bc <memmove+0x20>
 80070ac:	1e43      	subs	r3, r0, #1
 80070ae:	42a1      	cmp	r1, r4
 80070b0:	d008      	beq.n	80070c4 <memmove+0x28>
 80070b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070ba:	e7f8      	b.n	80070ae <memmove+0x12>
 80070bc:	4402      	add	r2, r0
 80070be:	4601      	mov	r1, r0
 80070c0:	428a      	cmp	r2, r1
 80070c2:	d100      	bne.n	80070c6 <memmove+0x2a>
 80070c4:	bd10      	pop	{r4, pc}
 80070c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070ce:	e7f7      	b.n	80070c0 <memmove+0x24>

080070d0 <_sbrk_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d06      	ldr	r5, [pc, #24]	; (80070ec <_sbrk_r+0x1c>)
 80070d4:	2300      	movs	r3, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	602b      	str	r3, [r5, #0]
 80070dc:	f7f9 ff5a 	bl	8000f94 <_sbrk>
 80070e0:	1c43      	adds	r3, r0, #1
 80070e2:	d102      	bne.n	80070ea <_sbrk_r+0x1a>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	b103      	cbz	r3, 80070ea <_sbrk_r+0x1a>
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	2000051c 	.word	0x2000051c

080070f0 <memcpy>:
 80070f0:	440a      	add	r2, r1
 80070f2:	4291      	cmp	r1, r2
 80070f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070f8:	d100      	bne.n	80070fc <memcpy+0xc>
 80070fa:	4770      	bx	lr
 80070fc:	b510      	push	{r4, lr}
 80070fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007106:	4291      	cmp	r1, r2
 8007108:	d1f9      	bne.n	80070fe <memcpy+0xe>
 800710a:	bd10      	pop	{r4, pc}

0800710c <__assert_func>:
 800710c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800710e:	4614      	mov	r4, r2
 8007110:	461a      	mov	r2, r3
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <__assert_func+0x2c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4605      	mov	r5, r0
 8007118:	68d8      	ldr	r0, [r3, #12]
 800711a:	b14c      	cbz	r4, 8007130 <__assert_func+0x24>
 800711c:	4b07      	ldr	r3, [pc, #28]	; (800713c <__assert_func+0x30>)
 800711e:	9100      	str	r1, [sp, #0]
 8007120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007124:	4906      	ldr	r1, [pc, #24]	; (8007140 <__assert_func+0x34>)
 8007126:	462b      	mov	r3, r5
 8007128:	f000 f872 	bl	8007210 <fiprintf>
 800712c:	f000 f882 	bl	8007234 <abort>
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <__assert_func+0x38>)
 8007132:	461c      	mov	r4, r3
 8007134:	e7f3      	b.n	800711e <__assert_func+0x12>
 8007136:	bf00      	nop
 8007138:	20000068 	.word	0x20000068
 800713c:	08007c57 	.word	0x08007c57
 8007140:	08007c64 	.word	0x08007c64
 8007144:	08007c92 	.word	0x08007c92

08007148 <_calloc_r>:
 8007148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800714a:	fba1 2402 	umull	r2, r4, r1, r2
 800714e:	b94c      	cbnz	r4, 8007164 <_calloc_r+0x1c>
 8007150:	4611      	mov	r1, r2
 8007152:	9201      	str	r2, [sp, #4]
 8007154:	f7ff f994 	bl	8006480 <_malloc_r>
 8007158:	9a01      	ldr	r2, [sp, #4]
 800715a:	4605      	mov	r5, r0
 800715c:	b930      	cbnz	r0, 800716c <_calloc_r+0x24>
 800715e:	4628      	mov	r0, r5
 8007160:	b003      	add	sp, #12
 8007162:	bd30      	pop	{r4, r5, pc}
 8007164:	220c      	movs	r2, #12
 8007166:	6002      	str	r2, [r0, #0]
 8007168:	2500      	movs	r5, #0
 800716a:	e7f8      	b.n	800715e <_calloc_r+0x16>
 800716c:	4621      	mov	r1, r4
 800716e:	f7fe faa0 	bl	80056b2 <memset>
 8007172:	e7f4      	b.n	800715e <_calloc_r+0x16>

08007174 <__ascii_mbtowc>:
 8007174:	b082      	sub	sp, #8
 8007176:	b901      	cbnz	r1, 800717a <__ascii_mbtowc+0x6>
 8007178:	a901      	add	r1, sp, #4
 800717a:	b142      	cbz	r2, 800718e <__ascii_mbtowc+0x1a>
 800717c:	b14b      	cbz	r3, 8007192 <__ascii_mbtowc+0x1e>
 800717e:	7813      	ldrb	r3, [r2, #0]
 8007180:	600b      	str	r3, [r1, #0]
 8007182:	7812      	ldrb	r2, [r2, #0]
 8007184:	1e10      	subs	r0, r2, #0
 8007186:	bf18      	it	ne
 8007188:	2001      	movne	r0, #1
 800718a:	b002      	add	sp, #8
 800718c:	4770      	bx	lr
 800718e:	4610      	mov	r0, r2
 8007190:	e7fb      	b.n	800718a <__ascii_mbtowc+0x16>
 8007192:	f06f 0001 	mvn.w	r0, #1
 8007196:	e7f8      	b.n	800718a <__ascii_mbtowc+0x16>

08007198 <_realloc_r>:
 8007198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800719c:	4680      	mov	r8, r0
 800719e:	4614      	mov	r4, r2
 80071a0:	460e      	mov	r6, r1
 80071a2:	b921      	cbnz	r1, 80071ae <_realloc_r+0x16>
 80071a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071a8:	4611      	mov	r1, r2
 80071aa:	f7ff b969 	b.w	8006480 <_malloc_r>
 80071ae:	b92a      	cbnz	r2, 80071bc <_realloc_r+0x24>
 80071b0:	f7ff f8f2 	bl	8006398 <_free_r>
 80071b4:	4625      	mov	r5, r4
 80071b6:	4628      	mov	r0, r5
 80071b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071bc:	f000 f841 	bl	8007242 <_malloc_usable_size_r>
 80071c0:	4284      	cmp	r4, r0
 80071c2:	4607      	mov	r7, r0
 80071c4:	d802      	bhi.n	80071cc <_realloc_r+0x34>
 80071c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071ca:	d812      	bhi.n	80071f2 <_realloc_r+0x5a>
 80071cc:	4621      	mov	r1, r4
 80071ce:	4640      	mov	r0, r8
 80071d0:	f7ff f956 	bl	8006480 <_malloc_r>
 80071d4:	4605      	mov	r5, r0
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d0ed      	beq.n	80071b6 <_realloc_r+0x1e>
 80071da:	42bc      	cmp	r4, r7
 80071dc:	4622      	mov	r2, r4
 80071de:	4631      	mov	r1, r6
 80071e0:	bf28      	it	cs
 80071e2:	463a      	movcs	r2, r7
 80071e4:	f7ff ff84 	bl	80070f0 <memcpy>
 80071e8:	4631      	mov	r1, r6
 80071ea:	4640      	mov	r0, r8
 80071ec:	f7ff f8d4 	bl	8006398 <_free_r>
 80071f0:	e7e1      	b.n	80071b6 <_realloc_r+0x1e>
 80071f2:	4635      	mov	r5, r6
 80071f4:	e7df      	b.n	80071b6 <_realloc_r+0x1e>

080071f6 <__ascii_wctomb>:
 80071f6:	b149      	cbz	r1, 800720c <__ascii_wctomb+0x16>
 80071f8:	2aff      	cmp	r2, #255	; 0xff
 80071fa:	bf85      	ittet	hi
 80071fc:	238a      	movhi	r3, #138	; 0x8a
 80071fe:	6003      	strhi	r3, [r0, #0]
 8007200:	700a      	strbls	r2, [r1, #0]
 8007202:	f04f 30ff 	movhi.w	r0, #4294967295
 8007206:	bf98      	it	ls
 8007208:	2001      	movls	r0, #1
 800720a:	4770      	bx	lr
 800720c:	4608      	mov	r0, r1
 800720e:	4770      	bx	lr

08007210 <fiprintf>:
 8007210:	b40e      	push	{r1, r2, r3}
 8007212:	b503      	push	{r0, r1, lr}
 8007214:	4601      	mov	r1, r0
 8007216:	ab03      	add	r3, sp, #12
 8007218:	4805      	ldr	r0, [pc, #20]	; (8007230 <fiprintf+0x20>)
 800721a:	f853 2b04 	ldr.w	r2, [r3], #4
 800721e:	6800      	ldr	r0, [r0, #0]
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	f000 f83f 	bl	80072a4 <_vfiprintf_r>
 8007226:	b002      	add	sp, #8
 8007228:	f85d eb04 	ldr.w	lr, [sp], #4
 800722c:	b003      	add	sp, #12
 800722e:	4770      	bx	lr
 8007230:	20000068 	.word	0x20000068

08007234 <abort>:
 8007234:	b508      	push	{r3, lr}
 8007236:	2006      	movs	r0, #6
 8007238:	f000 fa0c 	bl	8007654 <raise>
 800723c:	2001      	movs	r0, #1
 800723e:	f7f9 fe31 	bl	8000ea4 <_exit>

08007242 <_malloc_usable_size_r>:
 8007242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007246:	1f18      	subs	r0, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	bfbc      	itt	lt
 800724c:	580b      	ldrlt	r3, [r1, r0]
 800724e:	18c0      	addlt	r0, r0, r3
 8007250:	4770      	bx	lr

08007252 <__sfputc_r>:
 8007252:	6893      	ldr	r3, [r2, #8]
 8007254:	3b01      	subs	r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	b410      	push	{r4}
 800725a:	6093      	str	r3, [r2, #8]
 800725c:	da08      	bge.n	8007270 <__sfputc_r+0x1e>
 800725e:	6994      	ldr	r4, [r2, #24]
 8007260:	42a3      	cmp	r3, r4
 8007262:	db01      	blt.n	8007268 <__sfputc_r+0x16>
 8007264:	290a      	cmp	r1, #10
 8007266:	d103      	bne.n	8007270 <__sfputc_r+0x1e>
 8007268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800726c:	f000 b934 	b.w	80074d8 <__swbuf_r>
 8007270:	6813      	ldr	r3, [r2, #0]
 8007272:	1c58      	adds	r0, r3, #1
 8007274:	6010      	str	r0, [r2, #0]
 8007276:	7019      	strb	r1, [r3, #0]
 8007278:	4608      	mov	r0, r1
 800727a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800727e:	4770      	bx	lr

08007280 <__sfputs_r>:
 8007280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007282:	4606      	mov	r6, r0
 8007284:	460f      	mov	r7, r1
 8007286:	4614      	mov	r4, r2
 8007288:	18d5      	adds	r5, r2, r3
 800728a:	42ac      	cmp	r4, r5
 800728c:	d101      	bne.n	8007292 <__sfputs_r+0x12>
 800728e:	2000      	movs	r0, #0
 8007290:	e007      	b.n	80072a2 <__sfputs_r+0x22>
 8007292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007296:	463a      	mov	r2, r7
 8007298:	4630      	mov	r0, r6
 800729a:	f7ff ffda 	bl	8007252 <__sfputc_r>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	d1f3      	bne.n	800728a <__sfputs_r+0xa>
 80072a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072a4 <_vfiprintf_r>:
 80072a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a8:	460d      	mov	r5, r1
 80072aa:	b09d      	sub	sp, #116	; 0x74
 80072ac:	4614      	mov	r4, r2
 80072ae:	4698      	mov	r8, r3
 80072b0:	4606      	mov	r6, r0
 80072b2:	b118      	cbz	r0, 80072bc <_vfiprintf_r+0x18>
 80072b4:	6a03      	ldr	r3, [r0, #32]
 80072b6:	b90b      	cbnz	r3, 80072bc <_vfiprintf_r+0x18>
 80072b8:	f7fe f962 	bl	8005580 <__sinit>
 80072bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072be:	07d9      	lsls	r1, r3, #31
 80072c0:	d405      	bmi.n	80072ce <_vfiprintf_r+0x2a>
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	059a      	lsls	r2, r3, #22
 80072c6:	d402      	bmi.n	80072ce <_vfiprintf_r+0x2a>
 80072c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ca:	f7fe fa6f 	bl	80057ac <__retarget_lock_acquire_recursive>
 80072ce:	89ab      	ldrh	r3, [r5, #12]
 80072d0:	071b      	lsls	r3, r3, #28
 80072d2:	d501      	bpl.n	80072d8 <_vfiprintf_r+0x34>
 80072d4:	692b      	ldr	r3, [r5, #16]
 80072d6:	b99b      	cbnz	r3, 8007300 <_vfiprintf_r+0x5c>
 80072d8:	4629      	mov	r1, r5
 80072da:	4630      	mov	r0, r6
 80072dc:	f000 f93a 	bl	8007554 <__swsetup_r>
 80072e0:	b170      	cbz	r0, 8007300 <_vfiprintf_r+0x5c>
 80072e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072e4:	07dc      	lsls	r4, r3, #31
 80072e6:	d504      	bpl.n	80072f2 <_vfiprintf_r+0x4e>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	b01d      	add	sp, #116	; 0x74
 80072ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f2:	89ab      	ldrh	r3, [r5, #12]
 80072f4:	0598      	lsls	r0, r3, #22
 80072f6:	d4f7      	bmi.n	80072e8 <_vfiprintf_r+0x44>
 80072f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072fa:	f7fe fa58 	bl	80057ae <__retarget_lock_release_recursive>
 80072fe:	e7f3      	b.n	80072e8 <_vfiprintf_r+0x44>
 8007300:	2300      	movs	r3, #0
 8007302:	9309      	str	r3, [sp, #36]	; 0x24
 8007304:	2320      	movs	r3, #32
 8007306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800730a:	f8cd 800c 	str.w	r8, [sp, #12]
 800730e:	2330      	movs	r3, #48	; 0x30
 8007310:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80074c4 <_vfiprintf_r+0x220>
 8007314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007318:	f04f 0901 	mov.w	r9, #1
 800731c:	4623      	mov	r3, r4
 800731e:	469a      	mov	sl, r3
 8007320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007324:	b10a      	cbz	r2, 800732a <_vfiprintf_r+0x86>
 8007326:	2a25      	cmp	r2, #37	; 0x25
 8007328:	d1f9      	bne.n	800731e <_vfiprintf_r+0x7a>
 800732a:	ebba 0b04 	subs.w	fp, sl, r4
 800732e:	d00b      	beq.n	8007348 <_vfiprintf_r+0xa4>
 8007330:	465b      	mov	r3, fp
 8007332:	4622      	mov	r2, r4
 8007334:	4629      	mov	r1, r5
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff ffa2 	bl	8007280 <__sfputs_r>
 800733c:	3001      	adds	r0, #1
 800733e:	f000 80a9 	beq.w	8007494 <_vfiprintf_r+0x1f0>
 8007342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007344:	445a      	add	r2, fp
 8007346:	9209      	str	r2, [sp, #36]	; 0x24
 8007348:	f89a 3000 	ldrb.w	r3, [sl]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80a1 	beq.w	8007494 <_vfiprintf_r+0x1f0>
 8007352:	2300      	movs	r3, #0
 8007354:	f04f 32ff 	mov.w	r2, #4294967295
 8007358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800735c:	f10a 0a01 	add.w	sl, sl, #1
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	9307      	str	r3, [sp, #28]
 8007364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007368:	931a      	str	r3, [sp, #104]	; 0x68
 800736a:	4654      	mov	r4, sl
 800736c:	2205      	movs	r2, #5
 800736e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007372:	4854      	ldr	r0, [pc, #336]	; (80074c4 <_vfiprintf_r+0x220>)
 8007374:	f7f8 ff64 	bl	8000240 <memchr>
 8007378:	9a04      	ldr	r2, [sp, #16]
 800737a:	b9d8      	cbnz	r0, 80073b4 <_vfiprintf_r+0x110>
 800737c:	06d1      	lsls	r1, r2, #27
 800737e:	bf44      	itt	mi
 8007380:	2320      	movmi	r3, #32
 8007382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007386:	0713      	lsls	r3, r2, #28
 8007388:	bf44      	itt	mi
 800738a:	232b      	movmi	r3, #43	; 0x2b
 800738c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007390:	f89a 3000 	ldrb.w	r3, [sl]
 8007394:	2b2a      	cmp	r3, #42	; 0x2a
 8007396:	d015      	beq.n	80073c4 <_vfiprintf_r+0x120>
 8007398:	9a07      	ldr	r2, [sp, #28]
 800739a:	4654      	mov	r4, sl
 800739c:	2000      	movs	r0, #0
 800739e:	f04f 0c0a 	mov.w	ip, #10
 80073a2:	4621      	mov	r1, r4
 80073a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a8:	3b30      	subs	r3, #48	; 0x30
 80073aa:	2b09      	cmp	r3, #9
 80073ac:	d94d      	bls.n	800744a <_vfiprintf_r+0x1a6>
 80073ae:	b1b0      	cbz	r0, 80073de <_vfiprintf_r+0x13a>
 80073b0:	9207      	str	r2, [sp, #28]
 80073b2:	e014      	b.n	80073de <_vfiprintf_r+0x13a>
 80073b4:	eba0 0308 	sub.w	r3, r0, r8
 80073b8:	fa09 f303 	lsl.w	r3, r9, r3
 80073bc:	4313      	orrs	r3, r2
 80073be:	9304      	str	r3, [sp, #16]
 80073c0:	46a2      	mov	sl, r4
 80073c2:	e7d2      	b.n	800736a <_vfiprintf_r+0xc6>
 80073c4:	9b03      	ldr	r3, [sp, #12]
 80073c6:	1d19      	adds	r1, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	9103      	str	r1, [sp, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bfbb      	ittet	lt
 80073d0:	425b      	neglt	r3, r3
 80073d2:	f042 0202 	orrlt.w	r2, r2, #2
 80073d6:	9307      	strge	r3, [sp, #28]
 80073d8:	9307      	strlt	r3, [sp, #28]
 80073da:	bfb8      	it	lt
 80073dc:	9204      	strlt	r2, [sp, #16]
 80073de:	7823      	ldrb	r3, [r4, #0]
 80073e0:	2b2e      	cmp	r3, #46	; 0x2e
 80073e2:	d10c      	bne.n	80073fe <_vfiprintf_r+0x15a>
 80073e4:	7863      	ldrb	r3, [r4, #1]
 80073e6:	2b2a      	cmp	r3, #42	; 0x2a
 80073e8:	d134      	bne.n	8007454 <_vfiprintf_r+0x1b0>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	1d1a      	adds	r2, r3, #4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	9203      	str	r2, [sp, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bfb8      	it	lt
 80073f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80073fa:	3402      	adds	r4, #2
 80073fc:	9305      	str	r3, [sp, #20]
 80073fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80074d4 <_vfiprintf_r+0x230>
 8007402:	7821      	ldrb	r1, [r4, #0]
 8007404:	2203      	movs	r2, #3
 8007406:	4650      	mov	r0, sl
 8007408:	f7f8 ff1a 	bl	8000240 <memchr>
 800740c:	b138      	cbz	r0, 800741e <_vfiprintf_r+0x17a>
 800740e:	9b04      	ldr	r3, [sp, #16]
 8007410:	eba0 000a 	sub.w	r0, r0, sl
 8007414:	2240      	movs	r2, #64	; 0x40
 8007416:	4082      	lsls	r2, r0
 8007418:	4313      	orrs	r3, r2
 800741a:	3401      	adds	r4, #1
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007422:	4829      	ldr	r0, [pc, #164]	; (80074c8 <_vfiprintf_r+0x224>)
 8007424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007428:	2206      	movs	r2, #6
 800742a:	f7f8 ff09 	bl	8000240 <memchr>
 800742e:	2800      	cmp	r0, #0
 8007430:	d03f      	beq.n	80074b2 <_vfiprintf_r+0x20e>
 8007432:	4b26      	ldr	r3, [pc, #152]	; (80074cc <_vfiprintf_r+0x228>)
 8007434:	bb1b      	cbnz	r3, 800747e <_vfiprintf_r+0x1da>
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	3307      	adds	r3, #7
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	3308      	adds	r3, #8
 8007440:	9303      	str	r3, [sp, #12]
 8007442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007444:	443b      	add	r3, r7
 8007446:	9309      	str	r3, [sp, #36]	; 0x24
 8007448:	e768      	b.n	800731c <_vfiprintf_r+0x78>
 800744a:	fb0c 3202 	mla	r2, ip, r2, r3
 800744e:	460c      	mov	r4, r1
 8007450:	2001      	movs	r0, #1
 8007452:	e7a6      	b.n	80073a2 <_vfiprintf_r+0xfe>
 8007454:	2300      	movs	r3, #0
 8007456:	3401      	adds	r4, #1
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	4619      	mov	r1, r3
 800745c:	f04f 0c0a 	mov.w	ip, #10
 8007460:	4620      	mov	r0, r4
 8007462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007466:	3a30      	subs	r2, #48	; 0x30
 8007468:	2a09      	cmp	r2, #9
 800746a:	d903      	bls.n	8007474 <_vfiprintf_r+0x1d0>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0c6      	beq.n	80073fe <_vfiprintf_r+0x15a>
 8007470:	9105      	str	r1, [sp, #20]
 8007472:	e7c4      	b.n	80073fe <_vfiprintf_r+0x15a>
 8007474:	fb0c 2101 	mla	r1, ip, r1, r2
 8007478:	4604      	mov	r4, r0
 800747a:	2301      	movs	r3, #1
 800747c:	e7f0      	b.n	8007460 <_vfiprintf_r+0x1bc>
 800747e:	ab03      	add	r3, sp, #12
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	462a      	mov	r2, r5
 8007484:	4b12      	ldr	r3, [pc, #72]	; (80074d0 <_vfiprintf_r+0x22c>)
 8007486:	a904      	add	r1, sp, #16
 8007488:	4630      	mov	r0, r6
 800748a:	f7fd fc55 	bl	8004d38 <_printf_float>
 800748e:	4607      	mov	r7, r0
 8007490:	1c78      	adds	r0, r7, #1
 8007492:	d1d6      	bne.n	8007442 <_vfiprintf_r+0x19e>
 8007494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007496:	07d9      	lsls	r1, r3, #31
 8007498:	d405      	bmi.n	80074a6 <_vfiprintf_r+0x202>
 800749a:	89ab      	ldrh	r3, [r5, #12]
 800749c:	059a      	lsls	r2, r3, #22
 800749e:	d402      	bmi.n	80074a6 <_vfiprintf_r+0x202>
 80074a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a2:	f7fe f984 	bl	80057ae <__retarget_lock_release_recursive>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	065b      	lsls	r3, r3, #25
 80074aa:	f53f af1d 	bmi.w	80072e8 <_vfiprintf_r+0x44>
 80074ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074b0:	e71c      	b.n	80072ec <_vfiprintf_r+0x48>
 80074b2:	ab03      	add	r3, sp, #12
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	462a      	mov	r2, r5
 80074b8:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <_vfiprintf_r+0x22c>)
 80074ba:	a904      	add	r1, sp, #16
 80074bc:	4630      	mov	r0, r6
 80074be:	f7fd fec3 	bl	8005248 <_printf_i>
 80074c2:	e7e4      	b.n	800748e <_vfiprintf_r+0x1ea>
 80074c4:	08007c3c 	.word	0x08007c3c
 80074c8:	08007c46 	.word	0x08007c46
 80074cc:	08004d39 	.word	0x08004d39
 80074d0:	08007281 	.word	0x08007281
 80074d4:	08007c42 	.word	0x08007c42

080074d8 <__swbuf_r>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	460e      	mov	r6, r1
 80074dc:	4614      	mov	r4, r2
 80074de:	4605      	mov	r5, r0
 80074e0:	b118      	cbz	r0, 80074ea <__swbuf_r+0x12>
 80074e2:	6a03      	ldr	r3, [r0, #32]
 80074e4:	b90b      	cbnz	r3, 80074ea <__swbuf_r+0x12>
 80074e6:	f7fe f84b 	bl	8005580 <__sinit>
 80074ea:	69a3      	ldr	r3, [r4, #24]
 80074ec:	60a3      	str	r3, [r4, #8]
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	071a      	lsls	r2, r3, #28
 80074f2:	d525      	bpl.n	8007540 <__swbuf_r+0x68>
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	b31b      	cbz	r3, 8007540 <__swbuf_r+0x68>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	6922      	ldr	r2, [r4, #16]
 80074fc:	1a98      	subs	r0, r3, r2
 80074fe:	6963      	ldr	r3, [r4, #20]
 8007500:	b2f6      	uxtb	r6, r6
 8007502:	4283      	cmp	r3, r0
 8007504:	4637      	mov	r7, r6
 8007506:	dc04      	bgt.n	8007512 <__swbuf_r+0x3a>
 8007508:	4621      	mov	r1, r4
 800750a:	4628      	mov	r0, r5
 800750c:	f7ff fd9e 	bl	800704c <_fflush_r>
 8007510:	b9e0      	cbnz	r0, 800754c <__swbuf_r+0x74>
 8007512:	68a3      	ldr	r3, [r4, #8]
 8007514:	3b01      	subs	r3, #1
 8007516:	60a3      	str	r3, [r4, #8]
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	6022      	str	r2, [r4, #0]
 800751e:	701e      	strb	r6, [r3, #0]
 8007520:	6962      	ldr	r2, [r4, #20]
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	429a      	cmp	r2, r3
 8007526:	d004      	beq.n	8007532 <__swbuf_r+0x5a>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	07db      	lsls	r3, r3, #31
 800752c:	d506      	bpl.n	800753c <__swbuf_r+0x64>
 800752e:	2e0a      	cmp	r6, #10
 8007530:	d104      	bne.n	800753c <__swbuf_r+0x64>
 8007532:	4621      	mov	r1, r4
 8007534:	4628      	mov	r0, r5
 8007536:	f7ff fd89 	bl	800704c <_fflush_r>
 800753a:	b938      	cbnz	r0, 800754c <__swbuf_r+0x74>
 800753c:	4638      	mov	r0, r7
 800753e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007540:	4621      	mov	r1, r4
 8007542:	4628      	mov	r0, r5
 8007544:	f000 f806 	bl	8007554 <__swsetup_r>
 8007548:	2800      	cmp	r0, #0
 800754a:	d0d5      	beq.n	80074f8 <__swbuf_r+0x20>
 800754c:	f04f 37ff 	mov.w	r7, #4294967295
 8007550:	e7f4      	b.n	800753c <__swbuf_r+0x64>
	...

08007554 <__swsetup_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4b2a      	ldr	r3, [pc, #168]	; (8007600 <__swsetup_r+0xac>)
 8007558:	4605      	mov	r5, r0
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	460c      	mov	r4, r1
 800755e:	b118      	cbz	r0, 8007568 <__swsetup_r+0x14>
 8007560:	6a03      	ldr	r3, [r0, #32]
 8007562:	b90b      	cbnz	r3, 8007568 <__swsetup_r+0x14>
 8007564:	f7fe f80c 	bl	8005580 <__sinit>
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800756e:	0718      	lsls	r0, r3, #28
 8007570:	d422      	bmi.n	80075b8 <__swsetup_r+0x64>
 8007572:	06d9      	lsls	r1, r3, #27
 8007574:	d407      	bmi.n	8007586 <__swsetup_r+0x32>
 8007576:	2309      	movs	r3, #9
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	e034      	b.n	80075f0 <__swsetup_r+0x9c>
 8007586:	0758      	lsls	r0, r3, #29
 8007588:	d512      	bpl.n	80075b0 <__swsetup_r+0x5c>
 800758a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800758c:	b141      	cbz	r1, 80075a0 <__swsetup_r+0x4c>
 800758e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007592:	4299      	cmp	r1, r3
 8007594:	d002      	beq.n	800759c <__swsetup_r+0x48>
 8007596:	4628      	mov	r0, r5
 8007598:	f7fe fefe 	bl	8006398 <_free_r>
 800759c:	2300      	movs	r3, #0
 800759e:	6363      	str	r3, [r4, #52]	; 0x34
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075a6:	81a3      	strh	r3, [r4, #12]
 80075a8:	2300      	movs	r3, #0
 80075aa:	6063      	str	r3, [r4, #4]
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	6023      	str	r3, [r4, #0]
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	f043 0308 	orr.w	r3, r3, #8
 80075b6:	81a3      	strh	r3, [r4, #12]
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	b94b      	cbnz	r3, 80075d0 <__swsetup_r+0x7c>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c6:	d003      	beq.n	80075d0 <__swsetup_r+0x7c>
 80075c8:	4621      	mov	r1, r4
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 f884 	bl	80076d8 <__smakebuf_r>
 80075d0:	89a0      	ldrh	r0, [r4, #12]
 80075d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075d6:	f010 0301 	ands.w	r3, r0, #1
 80075da:	d00a      	beq.n	80075f2 <__swsetup_r+0x9e>
 80075dc:	2300      	movs	r3, #0
 80075de:	60a3      	str	r3, [r4, #8]
 80075e0:	6963      	ldr	r3, [r4, #20]
 80075e2:	425b      	negs	r3, r3
 80075e4:	61a3      	str	r3, [r4, #24]
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	b943      	cbnz	r3, 80075fc <__swsetup_r+0xa8>
 80075ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075ee:	d1c4      	bne.n	800757a <__swsetup_r+0x26>
 80075f0:	bd38      	pop	{r3, r4, r5, pc}
 80075f2:	0781      	lsls	r1, r0, #30
 80075f4:	bf58      	it	pl
 80075f6:	6963      	ldrpl	r3, [r4, #20]
 80075f8:	60a3      	str	r3, [r4, #8]
 80075fa:	e7f4      	b.n	80075e6 <__swsetup_r+0x92>
 80075fc:	2000      	movs	r0, #0
 80075fe:	e7f7      	b.n	80075f0 <__swsetup_r+0x9c>
 8007600:	20000068 	.word	0x20000068

08007604 <_raise_r>:
 8007604:	291f      	cmp	r1, #31
 8007606:	b538      	push	{r3, r4, r5, lr}
 8007608:	4604      	mov	r4, r0
 800760a:	460d      	mov	r5, r1
 800760c:	d904      	bls.n	8007618 <_raise_r+0x14>
 800760e:	2316      	movs	r3, #22
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	f04f 30ff 	mov.w	r0, #4294967295
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800761a:	b112      	cbz	r2, 8007622 <_raise_r+0x1e>
 800761c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007620:	b94b      	cbnz	r3, 8007636 <_raise_r+0x32>
 8007622:	4620      	mov	r0, r4
 8007624:	f000 f830 	bl	8007688 <_getpid_r>
 8007628:	462a      	mov	r2, r5
 800762a:	4601      	mov	r1, r0
 800762c:	4620      	mov	r0, r4
 800762e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007632:	f000 b817 	b.w	8007664 <_kill_r>
 8007636:	2b01      	cmp	r3, #1
 8007638:	d00a      	beq.n	8007650 <_raise_r+0x4c>
 800763a:	1c59      	adds	r1, r3, #1
 800763c:	d103      	bne.n	8007646 <_raise_r+0x42>
 800763e:	2316      	movs	r3, #22
 8007640:	6003      	str	r3, [r0, #0]
 8007642:	2001      	movs	r0, #1
 8007644:	e7e7      	b.n	8007616 <_raise_r+0x12>
 8007646:	2400      	movs	r4, #0
 8007648:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800764c:	4628      	mov	r0, r5
 800764e:	4798      	blx	r3
 8007650:	2000      	movs	r0, #0
 8007652:	e7e0      	b.n	8007616 <_raise_r+0x12>

08007654 <raise>:
 8007654:	4b02      	ldr	r3, [pc, #8]	; (8007660 <raise+0xc>)
 8007656:	4601      	mov	r1, r0
 8007658:	6818      	ldr	r0, [r3, #0]
 800765a:	f7ff bfd3 	b.w	8007604 <_raise_r>
 800765e:	bf00      	nop
 8007660:	20000068 	.word	0x20000068

08007664 <_kill_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d07      	ldr	r5, [pc, #28]	; (8007684 <_kill_r+0x20>)
 8007668:	2300      	movs	r3, #0
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	4611      	mov	r1, r2
 8007670:	602b      	str	r3, [r5, #0]
 8007672:	f7f9 fc07 	bl	8000e84 <_kill>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	d102      	bne.n	8007680 <_kill_r+0x1c>
 800767a:	682b      	ldr	r3, [r5, #0]
 800767c:	b103      	cbz	r3, 8007680 <_kill_r+0x1c>
 800767e:	6023      	str	r3, [r4, #0]
 8007680:	bd38      	pop	{r3, r4, r5, pc}
 8007682:	bf00      	nop
 8007684:	2000051c 	.word	0x2000051c

08007688 <_getpid_r>:
 8007688:	f7f9 bbf4 	b.w	8000e74 <_getpid>

0800768c <__swhatbuf_r>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	460c      	mov	r4, r1
 8007690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007694:	2900      	cmp	r1, #0
 8007696:	b096      	sub	sp, #88	; 0x58
 8007698:	4615      	mov	r5, r2
 800769a:	461e      	mov	r6, r3
 800769c:	da0d      	bge.n	80076ba <__swhatbuf_r+0x2e>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076a4:	f04f 0100 	mov.w	r1, #0
 80076a8:	bf0c      	ite	eq
 80076aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80076ae:	2340      	movne	r3, #64	; 0x40
 80076b0:	2000      	movs	r0, #0
 80076b2:	6031      	str	r1, [r6, #0]
 80076b4:	602b      	str	r3, [r5, #0]
 80076b6:	b016      	add	sp, #88	; 0x58
 80076b8:	bd70      	pop	{r4, r5, r6, pc}
 80076ba:	466a      	mov	r2, sp
 80076bc:	f000 f848 	bl	8007750 <_fstat_r>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	dbec      	blt.n	800769e <__swhatbuf_r+0x12>
 80076c4:	9901      	ldr	r1, [sp, #4]
 80076c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80076ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80076ce:	4259      	negs	r1, r3
 80076d0:	4159      	adcs	r1, r3
 80076d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076d6:	e7eb      	b.n	80076b0 <__swhatbuf_r+0x24>

080076d8 <__smakebuf_r>:
 80076d8:	898b      	ldrh	r3, [r1, #12]
 80076da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076dc:	079d      	lsls	r5, r3, #30
 80076de:	4606      	mov	r6, r0
 80076e0:	460c      	mov	r4, r1
 80076e2:	d507      	bpl.n	80076f4 <__smakebuf_r+0x1c>
 80076e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	6123      	str	r3, [r4, #16]
 80076ec:	2301      	movs	r3, #1
 80076ee:	6163      	str	r3, [r4, #20]
 80076f0:	b002      	add	sp, #8
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	ab01      	add	r3, sp, #4
 80076f6:	466a      	mov	r2, sp
 80076f8:	f7ff ffc8 	bl	800768c <__swhatbuf_r>
 80076fc:	9900      	ldr	r1, [sp, #0]
 80076fe:	4605      	mov	r5, r0
 8007700:	4630      	mov	r0, r6
 8007702:	f7fe febd 	bl	8006480 <_malloc_r>
 8007706:	b948      	cbnz	r0, 800771c <__smakebuf_r+0x44>
 8007708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800770c:	059a      	lsls	r2, r3, #22
 800770e:	d4ef      	bmi.n	80076f0 <__smakebuf_r+0x18>
 8007710:	f023 0303 	bic.w	r3, r3, #3
 8007714:	f043 0302 	orr.w	r3, r3, #2
 8007718:	81a3      	strh	r3, [r4, #12]
 800771a:	e7e3      	b.n	80076e4 <__smakebuf_r+0xc>
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	6020      	str	r0, [r4, #0]
 8007720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	6163      	str	r3, [r4, #20]
 800772a:	9b01      	ldr	r3, [sp, #4]
 800772c:	6120      	str	r0, [r4, #16]
 800772e:	b15b      	cbz	r3, 8007748 <__smakebuf_r+0x70>
 8007730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007734:	4630      	mov	r0, r6
 8007736:	f000 f81d 	bl	8007774 <_isatty_r>
 800773a:	b128      	cbz	r0, 8007748 <__smakebuf_r+0x70>
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	f043 0301 	orr.w	r3, r3, #1
 8007746:	81a3      	strh	r3, [r4, #12]
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	431d      	orrs	r5, r3
 800774c:	81a5      	strh	r5, [r4, #12]
 800774e:	e7cf      	b.n	80076f0 <__smakebuf_r+0x18>

08007750 <_fstat_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d07      	ldr	r5, [pc, #28]	; (8007770 <_fstat_r+0x20>)
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	4611      	mov	r1, r2
 800775c:	602b      	str	r3, [r5, #0]
 800775e:	f7f9 fbf0 	bl	8000f42 <_fstat>
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	d102      	bne.n	800776c <_fstat_r+0x1c>
 8007766:	682b      	ldr	r3, [r5, #0]
 8007768:	b103      	cbz	r3, 800776c <_fstat_r+0x1c>
 800776a:	6023      	str	r3, [r4, #0]
 800776c:	bd38      	pop	{r3, r4, r5, pc}
 800776e:	bf00      	nop
 8007770:	2000051c 	.word	0x2000051c

08007774 <_isatty_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d06      	ldr	r5, [pc, #24]	; (8007790 <_isatty_r+0x1c>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	f7f9 fbef 	bl	8000f62 <_isatty>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_isatty_r+0x1a>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_isatty_r+0x1a>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	2000051c 	.word	0x2000051c

08007794 <_init>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	bf00      	nop
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr

080077a0 <_fini>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	bf00      	nop
 80077a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a6:	bc08      	pop	{r3}
 80077a8:	469e      	mov	lr, r3
 80077aa:	4770      	bx	lr
