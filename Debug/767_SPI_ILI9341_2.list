
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025e50  08008ab0  08008ab0  00018ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e900  0802e900  000401d8  2**0
                  CONTENTS
  4 .ARM          00000008  0802e900  0802e900  0003e900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e908  0802e908  000401d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e908  0802e908  0003e908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e90c  0802e90c  0003e90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0802e910  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  200001d8  0802eae8  000401d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  0802eae8  000405cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040206  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a21  00000000  00000000  00040249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031be  00000000  00000000  00051c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00054e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de1  00000000  00000000  00056030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a99f  00000000  00000000  00056e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173fe  00000000  00000000  000817b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffec6  00000000  00000000  00098bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bb4  00000000  00000000  00198a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0019e628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08008a98 	.word	0x08008a98

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08008a98 	.word	0x08008a98

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b8d      	ldr	r3, [pc, #564]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a8c      	ldr	r2, [pc, #560]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0310 	and.w	r3, r3, #16
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b87      	ldr	r3, [pc, #540]	; (8000838 <MX_GPIO_Init+0x24c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a86      	ldr	r2, [pc, #536]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b84      	ldr	r3, [pc, #528]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b81      	ldr	r3, [pc, #516]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a80      	ldr	r2, [pc, #512]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b7e      	ldr	r3, [pc, #504]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	4b7b      	ldr	r3, [pc, #492]	; (8000838 <MX_GPIO_Init+0x24c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a7a      	ldr	r2, [pc, #488]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b78      	ldr	r3, [pc, #480]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b75      	ldr	r3, [pc, #468]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a74      	ldr	r2, [pc, #464]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b72      	ldr	r3, [pc, #456]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <MX_GPIO_Init+0x24c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b69      	ldr	r3, [pc, #420]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a68      	ldr	r2, [pc, #416]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006aa:	4b63      	ldr	r3, [pc, #396]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a62      	ldr	r2, [pc, #392]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2168      	movs	r1, #104	; 0x68
 80006c6:	485d      	ldr	r0, [pc, #372]	; (800083c <MX_GPIO_Init+0x250>)
 80006c8:	f002 fb4e 	bl	8002d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006d2:	485b      	ldr	r0, [pc, #364]	; (8000840 <MX_GPIO_Init+0x254>)
 80006d4:	f002 fb48 	bl	8002d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	4859      	ldr	r0, [pc, #356]	; (8000844 <MX_GPIO_Init+0x258>)
 80006de:	f002 fb43 	bl	8002d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006e8:	4857      	ldr	r0, [pc, #348]	; (8000848 <MX_GPIO_Init+0x25c>)
 80006ea:	f002 fb3d 	bl	8002d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006ee:	2314      	movs	r3, #20
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	484e      	ldr	r0, [pc, #312]	; (800083c <MX_GPIO_Init+0x250>)
 8000702:	f002 f96d 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000706:	2368      	movs	r3, #104	; 0x68
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	4847      	ldr	r0, [pc, #284]	; (800083c <MX_GPIO_Init+0x250>)
 800071e:	f002 f95f 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	4844      	ldr	r0, [pc, #272]	; (8000848 <MX_GPIO_Init+0x25c>)
 8000738:	f002 f952 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800073c:	2332      	movs	r3, #50	; 0x32
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074c:	230b      	movs	r3, #11
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	483c      	ldr	r0, [pc, #240]	; (8000848 <MX_GPIO_Init+0x25c>)
 8000758:	f002 f942 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800075c:	2386      	movs	r3, #134	; 0x86
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076c:	230b      	movs	r3, #11
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	4835      	ldr	r0, [pc, #212]	; (800084c <MX_GPIO_Init+0x260>)
 8000778:	f002 f932 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4829      	ldr	r0, [pc, #164]	; (8000840 <MX_GPIO_Init+0x254>)
 800079a:	f002 f921 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800079e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	4822      	ldr	r0, [pc, #136]	; (8000840 <MX_GPIO_Init+0x254>)
 80007b8:	f002 f912 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <MX_GPIO_Init+0x258>)
 80007d4:	f002 f904 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	4619      	mov	r1, r3
 80007ea:	4816      	ldr	r0, [pc, #88]	; (8000844 <MX_GPIO_Init+0x258>)
 80007ec:	f002 f8f8 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <MX_GPIO_Init+0x25c>)
 800080a:	f002 f8e9 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800080e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_GPIO_Init+0x258>)
 800082c:	f002 f8d8 	bl	80029e0 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3738      	adds	r7, #56	; 0x38
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000
 8000840:	40020400 	.word	0x40020400
 8000844:	40021800 	.word	0x40021800
 8000848:	40020800 	.word	0x40020800
 800084c:	40020000 	.word	0x40020000

08000850 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000854:	f3bf 8f4f 	dsb	sy
}
 8000858:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085a:	f3bf 8f6f 	isb	sy
}
 800085e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <SCB_EnableICache+0x48>)
 8000862:	2200      	movs	r2, #0
 8000864:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000868:	f3bf 8f4f 	dsb	sy
}
 800086c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800086e:	f3bf 8f6f 	isb	sy
}
 8000872:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <SCB_EnableICache+0x48>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <SCB_EnableICache+0x48>)
 800087a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
}
 8000884:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000886:	f3bf 8f6f 	isb	sy
}
 800088a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <SCB_EnableDCache+0x84>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
}
 80008ae:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <SCB_EnableDCache+0x84>)
 80008b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008b6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	0b5b      	lsrs	r3, r3, #13
 80008bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008c0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ca:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	015a      	lsls	r2, r3, #5
 80008d0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008d4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008da:	4911      	ldr	r1, [pc, #68]	; (8000920 <SCB_EnableDCache+0x84>)
 80008dc:	4313      	orrs	r3, r2
 80008de:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	60ba      	str	r2, [r7, #8]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1ef      	bne.n	80008cc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	60fa      	str	r2, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1e5      	bne.n	80008c2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008f6:	f3bf 8f4f 	dsb	sy
}
 80008fa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <SCB_EnableDCache+0x84>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <SCB_EnableDCache+0x84>)
 8000902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000906:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000908:	f3bf 8f4f 	dsb	sy
}
 800090c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800090e:	f3bf 8f6f 	isb	sy
}
 8000912:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00
 8000924:	00000000 	.word	0x00000000

08000928 <rgb888_to_rgb565>:
/* USER CODE BEGIN 0 */
//void displayHEX(uint32_t myNumber){
//	sprintf(toHex,"0x%08X",myNumber);
//};

uint16_t rgb888_to_rgb565(uint8_t red8, uint8_t green8, uint8_t blue8) {
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	460b      	mov	r3, r1
 8000934:	71bb      	strb	r3, [r7, #6]
 8000936:	4613      	mov	r3, r2
 8000938:	717b      	strb	r3, [r7, #5]
    // Convert 8-bit red to 5-bit red.
    uint8_t red5 = (uint8_t)((red8 / 255.0) * 31);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000944:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80009e0 <rgb888_to_rgb565+0xb8>
 8000948:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800094c:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 8000950:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000954:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000958:	edc7 7a00 	vstr	s15, [r7]
 800095c:	783b      	ldrb	r3, [r7, #0]
 800095e:	75fb      	strb	r3, [r7, #23]
    // Convert 8-bit green to 6-bit green.
    uint8_t green6 = (uint8_t)((green8 / 255.0) * 63);
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	ee07 3a90 	vmov	s15, r3
 8000966:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800096a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80009e0 <rgb888_to_rgb565+0xb8>
 800096e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000972:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 80009e8 <rgb888_to_rgb565+0xc0>
 8000976:	ee27 7b06 	vmul.f64	d7, d7, d6
 800097a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800097e:	edc7 7a00 	vstr	s15, [r7]
 8000982:	783b      	ldrb	r3, [r7, #0]
 8000984:	75bb      	strb	r3, [r7, #22]
    // Convert 8-bit blue to 5-bit blue.
    uint8_t blue5 = (uint8_t)((blue8 / 255.0) * 31);
 8000986:	797b      	ldrb	r3, [r7, #5]
 8000988:	ee07 3a90 	vmov	s15, r3
 800098c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000990:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80009e0 <rgb888_to_rgb565+0xb8>
 8000994:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000998:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 800099c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a4:	edc7 7a00 	vstr	s15, [r7]
 80009a8:	783b      	ldrb	r3, [r7, #0]
 80009aa:	757b      	strb	r3, [r7, #21]

    // Shift the red value to the left by 11 bits.
    uint16_t red5_shifted = (uint16_t)(red5) << 11;
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	02db      	lsls	r3, r3, #11
 80009b2:	827b      	strh	r3, [r7, #18]
    // Shift the green value to the left by 5 bits.
    uint16_t green6_shifted = (uint16_t)(green6) << 5;
 80009b4:	7dbb      	ldrb	r3, [r7, #22]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	015b      	lsls	r3, r3, #5
 80009ba:	823b      	strh	r3, [r7, #16]

    // Combine the red, green, and blue values.
    uint16_t rgb565 = red5_shifted | green6_shifted | blue5;
 80009bc:	8a7a      	ldrh	r2, [r7, #18]
 80009be:	8a3b      	ldrh	r3, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	7d7b      	ldrb	r3, [r7, #21]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	81fb      	strh	r3, [r7, #14]

    return rgb565;
 80009cc:	89fb      	ldrh	r3, [r7, #14]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	371c      	adds	r7, #28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	f3af 8000 	nop.w
 80009e0:	00000000 	.word	0x00000000
 80009e4:	406fe000 	.word	0x406fe000
 80009e8:	00000000 	.word	0x00000000
 80009ec:	404f8000 	.word	0x404f8000

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80009f6:	f7ff ff2b 	bl	8000850 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80009fa:	f7ff ff4f 	bl	800089c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fe:	f001 fe79 	bl	80026f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a02:	f000 fa7f 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a06:	f7ff fdf1 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a0a:	f000 fd67 	bl	80014dc <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000a0e:	f000 fb49 	bl	80010a4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000a12:	f000 fcef 	bl	80013f4 <MX_TIM1_Init>
  MX_RNG_Init();
 8000a16:	f000 fb11 	bl	800103c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8000a1a:	f001 fa2d 	bl	8001e78 <ILI9341_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //----------------------------------------------------------PERFORMANCE TEST
	  		ILI9341_Fill_Screen(WHITE);
 8000a1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a22:	f001 fbd5 	bl	80021d0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1); //กลับข้อความ
 8000a26:	2001      	movs	r0, #1
 8000a28:	f001 f9c8 	bl	8001dbc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("27.1C", 30, 30, BLACK, 2, WHITE);
 8000a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	2302      	movs	r3, #2
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	221e      	movs	r2, #30
 8000a3a:	211e      	movs	r1, #30
 8000a3c:	489f      	ldr	r0, [pc, #636]	; (8000cbc <main+0x2cc>)
 8000a3e:	f000 ff0d 	bl	800185c <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("55.6%RH", 180, 30, BLACK, 2, WHITE);
 8000a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	2302      	movs	r3, #2
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	221e      	movs	r2, #30
 8000a50:	21b4      	movs	r1, #180	; 0xb4
 8000a52:	489b      	ldr	r0, [pc, #620]	; (8000cc0 <main+0x2d0>)
 8000a54:	f000 ff02 	bl	800185c <ILI9341_Draw_Text>
	  		ILI9341_Draw_Filled_Circle(160, 30,15, h);// x , y , r ,color
 8000a58:	4b9a      	ldr	r3, [pc, #616]	; (8000cc4 <main+0x2d4>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	211e      	movs	r1, #30
 8000a60:	20a0      	movs	r0, #160	; 0xa0
 8000a62:	f000 fdd8 	bl	8001616 <ILI9341_Draw_Filled_Circle>
	  		/////////////////////////////////////////////////////////////////////////

	  		ILI9341_Draw_Filled_Circle(30, 80,15, 0XF800);
 8000a66:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	2150      	movs	r1, #80	; 0x50
 8000a6e:	201e      	movs	r0, #30
 8000a70:	f000 fdd1 	bl	8001616 <ILI9341_Draw_Filled_Circle>
	  		ILI9341_Draw_Rectangle(50, 70, 100,20, 0XF81F);//x , y , lx, ly ,color
 8000a74:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2314      	movs	r3, #20
 8000a7c:	2264      	movs	r2, #100	; 0x64
 8000a7e:	2146      	movs	r1, #70	; 0x46
 8000a80:	2032      	movs	r0, #50	; 0x32
 8000a82:	f001 fca5 	bl	80023d0 <ILI9341_Draw_Rectangle>

	  		//ILI9341_Draw_Rectangle(50, 70, 20,20, 0X07E0);
	  		if (redVal <= 10)
 8000a86:	4b90      	ldr	r3, [pc, #576]	; (8000cc8 <main+0x2d8>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b0a      	cmp	r3, #10
 8000a8c:	d826      	bhi.n	8000adc <main+0xec>
	  		{
	  			ILI9341_Draw_Rectangle(50, 70, redVal*10,20, 0XF800);//x , y , lx, ly ,color
 8000a8e:	4b8e      	ldr	r3, [pc, #568]	; (8000cc8 <main+0x2d8>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	0092      	lsls	r2, r2, #2
 8000a98:	4413      	add	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2314      	movs	r3, #20
 8000aa6:	2146      	movs	r1, #70	; 0x46
 8000aa8:	2032      	movs	r0, #50	; 0x32
 8000aaa:	f001 fc91 	bl	80023d0 <ILI9341_Draw_Rectangle>
	  			sprintf(redPercent,"%d%%",redVal*10);
 8000aae:	4b86      	ldr	r3, [pc, #536]	; (8000cc8 <main+0x2d8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	461a      	mov	r2, r3
 8000abe:	4983      	ldr	r1, [pc, #524]	; (8000ccc <main+0x2dc>)
 8000ac0:	4883      	ldr	r0, [pc, #524]	; (8000cd0 <main+0x2e0>)
 8000ac2:	f005 fa57 	bl	8005f74 <siprintf>
	  			ILI9341_Draw_Text(redPercent, 180, 70, BLACK, 2, WHITE);
 8000ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	2302      	movs	r3, #2
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2246      	movs	r2, #70	; 0x46
 8000ad4:	21b4      	movs	r1, #180	; 0xb4
 8000ad6:	487e      	ldr	r0, [pc, #504]	; (8000cd0 <main+0x2e0>)
 8000ad8:	f000 fec0 	bl	800185c <ILI9341_Draw_Text>
//	  				redVal = 0;
//	  				redDecimal=0;
//	  			}
	  		}
	  		////////////////////////////////////green///////////////////////////////////
	  		ILI9341_Draw_Filled_Circle(30, 130,15, 0X07E0);
 8000adc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	2182      	movs	r1, #130	; 0x82
 8000ae4:	201e      	movs	r0, #30
 8000ae6:	f000 fd96 	bl	8001616 <ILI9341_Draw_Filled_Circle>
			ILI9341_Draw_Rectangle(50, 120, 100,20, 0XC618);//x , y , lx, ly ,color
 8000aea:	f24c 6318 	movw	r3, #50712	; 0xc618
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2314      	movs	r3, #20
 8000af2:	2264      	movs	r2, #100	; 0x64
 8000af4:	2178      	movs	r1, #120	; 0x78
 8000af6:	2032      	movs	r0, #50	; 0x32
 8000af8:	f001 fc6a 	bl	80023d0 <ILI9341_Draw_Rectangle>
			if (greenVal <= 10)
 8000afc:	4b75      	ldr	r3, [pc, #468]	; (8000cd4 <main+0x2e4>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b0a      	cmp	r3, #10
 8000b02:	d826      	bhi.n	8000b52 <main+0x162>
			{
				ILI9341_Draw_Rectangle(50, 120, greenVal*10,20, 0X07E0);//x , y , lx, ly ,color
 8000b04:	4b73      	ldr	r3, [pc, #460]	; (8000cd4 <main+0x2e4>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	2178      	movs	r1, #120	; 0x78
 8000b1e:	2032      	movs	r0, #50	; 0x32
 8000b20:	f001 fc56 	bl	80023d0 <ILI9341_Draw_Rectangle>
				sprintf(greenPercent,"%d%%",greenVal*10);
 8000b24:	4b6b      	ldr	r3, [pc, #428]	; (8000cd4 <main+0x2e4>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	461a      	mov	r2, r3
 8000b34:	4965      	ldr	r1, [pc, #404]	; (8000ccc <main+0x2dc>)
 8000b36:	4868      	ldr	r0, [pc, #416]	; (8000cd8 <main+0x2e8>)
 8000b38:	f005 fa1c 	bl	8005f74 <siprintf>
				ILI9341_Draw_Text(greenPercent, 180, 120, BLACK, 2, WHITE);
 8000b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	2302      	movs	r3, #2
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2300      	movs	r3, #0
 8000b48:	2278      	movs	r2, #120	; 0x78
 8000b4a:	21b4      	movs	r1, #180	; 0xb4
 8000b4c:	4862      	ldr	r0, [pc, #392]	; (8000cd8 <main+0x2e8>)
 8000b4e:	f000 fe85 	bl	800185c <ILI9341_Draw_Text>
//					greenVal = 0;
//					greenDecimal = 0;
//				}
			}
			////////////////////////////////////blue///////////////////////////////////
			ILI9341_Draw_Filled_Circle(30, 180,15, 0X001F);
 8000b52:	231f      	movs	r3, #31
 8000b54:	220f      	movs	r2, #15
 8000b56:	21b4      	movs	r1, #180	; 0xb4
 8000b58:	201e      	movs	r0, #30
 8000b5a:	f000 fd5c 	bl	8001616 <ILI9341_Draw_Filled_Circle>
			ILI9341_Draw_Rectangle(50, 170, 100,20, 0X07FF);//x , y , lx, ly ,color
 8000b5e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2314      	movs	r3, #20
 8000b66:	2264      	movs	r2, #100	; 0x64
 8000b68:	21aa      	movs	r1, #170	; 0xaa
 8000b6a:	2032      	movs	r0, #50	; 0x32
 8000b6c:	f001 fc30 	bl	80023d0 <ILI9341_Draw_Rectangle>
			if (blueVal <= 10)
 8000b70:	4b5a      	ldr	r3, [pc, #360]	; (8000cdc <main+0x2ec>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b0a      	cmp	r3, #10
 8000b76:	d82c      	bhi.n	8000bd2 <main+0x1e2>
			{
				ILI9341_Draw_Rectangle(50, 170, blueVal*10,20, 0X001F);//x , y , lx, ly ,color
 8000b78:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <main+0x2ec>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	231f      	movs	r3, #31
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2314      	movs	r3, #20
 8000b8e:	21aa      	movs	r1, #170	; 0xaa
 8000b90:	2032      	movs	r0, #50	; 0x32
 8000b92:	f001 fc1d 	bl	80023d0 <ILI9341_Draw_Rectangle>
				sprintf(bluePercent,"%d%%",blueVal*10);
 8000b96:	4b51      	ldr	r3, [pc, #324]	; (8000cdc <main+0x2ec>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4949      	ldr	r1, [pc, #292]	; (8000ccc <main+0x2dc>)
 8000ba8:	484d      	ldr	r0, [pc, #308]	; (8000ce0 <main+0x2f0>)
 8000baa:	f005 f9e3 	bl	8005f74 <siprintf>
				ILI9341_Draw_Text(bluePercent, 180, 170, BLACK, 2, WHITE);
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	22aa      	movs	r2, #170	; 0xaa
 8000bbc:	21b4      	movs	r1, #180	; 0xb4
 8000bbe:	4848      	ldr	r0, [pc, #288]	; (8000ce0 <main+0x2f0>)
 8000bc0:	f000 fe4c 	bl	800185c <ILI9341_Draw_Text>
				sprintf(someValToString,"%d",blueDecimal);
 8000bc4:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <main+0x2f4>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4947      	ldr	r1, [pc, #284]	; (8000ce8 <main+0x2f8>)
 8000bcc:	4847      	ldr	r0, [pc, #284]	; (8000cec <main+0x2fc>)
 8000bce:	f005 f9d1 	bl	8005f74 <siprintf>
//					blueVal = 0;
//					blueDecimal =0;
//				}
			}

			result = rgb888_to_rgb565(redDecimal,greenDecimal, blueDecimal);
 8000bd2:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <main+0x300>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4a47      	ldr	r2, [pc, #284]	; (8000cf4 <main+0x304>)
 8000bd8:	7811      	ldrb	r1, [r2, #0]
 8000bda:	4a42      	ldr	r2, [pc, #264]	; (8000ce4 <main+0x2f4>)
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fea2 	bl	8000928 <rgb888_to_rgb565>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <main+0x308>)
 8000bea:	801a      	strh	r2, [r3, #0]
			sprintf(resultHex,"0X%04X", result);
 8000bec:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <main+0x308>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4942      	ldr	r1, [pc, #264]	; (8000cfc <main+0x30c>)
 8000bf4:	4842      	ldr	r0, [pc, #264]	; (8000d00 <main+0x310>)
 8000bf6:	f005 f9bd 	bl	8005f74 <siprintf>
			ILI9341_Draw_Text(resultHex, 180, 210, BLACK, 2, WHITE);
 8000bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	2302      	movs	r3, #2
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2300      	movs	r3, #0
 8000c06:	22d2      	movs	r2, #210	; 0xd2
 8000c08:	21b4      	movs	r1, #180	; 0xb4
 8000c0a:	483d      	ldr	r0, [pc, #244]	; (8000d00 <main+0x310>)
 8000c0c:	f000 fe26 	bl	800185c <ILI9341_Draw_Text>

			sscanf(resultHex, "%x", &h);
 8000c10:	4a2c      	ldr	r2, [pc, #176]	; (8000cc4 <main+0x2d4>)
 8000c12:	493c      	ldr	r1, [pc, #240]	; (8000d04 <main+0x314>)
 8000c14:	483a      	ldr	r0, [pc, #232]	; (8000d00 <main+0x310>)
 8000c16:	f005 f9cd 	bl	8005fb4 <siscanf>

//	  		ILI9341_Fill_Screen(WHITE);
	  			  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f001 f8ce 	bl	8001dbc <ILI9341_Set_Rotation>
//	  			  		ILI9341_Draw_Text("Touchscreen", 10, 10, BLACK, 2, WHITE);
//	  			  		ILI9341_Draw_Text("Touch to draw", 10, 30, BLACK, 2, WHITE);
	  			  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f001 f8cb 	bl	8001dbc <ILI9341_Set_Rotation>


//	  			  		while(1)
//	  			  		{

	  			  			if(TP_Touchpad_Pressed())
 8000c26:	f001 fd55 	bl	80026d4 <TP_Touchpad_Pressed>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 80f2 	beq.w	8000e16 <main+0x426>
	  			          {

	  			  					uint16_t x_pos = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	80fb      	strh	r3, [r7, #6]
	  			  					uint16_t y_pos = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	80bb      	strh	r3, [r7, #4]


	  			  					HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c40:	4831      	ldr	r0, [pc, #196]	; (8000d08 <main+0x318>)
 8000c42:	f002 f891 	bl	8002d68 <HAL_GPIO_WritePin>

	  			            uint16_t position_array[2];

	  			  					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 fc81 	bl	8002550 <TP_Read_Coordinates>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	f040 8130 	bne.w	8000eb6 <main+0x4c6>
	  			  					{
	  			  					x_pos = position_array[0];
 8000c56:	883b      	ldrh	r3, [r7, #0]
 8000c58:	80fb      	strh	r3, [r7, #6]
	  			  					y_pos = position_array[1];
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	80bb      	strh	r3, [r7, #4]
	  			  					if((x_pos >= 146 && x_pos <=170) && (y_pos >=6 && y_pos <=34))//RedCheck
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	2b91      	cmp	r3, #145	; 0x91
 8000c62:	d955      	bls.n	8000d10 <main+0x320>
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	2baa      	cmp	r3, #170	; 0xaa
 8000c68:	d852      	bhi.n	8000d10 <main+0x320>
 8000c6a:	88bb      	ldrh	r3, [r7, #4]
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d94f      	bls.n	8000d10 <main+0x320>
 8000c70:	88bb      	ldrh	r3, [r7, #4]
 8000c72:	2b22      	cmp	r3, #34	; 0x22
 8000c74:	d84c      	bhi.n	8000d10 <main+0x320>
	  			  					{
	  			  						ILI9341_Draw_Text("r", 180, 210, BLACK, 2, WHITE);
 8000c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c7a:	9301      	str	r3, [sp, #4]
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2300      	movs	r3, #0
 8000c82:	22d2      	movs	r2, #210	; 0xd2
 8000c84:	21b4      	movs	r1, #180	; 0xb4
 8000c86:	4821      	ldr	r0, [pc, #132]	; (8000d0c <main+0x31c>)
 8000c88:	f000 fde8 	bl	800185c <ILI9341_Draw_Text>
	  			  						redVal += 1;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <main+0x2d8>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <main+0x2d8>)
 8000c96:	701a      	strb	r2, [r3, #0]
	  			  						redDecimal+=25;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <main+0x300>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	3319      	adds	r3, #25
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <main+0x300>)
 8000ca2:	701a      	strb	r2, [r3, #0]
	  			  						if(redVal == 11){
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <main+0x2d8>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b0b      	cmp	r3, #11
 8000caa:	f040 80a7 	bne.w	8000dfc <main+0x40c>
	  			  						  	redVal = 0;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <main+0x2d8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
	  			  						  	redDecimal=0;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <main+0x300>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
	  			  						if(redVal == 11){
 8000cba:	e09f      	b.n	8000dfc <main+0x40c>
 8000cbc:	08008ab0 	.word	0x08008ab0
 8000cc0:	08008ab8 	.word	0x08008ab8
 8000cc4:	200001fa 	.word	0x200001fa
 8000cc8:	200001f4 	.word	0x200001f4
 8000ccc:	08008ac0 	.word	0x08008ac0
 8000cd0:	20000230 	.word	0x20000230
 8000cd4:	200001f5 	.word	0x200001f5
 8000cd8:	20000264 	.word	0x20000264
 8000cdc:	200001f6 	.word	0x200001f6
 8000ce0:	20000298 	.word	0x20000298
 8000ce4:	200001f8 	.word	0x200001f8
 8000ce8:	08008ac8 	.word	0x08008ac8
 8000cec:	200001fc 	.word	0x200001fc
 8000cf0:	200001f7 	.word	0x200001f7
 8000cf4:	200001f9 	.word	0x200001f9
 8000cf8:	200002ca 	.word	0x200002ca
 8000cfc:	08008acc 	.word	0x08008acc
 8000d00:	200002cc 	.word	0x200002cc
 8000d04:	08008ad4 	.word	0x08008ad4
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	08008ad8 	.word	0x08008ad8
	  			  						 }
	  			  					}
	  			  					else if((x_pos >= 90 && x_pos <=119) && (y_pos >=9 && y_pos <=60))//GreenCheck
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	2b59      	cmp	r3, #89	; 0x59
 8000d14:	d92a      	bls.n	8000d6c <main+0x37c>
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	2b77      	cmp	r3, #119	; 0x77
 8000d1a:	d827      	bhi.n	8000d6c <main+0x37c>
 8000d1c:	88bb      	ldrh	r3, [r7, #4]
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d924      	bls.n	8000d6c <main+0x37c>
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	2b3c      	cmp	r3, #60	; 0x3c
 8000d26:	d821      	bhi.n	8000d6c <main+0x37c>
	  			  					{
	  			  						ILI9341_Draw_Text("g", 180, 210, BLACK, 2, WHITE);
 8000d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2302      	movs	r3, #2
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2300      	movs	r3, #0
 8000d34:	22d2      	movs	r2, #210	; 0xd2
 8000d36:	21b4      	movs	r1, #180	; 0xb4
 8000d38:	4863      	ldr	r0, [pc, #396]	; (8000ec8 <main+0x4d8>)
 8000d3a:	f000 fd8f 	bl	800185c <ILI9341_Draw_Text>
	  			  						greenVal += 1;
 8000d3e:	4b63      	ldr	r3, [pc, #396]	; (8000ecc <main+0x4dc>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <main+0x4dc>)
 8000d48:	701a      	strb	r2, [r3, #0]
	  			  						greenDecimal+=25;
 8000d4a:	4b61      	ldr	r3, [pc, #388]	; (8000ed0 <main+0x4e0>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	3319      	adds	r3, #25
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b5f      	ldr	r3, [pc, #380]	; (8000ed0 <main+0x4e0>)
 8000d54:	701a      	strb	r2, [r3, #0]
	  			  						if(greenVal == 11){
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <main+0x4dc>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b0b      	cmp	r3, #11
 8000d5c:	d14e      	bne.n	8000dfc <main+0x40c>
											greenVal = 0;
 8000d5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ecc <main+0x4dc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
											greenDecimal = 0;
 8000d64:	4b5a      	ldr	r3, [pc, #360]	; (8000ed0 <main+0x4e0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
	  			  						if(greenVal == 11){
 8000d6a:	e047      	b.n	8000dfc <main+0x40c>
										}
	  			  					}
	  			  					else if((x_pos >= 44 && x_pos <=69) && (y_pos >=9 && y_pos <=42))//GreenCheck
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	2b2b      	cmp	r3, #43	; 0x2b
 8000d70:	d92a      	bls.n	8000dc8 <main+0x3d8>
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	2b45      	cmp	r3, #69	; 0x45
 8000d76:	d827      	bhi.n	8000dc8 <main+0x3d8>
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d924      	bls.n	8000dc8 <main+0x3d8>
 8000d7e:	88bb      	ldrh	r3, [r7, #4]
 8000d80:	2b2a      	cmp	r3, #42	; 0x2a
 8000d82:	d821      	bhi.n	8000dc8 <main+0x3d8>
	  			  					{
	  			  						ILI9341_Draw_Text("b", 180, 210, BLACK, 2, WHITE);
 8000d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	22d2      	movs	r2, #210	; 0xd2
 8000d92:	21b4      	movs	r1, #180	; 0xb4
 8000d94:	484f      	ldr	r0, [pc, #316]	; (8000ed4 <main+0x4e4>)
 8000d96:	f000 fd61 	bl	800185c <ILI9341_Draw_Text>
	  			  						blueVal += 1;
 8000d9a:	4b4f      	ldr	r3, [pc, #316]	; (8000ed8 <main+0x4e8>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <main+0x4e8>)
 8000da4:	701a      	strb	r2, [r3, #0]
	  			  						blueDecimal+=25;
 8000da6:	4b4d      	ldr	r3, [pc, #308]	; (8000edc <main+0x4ec>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	3319      	adds	r3, #25
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b4b      	ldr	r3, [pc, #300]	; (8000edc <main+0x4ec>)
 8000db0:	701a      	strb	r2, [r3, #0]
	  			  						if(blueVal == 11){
 8000db2:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <main+0x4e8>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b0b      	cmp	r3, #11
 8000db8:	d120      	bne.n	8000dfc <main+0x40c>
											blueVal = 0;
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <main+0x4e8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
											blueDecimal =0;
 8000dc0:	4b46      	ldr	r3, [pc, #280]	; (8000edc <main+0x4ec>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
	  			  						if(blueVal == 11){
 8000dc6:	e019      	b.n	8000dfc <main+0x40c>
										}
	  			  					}
	  			  					else if((x_pos >= 200 && x_pos <=231) && (y_pos >=145 && y_pos <=176))//Center Top
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	2bc7      	cmp	r3, #199	; 0xc7
 8000dcc:	d916      	bls.n	8000dfc <main+0x40c>
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	2be7      	cmp	r3, #231	; 0xe7
 8000dd2:	d813      	bhi.n	8000dfc <main+0x40c>
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	2b90      	cmp	r3, #144	; 0x90
 8000dd8:	d910      	bls.n	8000dfc <main+0x40c>
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	2bb0      	cmp	r3, #176	; 0xb0
 8000dde:	d80d      	bhi.n	8000dfc <main+0x40c>
	  			  					{
	  			  						ILI9341_Draw_Text("c", 180, 210, BLACK, 2, WHITE);
 8000de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	2302      	movs	r3, #2
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2300      	movs	r3, #0
 8000dec:	22d2      	movs	r2, #210	; 0xd2
 8000dee:	21b4      	movs	r1, #180	; 0xb4
 8000df0:	483b      	ldr	r0, [pc, #236]	; (8000ee0 <main+0x4f0>)
 8000df2:	f000 fd33 	bl	800185c <ILI9341_Draw_Text>
	  			  						toSecondPage = 1;
 8000df6:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <main+0x4f4>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
	  			  					}
	  			  					ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);
 8000dfc:	88b9      	ldrh	r1, [r7, #4]
 8000dfe:	88f8      	ldrh	r0, [r7, #6]
 8000e00:	2300      	movs	r3, #0
 8000e02:	2202      	movs	r2, #2
 8000e04:	f000 fc07 	bl	8001616 <ILI9341_Draw_Filled_Circle>

	  			  					ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 ffd7 	bl	8001dbc <ILI9341_Set_Rotation>
//	  			  					char counter_buff[30];
//	  			  					sprintf(counter_buff, "POS X: %.3d", x_pos);
//	  			  					ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
//	  			  					sprintf(counter_buff, "POS Y: %.3d", y_pos);
//	  			  					ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
	  			  					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 ffd4 	bl	8001dbc <ILI9341_Set_Rotation>
 8000e14:	e04f      	b.n	8000eb6 <main+0x4c6>
//	  			  					ILI9341_Draw_Pixel(x_pos, y_pos, BLACK);

	  			          }
	  			  			else
	  			  			{
	  			  				HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000e1c:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <main+0x4f8>)
 8000e1e:	f001 ffa3 	bl	8002d68 <HAL_GPIO_WritePin>

//	  			  		}


//	  		ILI9341_Fill_Screen(WHITE);
	  			  		while(toSecondPage){
 8000e22:	e048      	b.n	8000eb6 <main+0x4c6>
	  			  			ILI9341_Fill_Screen(WHITE);
 8000e24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e28:	f001 f9d2 	bl	80021d0 <ILI9341_Fill_Screen>
							ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 ffc5 	bl	8001dbc <ILI9341_Set_Rotation>
							ILI9341_Draw_Text("Group No.11", 135, 40, h, 2, WHITE);
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <main+0x4fc>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3a:	9201      	str	r2, [sp, #4]
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	9200      	str	r2, [sp, #0]
 8000e40:	2228      	movs	r2, #40	; 0x28
 8000e42:	2187      	movs	r1, #135	; 0x87
 8000e44:	482a      	ldr	r0, [pc, #168]	; (8000ef0 <main+0x500>)
 8000e46:	f000 fd09 	bl	800185c <ILI9341_Draw_Text>
							ILI9341_Draw_Text("Sittha", 135, 80, h, 2, WHITE);
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <main+0x4fc>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e52:	9201      	str	r2, [sp, #4]
 8000e54:	2202      	movs	r2, #2
 8000e56:	9200      	str	r2, [sp, #0]
 8000e58:	2250      	movs	r2, #80	; 0x50
 8000e5a:	2187      	movs	r1, #135	; 0x87
 8000e5c:	4825      	ldr	r0, [pc, #148]	; (8000ef4 <main+0x504>)
 8000e5e:	f000 fcfd 	bl	800185c <ILI9341_Draw_Text>
							ILI9341_Draw_Text("Onsaard", 135, 120, h, 2, WHITE);
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <main+0x4fc>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e6a:	9201      	str	r2, [sp, #4]
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	2278      	movs	r2, #120	; 0x78
 8000e72:	2187      	movs	r1, #135	; 0x87
 8000e74:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <main+0x508>)
 8000e76:	f000 fcf1 	bl	800185c <ILI9341_Draw_Text>
							ILI9341_Draw_Text("64010889", 135, 160, h, 2, WHITE);
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <main+0x4fc>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e82:	9201      	str	r2, [sp, #4]
 8000e84:	2202      	movs	r2, #2
 8000e86:	9200      	str	r2, [sp, #0]
 8000e88:	22a0      	movs	r2, #160	; 0xa0
 8000e8a:	2187      	movs	r1, #135	; 0x87
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <main+0x50c>)
 8000e8e:	f000 fce5 	bl	800185c <ILI9341_Draw_Text>
							HAL_Delay(2000);
 8000e92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e96:	f001 fc99 	bl	80027cc <HAL_Delay>
							ILI9341_Draw_Image((const char*)snow_tiger, SCREEN_VERTICAL_1);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4818      	ldr	r0, [pc, #96]	; (8000f00 <main+0x510>)
 8000e9e:	f000 fd0d 	bl	80018bc <ILI9341_Draw_Image>
							ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f000 ff8a 	bl	8001dbc <ILI9341_Set_Rotation>
	  			  			HAL_Delay(3000);
 8000ea8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eac:	f001 fc8e 	bl	80027cc <HAL_Delay>
	  			  			toSecondPage=0;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <main+0x4f4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	  			  		while(toSecondPage){
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <main+0x4f4>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1b2      	bne.n	8000e24 <main+0x434>
	  			  		}

	  		HAL_Delay(20);
 8000ebe:	2014      	movs	r0, #20
 8000ec0:	f001 fc84 	bl	80027cc <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000ec4:	e5ab      	b.n	8000a1e <main+0x2e>
 8000ec6:	bf00      	nop
 8000ec8:	08008adc 	.word	0x08008adc
 8000ecc:	200001f5 	.word	0x200001f5
 8000ed0:	200001f9 	.word	0x200001f9
 8000ed4:	08008ae0 	.word	0x08008ae0
 8000ed8:	200001f6 	.word	0x200001f6
 8000edc:	200001f8 	.word	0x200001f8
 8000ee0:	08008ae4 	.word	0x08008ae4
 8000ee4:	20000330 	.word	0x20000330
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	200001fa 	.word	0x200001fa
 8000ef0:	08008ae8 	.word	0x08008ae8
 8000ef4:	08008af4 	.word	0x08008af4
 8000ef8:	08008afc 	.word	0x08008afc
 8000efc:	08008b04 	.word	0x08008b04
 8000f00:	08008b1c 	.word	0x08008b1c

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0b8      	sub	sp, #224	; 0xe0
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f0e:	2234      	movs	r2, #52	; 0x34
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f005 f8bf 	bl	8006096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2290      	movs	r2, #144	; 0x90
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 f8b0 	bl	8006096 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f36:	f001 ff31 	bl	8002d9c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <SystemClock_Config+0x124>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a3a      	ldr	r2, [pc, #232]	; (8001028 <SystemClock_Config+0x124>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <SystemClock_Config+0x124>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <SystemClock_Config+0x128>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a35      	ldr	r2, [pc, #212]	; (800102c <SystemClock_Config+0x128>)
 8000f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b33      	ldr	r3, [pc, #204]	; (800102c <SystemClock_Config+0x128>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f86:	2304      	movs	r3, #4
 8000f88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000f8c:	23c8      	movs	r3, #200	; 0xc8
 8000f8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f98:	2309      	movs	r3, #9
 8000f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 ff57 	bl	8002e5c <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fb4:	f000 f83e 	bl	8001034 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fb8:	f001 ff00 	bl	8002dbc <HAL_PWREx_EnableOverDrive>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fc2:	f000 f837 	bl	8001034 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000fe8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fec:	2106      	movs	r1, #6
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 f9e2 	bl	80033b8 <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000ffa:	f000 f81b 	bl	8001034 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <SystemClock_Config+0x12c>)
 8001000:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001002:	2300      	movs	r3, #0
 8001004:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fbf7 	bl	8003804 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800101c:	f000 f80a 	bl	8001034 <Error_Handler>
  }
}
 8001020:	bf00      	nop
 8001022:	37e0      	adds	r7, #224	; 0xe0
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000
 8001030:	00200100 	.word	0x00200100

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x4>
	...

0800103c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_RNG_Init+0x20>)
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <MX_RNG_Init+0x24>)
 8001044:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_RNG_Init+0x20>)
 8001048:	f003 f804 	bl	8004054 <HAL_RNG_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001052:	f7ff ffef 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000334 	.word	0x20000334
 8001060:	50060800 	.word	0x50060800

08001064 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_RNG_MspInit+0x38>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10b      	bne.n	800108e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_RNG_MspInit+0x3c>)
 8001078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107a:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <HAL_RNG_MspInit+0x3c>)
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	6353      	str	r3, [r2, #52]	; 0x34
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <HAL_RNG_MspInit+0x3c>)
 8001084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	50060800 	.word	0x50060800
 80010a0:	40023800 	.word	0x40023800

080010a4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_SPI5_Init+0x74>)
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <MX_SPI5_Init+0x78>)
 80010ac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_SPI5_Init+0x74>)
 80010b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010b4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_SPI5_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_SPI5_Init+0x74>)
 80010be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010c2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_SPI5_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_SPI5_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_SPI5_Init+0x74>)
 80010d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_SPI5_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_SPI5_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_SPI5_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_SPI5_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_SPI5_Init+0x74>)
 80010f2:	2207      	movs	r2, #7
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_SPI5_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_SPI5_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_SPI5_Init+0x74>)
 8001104:	f002 ffd0 	bl	80040a8 <HAL_SPI_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800110e:	f7ff ff91 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000344 	.word	0x20000344
 800111c:	40015000 	.word	0x40015000

08001120 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_SPI_MspInit+0x7c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d128      	bne.n	8001194 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001160:	f043 0320 	orr.w	r3, r3, #32
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0320 	and.w	r3, r3, #32
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001172:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001184:	2305      	movs	r3, #5
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_SPI_MspInit+0x84>)
 8001190:	f001 fc26 	bl	80029e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40015000 	.word	0x40015000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40021400 	.word	0x40021400

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x44>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_MspInit+0x44>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_MspInit+0x44>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x44>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x44>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x44>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f4:	f001 faca 	bl	800278c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_kill>:

int _kill(int pid, int sig)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001216:	f004 ff91 	bl	800613c <__errno>
 800121a:	4603      	mov	r3, r0
 800121c:	2216      	movs	r2, #22
 800121e:	601a      	str	r2, [r3, #0]
	return -1;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_exit>:

void _exit (int status)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffe7 	bl	800120c <_kill>
	while (1) {}		/* Make sure we hang here */
 800123e:	e7fe      	b.n	800123e <_exit+0x12>

08001240 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e00a      	b.n	8001268 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001252:	f3af 8000 	nop.w
 8001256:	4601      	mov	r1, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	b2ca      	uxtb	r2, r1
 8001260:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf0      	blt.n	8001252 <_read+0x12>
	}

return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	e009      	b.n	80012a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	60ba      	str	r2, [r7, #8]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dbf1      	blt.n	800128c <_write+0x12>
	}
	return len;
 80012a8:	687b      	ldr	r3, [r7, #4]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_close>:

int _close(int file)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	return -1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012da:	605a      	str	r2, [r3, #4]
	return 0;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <_isatty>:

int _isatty(int file)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
	return 1;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
	return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800134c:	f004 fef6 	bl	800613c <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20080000 	.word	0x20080000
 800137c:	00000400 	.word	0x00000400
 8001380:	200003a8 	.word	0x200003a8
 8001384:	200005d0 	.word	0x200005d0

08001388 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <SystemInit+0x5c>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <SystemInit+0x5c>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <SystemInit+0x60>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <SystemInit+0x60>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <SystemInit+0x60>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <SystemInit+0x60>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	490d      	ldr	r1, [pc, #52]	; (80013e8 <SystemInit+0x60>)
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <SystemInit+0x64>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <SystemInit+0x60>)
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <SystemInit+0x68>)
 80013be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <SystemInit+0x60>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <SystemInit+0x60>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x60>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SystemInit+0x5c>)
 80013d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d8:	609a      	str	r2, [r3, #8]
#endif
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00
 80013e8:	40023800 	.word	0x40023800
 80013ec:	fef6ffff 	.word	0xfef6ffff
 80013f0:	24003010 	.word	0x24003010

080013f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <MX_TIM1_Init+0xa0>)
 8001414:	4a20      	ldr	r2, [pc, #128]	; (8001498 <MX_TIM1_Init+0xa4>)
 8001416:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <MX_TIM1_Init+0xa0>)
 800141a:	f242 720f 	movw	r2, #9999	; 0x270f
 800141e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_TIM1_Init+0xa0>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_TIM1_Init+0xa0>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_TIM1_Init+0xa0>)
 800142e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001432:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_TIM1_Init+0xa0>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_TIM1_Init+0xa0>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001440:	4814      	ldr	r0, [pc, #80]	; (8001494 <MX_TIM1_Init+0xa0>)
 8001442:	f003 f9ab 	bl	800479c <HAL_TIM_Base_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800144c:	f7ff fdf2 	bl	8001034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001454:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4619      	mov	r1, r3
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_TIM1_Init+0xa0>)
 800145e:	f003 f9f5 	bl	800484c <HAL_TIM_ConfigClockSource>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001468:	f7ff fde4 	bl	8001034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_TIM1_Init+0xa0>)
 800147e:	f003 fbe5 	bl	8004c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001488:	f7ff fdd4 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200003ac 	.word	0x200003ac
 8001498:	40010000 	.word	0x40010000

0800149c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_TIM_Base_MspInit+0x38>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10b      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_TIM_Base_MspInit+0x3c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_TIM_Base_MspInit+0x3c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_TIM_Base_MspInit+0x3c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40023800 	.word	0x40023800

080014dc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART3_UART_Init+0x58>)
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <MX_USART3_UART_Init+0x5c>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART3_UART_Init+0x58>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART3_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_USART3_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART3_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART3_UART_Init+0x58>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART3_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART3_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART3_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART3_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART3_UART_Init+0x58>)
 8001520:	f003 fc22 	bl	8004d68 <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800152a:	f7ff fd83 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200003f8 	.word	0x200003f8
 8001538:	40004800 	.word	0x40004800

0800153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_UART_MspInit+0x7c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d128      	bne.n	80015b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_UART_MspInit+0x80>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a10      	ldr	r2, [pc, #64]	; (80015bc <HAL_UART_MspInit+0x80>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800158e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a0:	2307      	movs	r3, #7
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <HAL_UART_MspInit+0x84>)
 80015ac:	f001 fa18 	bl	80029e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40004800 	.word	0x40004800
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020c00 	.word	0x40020c00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015ca:	e003      	b.n	80015d4 <LoopCopyDataInit>

080015cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015d2:	3104      	adds	r1, #4

080015d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015d4:	480b      	ldr	r0, [pc, #44]	; (8001604 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015dc:	d3f6      	bcc.n	80015cc <CopyDataInit>
  ldr  r2, =_sbss
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015e0:	e002      	b.n	80015e8 <LoopFillZerobss>

080015e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015e4:	f842 3b04 	str.w	r3, [r2], #4

080015e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015ec:	d3f9      	bcc.n	80015e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ee:	f7ff fecb 	bl	8001388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f004 fda9 	bl	8006148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff f9fb 	bl	80009f0 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015fc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001600:	0802e910 	.word	0x0802e910
  ldr  r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001608:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 800160c:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8001610:	200005cc 	.word	0x200005cc

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>

08001616 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001616:	b590      	push	{r4, r7, lr}
 8001618:	b08b      	sub	sp, #44	; 0x2c
 800161a:	af00      	add	r7, sp, #0
 800161c:	4604      	mov	r4, r0
 800161e:	4608      	mov	r0, r1
 8001620:	4611      	mov	r1, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4623      	mov	r3, r4
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	f1c3 0301 	rsb	r3, r3, #1
 8001644:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800164e:	e061      	b.n	8001714 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8001650:	88fa      	ldrh	r2, [r7, #6]
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	e018      	b.n	800168c <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	b298      	uxth	r0, r3
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	b29a      	uxth	r2, r3
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	b29b      	uxth	r3, r3
 8001668:	883a      	ldrh	r2, [r7, #0]
 800166a:	4619      	mov	r1, r3
 800166c:	f000 fdd6 	bl	800221c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	b298      	uxth	r0, r3
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	b29b      	uxth	r3, r3
 8001678:	88ba      	ldrh	r2, [r7, #4]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	b29b      	uxth	r3, r3
 800167e:	883a      	ldrh	r2, [r7, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f000 fdcb 	bl	800221c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	3301      	adds	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	88fa      	ldrh	r2, [r7, #6]
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	dde0      	ble.n	800165a <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001698:	88fa      	ldrh	r2, [r7, #6]
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e018      	b.n	80016d4 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	b298      	uxth	r0, r3
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	88bb      	ldrh	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	883a      	ldrh	r2, [r7, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	f000 fdb2 	bl	800221c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	b298      	uxth	r0, r3
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	b29b      	uxth	r3, r3
 80016c0:	88ba      	ldrh	r2, [r7, #4]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	883a      	ldrh	r2, [r7, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f000 fda7 	bl	800221c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	88fa      	ldrh	r2, [r7, #6]
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	4413      	add	r3, r2
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dde0      	ble.n	80016a2 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	3301      	adds	r3, #1
 80016e4:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	4413      	add	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	3302      	adds	r3, #2
 80016f2:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005a      	lsls	r2, r3, #1
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	4413      	add	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	dd09      	ble.n	8001714 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	3b01      	subs	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3302      	adds	r3, #2
 8001712:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8001714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	429a      	cmp	r2, r3
 800171a:	da99      	bge.n	8001650 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	372c      	adds	r7, #44	; 0x2c
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}
	...

08001728 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af02      	add	r7, sp, #8
 800172e:	4604      	mov	r4, r0
 8001730:	4608      	mov	r0, r1
 8001732:	4611      	mov	r1, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4623      	mov	r3, r4
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	4603      	mov	r3, r0
 800173c:	71bb      	strb	r3, [r7, #6]
 800173e:	460b      	mov	r3, r1
 8001740:	717b      	strb	r3, [r7, #5]
 8001742:	4613      	mov	r3, r2
 8001744:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b1f      	cmp	r3, #31
 800174e:	d802      	bhi.n	8001756 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	e002      	b.n	800175c <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001756:	7dfb      	ldrb	r3, [r7, #23]
 8001758:	3b20      	subs	r3, #32
 800175a:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800175c:	2300      	movs	r3, #0
 800175e:	753b      	strb	r3, [r7, #20]
 8001760:	e012      	b.n	8001788 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001762:	7dfa      	ldrb	r2, [r7, #23]
 8001764:	7d38      	ldrb	r0, [r7, #20]
 8001766:	7d39      	ldrb	r1, [r7, #20]
 8001768:	4c3b      	ldr	r4, [pc, #236]	; (8001858 <ILI9341_Draw_Char+0x130>)
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4423      	add	r3, r4
 8001774:	4403      	add	r3, r0
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	f101 0318 	add.w	r3, r1, #24
 800177c:	443b      	add	r3, r7
 800177e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001782:	7d3b      	ldrb	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	753b      	strb	r3, [r7, #20]
 8001788:	7d3b      	ldrb	r3, [r7, #20]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d9e9      	bls.n	8001762 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800178e:	79bb      	ldrb	r3, [r7, #6]
 8001790:	b298      	uxth	r0, r3
 8001792:	797b      	ldrb	r3, [r7, #5]
 8001794:	b299      	uxth	r1, r3
 8001796:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001798:	461a      	mov	r2, r3
 800179a:	0052      	lsls	r2, r2, #1
 800179c:	4413      	add	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	b29c      	uxth	r4, r3
 80017a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	4623      	mov	r3, r4
 80017ae:	f000 fe0f 	bl	80023d0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	757b      	strb	r3, [r7, #21]
 80017b6:	e047      	b.n	8001848 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	75bb      	strb	r3, [r7, #22]
 80017bc:	e03e      	b.n	800183c <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 80017be:	7d7b      	ldrb	r3, [r7, #21]
 80017c0:	3318      	adds	r3, #24
 80017c2:	443b      	add	r3, r7
 80017c4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80017c8:	461a      	mov	r2, r3
 80017ca:	7dbb      	ldrb	r3, [r7, #22]
 80017cc:	fa42 f303 	asr.w	r3, r2, r3
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02e      	beq.n	8001836 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 80017d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d110      	bne.n	8001800 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80017de:	79bb      	ldrb	r3, [r7, #6]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	7d7b      	ldrb	r3, [r7, #21]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	b298      	uxth	r0, r3
 80017ea:	797b      	ldrb	r3, [r7, #5]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	7dbb      	ldrb	r3, [r7, #22]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f000 fd0f 	bl	800221c <ILI9341_Draw_Pixel>
 80017fe:	e01a      	b.n	8001836 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	b29a      	uxth	r2, r3
 8001804:	7d7b      	ldrb	r3, [r7, #21]
 8001806:	b29b      	uxth	r3, r3
 8001808:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800180a:	fb11 f303 	smulbb	r3, r1, r3
 800180e:	b29b      	uxth	r3, r3
 8001810:	4413      	add	r3, r2
 8001812:	b298      	uxth	r0, r3
 8001814:	797b      	ldrb	r3, [r7, #5]
 8001816:	b29a      	uxth	r2, r3
 8001818:	7dbb      	ldrb	r3, [r7, #22]
 800181a:	b29b      	uxth	r3, r3
 800181c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800181e:	fb11 f303 	smulbb	r3, r1, r3
 8001822:	b29b      	uxth	r3, r3
 8001824:	4413      	add	r3, r2
 8001826:	b299      	uxth	r1, r3
 8001828:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800182a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4623      	mov	r3, r4
 8001832:	f000 fdcd 	bl	80023d0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001836:	7dbb      	ldrb	r3, [r7, #22]
 8001838:	3301      	adds	r3, #1
 800183a:	75bb      	strb	r3, [r7, #22]
 800183c:	7dbb      	ldrb	r3, [r7, #22]
 800183e:	2b07      	cmp	r3, #7
 8001840:	d9bd      	bls.n	80017be <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001842:	7d7b      	ldrb	r3, [r7, #21]
 8001844:	3301      	adds	r3, #1
 8001846:	757b      	strb	r3, [r7, #21]
 8001848:	7d7b      	ldrb	r3, [r7, #21]
 800184a:	2b05      	cmp	r3, #5
 800184c:	d9b4      	bls.n	80017b8 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}
 8001858:	0802e334 	.word	0x0802e334

0800185c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af02      	add	r7, sp, #8
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4603      	mov	r3, r0
 800186c:	70fb      	strb	r3, [r7, #3]
 800186e:	460b      	mov	r3, r1
 8001870:	70bb      	strb	r3, [r7, #2]
 8001872:	4613      	mov	r3, r2
 8001874:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001876:	e017      	b.n	80018a8 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	7818      	ldrb	r0, [r3, #0]
 8001880:	883c      	ldrh	r4, [r7, #0]
 8001882:	78ba      	ldrb	r2, [r7, #2]
 8001884:	78f9      	ldrb	r1, [r7, #3]
 8001886:	8bbb      	ldrh	r3, [r7, #28]
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	8b3b      	ldrh	r3, [r7, #24]
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	4623      	mov	r3, r4
 8001890:	f7ff ff4a 	bl	8001728 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001894:	8b3b      	ldrh	r3, [r7, #24]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	0052      	lsls	r2, r2, #1
 800189c:	4413      	add	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	4413      	add	r3, r2
 80018a6:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1e3      	bne.n	8001878 <ILI9341_Draw_Text+0x1c>
    }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd90      	pop	{r4, r7, pc}
	...

080018bc <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80018c8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80018cc:	6018      	str	r0, [r3, #0]
 80018ce:	460a      	mov	r2, r1
 80018d0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80018d4:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80018d8:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 80018da:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80018de:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d15e      	bne.n	80019a6 <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80018e8:	2001      	movs	r0, #1
 80018ea:	f000 fa67 	bl	8001dbc <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 80018ee:	23f0      	movs	r3, #240	; 0xf0
 80018f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018f4:	2100      	movs	r1, #0
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 f9f6 	bl	8001ce8 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001902:	48c4      	ldr	r0, [pc, #784]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 8001904:	f001 fa30 	bl	8002d68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190e:	48c1      	ldr	r0, [pc, #772]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 8001910:	f001 fa2a 	bl	8002d68 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001920:	e035      	b.n	800198e <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001928:	e019      	b.n	800195e <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 800192a:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800192e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001932:	4413      	add	r3, r2
 8001934:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001938:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	4413      	add	r3, r2
 8001940:	7819      	ldrb	r1, [r3, #0]
 8001942:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001946:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800194a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800194e:	4413      	add	r3, r2
 8001950:	460a      	mov	r2, r1
 8001952:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001954:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001958:	3301      	adds	r3, #1
 800195a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800195e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001962:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001966:	d3e0      	bcc.n	800192a <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001968:	f107 010c 	add.w	r1, r7, #12
 800196c:	230a      	movs	r3, #10
 800196e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001972:	48a9      	ldr	r0, [pc, #676]	; (8001c18 <ILI9341_Draw_Image+0x35c>)
 8001974:	f002 fc43 	bl	80041fe <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001978:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800197c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001980:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001984:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001988:	3301      	adds	r3, #1
 800198a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800198e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001992:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001996:	d9c4      	bls.n	8001922 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800199e:	489d      	ldr	r0, [pc, #628]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 80019a0:	f001 f9e2 	bl	8002d68 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 80019a4:	e130      	b.n	8001c08 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 80019a6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80019aa:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d15e      	bne.n	8001a72 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 fa01 	bl	8001dbc <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 80019ba:	23f0      	movs	r3, #240	; 0xf0
 80019bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019c0:	2100      	movs	r1, #0
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f990 	bl	8001ce8 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80019c8:	2201      	movs	r2, #1
 80019ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ce:	4891      	ldr	r0, [pc, #580]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 80019d0:	f001 f9ca 	bl	8002d68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019da:	488e      	ldr	r0, [pc, #568]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 80019dc:	f001 f9c4 	bl	8002d68 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80019ec:	e035      	b.n	8001a5a <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80019f4:	e019      	b.n	8001a2a <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 80019f6:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80019fa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80019fe:	4413      	add	r3, r2
 8001a00:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001a04:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	7819      	ldrb	r1, [r3, #0]
 8001a0e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a12:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001a16:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001a1a:	4413      	add	r3, r2
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001a20:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001a24:	3301      	adds	r3, #1
 8001a26:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001a2a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001a2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a32:	d3e0      	bcc.n	80019f6 <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001a34:	f107 010c 	add.w	r1, r7, #12
 8001a38:	230a      	movs	r3, #10
 8001a3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a3e:	4876      	ldr	r0, [pc, #472]	; (8001c18 <ILI9341_Draw_Image+0x35c>)
 8001a40:	f002 fbdd 	bl	80041fe <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001a44:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001a48:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a4c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001a50:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a54:	3301      	adds	r3, #1
 8001a56:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001a5a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a5e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001a62:	d9c4      	bls.n	80019ee <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6a:	486a      	ldr	r0, [pc, #424]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 8001a6c:	f001 f97c 	bl	8002d68 <HAL_GPIO_WritePin>
}
 8001a70:	e0ca      	b.n	8001c08 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 8001a72:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a76:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d15e      	bne.n	8001b3e <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8001a80:	2002      	movs	r0, #2
 8001a82:	f000 f99b 	bl	8001dbc <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001a86:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a8a:	22f0      	movs	r2, #240	; 0xf0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f92a 	bl	8001ce8 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a9a:	485e      	ldr	r0, [pc, #376]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 8001a9c:	f001 f964 	bl	8002d68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa6:	485b      	ldr	r0, [pc, #364]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 8001aa8:	f001 f95e 	bl	8002d68 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001ab8:	e035      	b.n	8001b26 <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001ac0:	e019      	b.n	8001af6 <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001ac2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001ac6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001aca:	4413      	add	r3, r2
 8001acc:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001ad0:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	7819      	ldrb	r1, [r3, #0]
 8001ada:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ade:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001ae2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001ae6:	4413      	add	r3, r2
 8001ae8:	460a      	mov	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001aec:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001af0:	3301      	adds	r3, #1
 8001af2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001af6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001afa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001afe:	d3e0      	bcc.n	8001ac2 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001b00:	f107 010c 	add.w	r1, r7, #12
 8001b04:	230a      	movs	r3, #10
 8001b06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b0a:	4843      	ldr	r0, [pc, #268]	; (8001c18 <ILI9341_Draw_Image+0x35c>)
 8001b0c:	f002 fb77 	bl	80041fe <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001b10:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001b14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001b18:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001b1c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001b20:	3301      	adds	r3, #1
 8001b22:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001b26:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001b2a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001b2e:	d9c4      	bls.n	8001aba <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b36:	4837      	ldr	r0, [pc, #220]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 8001b38:	f001 f916 	bl	8002d68 <HAL_GPIO_WritePin>
}
 8001b3c:	e064      	b.n	8001c08 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8001b3e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b42:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d15d      	bne.n	8001c08 <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f000 f935 	bl	8001dbc <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001b52:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b56:	22f0      	movs	r2, #240	; 0xf0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f8c4 	bl	8001ce8 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b66:	482b      	ldr	r0, [pc, #172]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 8001b68:	f001 f8fe 	bl	8002d68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b72:	4828      	ldr	r0, [pc, #160]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 8001b74:	f001 f8f8 	bl	8002d68 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001b84:	e035      	b.n	8001bf2 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001b8c:	e019      	b.n	8001bc2 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001b8e:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8001b92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b96:	4413      	add	r3, r2
 8001b98:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001b9c:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	7819      	ldrb	r1, [r3, #0]
 8001ba6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001baa:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001bae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bb2:	4413      	add	r3, r2
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001bb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001bc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bc6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bca:	d3e0      	bcc.n	8001b8e <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001bcc:	f107 010c 	add.w	r1, r7, #12
 8001bd0:	230a      	movs	r3, #10
 8001bd2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bd6:	4810      	ldr	r0, [pc, #64]	; (8001c18 <ILI9341_Draw_Image+0x35c>)
 8001bd8:	f002 fb11 	bl	80041fe <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001bdc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001be0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001be4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001be8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001bec:	3301      	adds	r3, #1
 8001bee:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001bf2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001bf6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001bfa:	d9c4      	bls.n	8001b86 <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c02:	4804      	ldr	r0, [pc, #16]	; (8001c14 <ILI9341_Draw_Image+0x358>)
 8001c04:	f001 f8b0 	bl	8002d68 <HAL_GPIO_WritePin>
}
 8001c08:	bf00      	nop
 8001c0a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40020800 	.word	0x40020800
 8001c18:	20000344 	.word	0x20000344

08001c1c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8001c20:	f7ff fa40 	bl	80010a4 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8001c24:	f7fe fce2 	bl	80005ec <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2e:	4802      	ldr	r0, [pc, #8]	; (8001c38 <ILI9341_SPI_Init+0x1c>)
 8001c30:	f001 f89a 	bl	8002d68 <HAL_GPIO_WritePin>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40020800 	.word	0x40020800

08001c3c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001c46:	1df9      	adds	r1, r7, #7
 8001c48:	2301      	movs	r3, #1
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4803      	ldr	r0, [pc, #12]	; (8001c5c <ILI9341_SPI_Send+0x20>)
 8001c4e:	f002 fad6 	bl	80041fe <HAL_SPI_Transmit>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000344 	.word	0x20000344

08001c60 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <ILI9341_Write_Command+0x40>)
 8001c72:	f001 f879 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001c76:	2200      	movs	r2, #0
 8001c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c7c:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <ILI9341_Write_Command+0x40>)
 8001c7e:	f001 f873 	bl	8002d68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ffd9 	bl	8001c3c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <ILI9341_Write_Command+0x40>)
 8001c92:	f001 f869 	bl	8002d68 <HAL_GPIO_WritePin>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40020800 	.word	0x40020800

08001ca4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb4:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <ILI9341_Write_Data+0x40>)
 8001cb6:	f001 f857 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc0:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <ILI9341_Write_Data+0x40>)
 8001cc2:	f001 f851 	bl	8002d68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ffb7 	bl	8001c3c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd4:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <ILI9341_Write_Data+0x40>)
 8001cd6:	f001 f847 	bl	8002d68 <HAL_GPIO_WritePin>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40020800 	.word	0x40020800

08001ce8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4604      	mov	r4, r0
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	80fb      	strh	r3, [r7, #6]
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80bb      	strh	r3, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	807b      	strh	r3, [r7, #2]
 8001d02:	4613      	mov	r3, r2
 8001d04:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001d06:	202a      	movs	r0, #42	; 0x2a
 8001d08:	f7ff ffaa 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ffc5 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ffc0 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ffb9 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ffb4 	bl	8001ca4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001d3c:	202b      	movs	r0, #43	; 0x2b
 8001d3e:	f7ff ff8f 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001d42:	88bb      	ldrh	r3, [r7, #4]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ffaa 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ffa5 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001d5a:	883b      	ldrh	r3, [r7, #0]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff9e 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001d68:	883b      	ldrh	r3, [r7, #0]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff99 	bl	8001ca4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001d72:	202c      	movs	r0, #44	; 0x2c
 8001d74:	f7ff ff74 	bl	8001c60 <ILI9341_Write_Command>
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}

08001d80 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001d84:	2201      	movs	r2, #1
 8001d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d8a:	480b      	ldr	r0, [pc, #44]	; (8001db8 <ILI9341_Reset+0x38>)
 8001d8c:	f000 ffec 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001d90:	20c8      	movs	r0, #200	; 0xc8
 8001d92:	f000 fd1b 	bl	80027cc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9c:	4806      	ldr	r0, [pc, #24]	; (8001db8 <ILI9341_Reset+0x38>)
 8001d9e:	f000 ffe3 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001da2:	20c8      	movs	r0, #200	; 0xc8
 8001da4:	f000 fd12 	bl	80027cc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001da8:	2201      	movs	r2, #1
 8001daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dae:	4802      	ldr	r0, [pc, #8]	; (8001db8 <ILI9341_Reset+0x38>)
 8001db0:	f000 ffda 	bl	8002d68 <HAL_GPIO_WritePin>
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40020800 	.word	0x40020800

08001dbc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001dca:	2036      	movs	r0, #54	; 0x36
 8001dcc:	f7ff ff48 	bl	8001c60 <ILI9341_Write_Command>
HAL_Delay(1);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f000 fcfb 	bl	80027cc <HAL_Delay>
	
switch(screen_rotation) 
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d837      	bhi.n	8001e4c <ILI9341_Set_Rotation+0x90>
 8001ddc:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <ILI9341_Set_Rotation+0x28>)
 8001dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de2:	bf00      	nop
 8001de4:	08001df5 	.word	0x08001df5
 8001de8:	08001e0b 	.word	0x08001e0b
 8001dec:	08001e21 	.word	0x08001e21
 8001df0:	08001e37 	.word	0x08001e37
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001df4:	2048      	movs	r0, #72	; 0x48
 8001df6:	f7ff ff55 	bl	8001ca4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <ILI9341_Set_Rotation+0x9c>)
 8001dfc:	22f0      	movs	r2, #240	; 0xf0
 8001dfe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <ILI9341_Set_Rotation+0xa0>)
 8001e02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e06:	801a      	strh	r2, [r3, #0]
			break;
 8001e08:	e021      	b.n	8001e4e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001e0a:	2028      	movs	r0, #40	; 0x28
 8001e0c:	f7ff ff4a 	bl	8001ca4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <ILI9341_Set_Rotation+0x9c>)
 8001e12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e16:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <ILI9341_Set_Rotation+0xa0>)
 8001e1a:	22f0      	movs	r2, #240	; 0xf0
 8001e1c:	801a      	strh	r2, [r3, #0]
			break;
 8001e1e:	e016      	b.n	8001e4e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001e20:	2088      	movs	r0, #136	; 0x88
 8001e22:	f7ff ff3f 	bl	8001ca4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <ILI9341_Set_Rotation+0x9c>)
 8001e28:	22f0      	movs	r2, #240	; 0xf0
 8001e2a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <ILI9341_Set_Rotation+0xa0>)
 8001e2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e32:	801a      	strh	r2, [r3, #0]
			break;
 8001e34:	e00b      	b.n	8001e4e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001e36:	20e8      	movs	r0, #232	; 0xe8
 8001e38:	f7ff ff34 	bl	8001ca4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <ILI9341_Set_Rotation+0x9c>)
 8001e3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e42:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <ILI9341_Set_Rotation+0xa0>)
 8001e46:	22f0      	movs	r2, #240	; 0xf0
 8001e48:	801a      	strh	r2, [r3, #0]
			break;
 8001e4a:	e000      	b.n	8001e4e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001e4c:	bf00      	nop
	}
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000006 	.word	0x20000006
 8001e5c:	20000004 	.word	0x20000004

08001e60 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6a:	4802      	ldr	r0, [pc, #8]	; (8001e74 <ILI9341_Enable+0x14>)
 8001e6c:	f000 ff7c 	bl	8002d68 <HAL_GPIO_WritePin>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40020800 	.word	0x40020800

08001e78 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001e7c:	f7ff fff0 	bl	8001e60 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001e80:	f7ff fecc 	bl	8001c1c <ILI9341_SPI_Init>
ILI9341_Reset();
 8001e84:	f7ff ff7c 	bl	8001d80 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f7ff fee9 	bl	8001c60 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e92:	f000 fc9b 	bl	80027cc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001e96:	20cb      	movs	r0, #203	; 0xcb
 8001e98:	f7ff fee2 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001e9c:	2039      	movs	r0, #57	; 0x39
 8001e9e:	f7ff ff01 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001ea2:	202c      	movs	r0, #44	; 0x2c
 8001ea4:	f7ff fefe 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff fefb 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001eae:	2034      	movs	r0, #52	; 0x34
 8001eb0:	f7ff fef8 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	f7ff fef5 	bl	8001ca4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001eba:	20cf      	movs	r0, #207	; 0xcf
 8001ebc:	f7ff fed0 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff feef 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001ec6:	20c1      	movs	r0, #193	; 0xc1
 8001ec8:	f7ff feec 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001ecc:	2030      	movs	r0, #48	; 0x30
 8001ece:	f7ff fee9 	bl	8001ca4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001ed2:	20e8      	movs	r0, #232	; 0xe8
 8001ed4:	f7ff fec4 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001ed8:	2085      	movs	r0, #133	; 0x85
 8001eda:	f7ff fee3 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fee0 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001ee4:	2078      	movs	r0, #120	; 0x78
 8001ee6:	f7ff fedd 	bl	8001ca4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001eea:	20ea      	movs	r0, #234	; 0xea
 8001eec:	f7ff feb8 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff fed7 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fed4 	bl	8001ca4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001efc:	20ed      	movs	r0, #237	; 0xed
 8001efe:	f7ff feaf 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001f02:	2064      	movs	r0, #100	; 0x64
 8001f04:	f7ff fece 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f7ff fecb 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001f0e:	2012      	movs	r0, #18
 8001f10:	f7ff fec8 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001f14:	2081      	movs	r0, #129	; 0x81
 8001f16:	f7ff fec5 	bl	8001ca4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001f1a:	20f7      	movs	r0, #247	; 0xf7
 8001f1c:	f7ff fea0 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001f20:	2020      	movs	r0, #32
 8001f22:	f7ff febf 	bl	8001ca4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001f26:	20c0      	movs	r0, #192	; 0xc0
 8001f28:	f7ff fe9a 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001f2c:	2023      	movs	r0, #35	; 0x23
 8001f2e:	f7ff feb9 	bl	8001ca4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001f32:	20c1      	movs	r0, #193	; 0xc1
 8001f34:	f7ff fe94 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001f38:	2010      	movs	r0, #16
 8001f3a:	f7ff feb3 	bl	8001ca4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001f3e:	20c5      	movs	r0, #197	; 0xc5
 8001f40:	f7ff fe8e 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001f44:	203e      	movs	r0, #62	; 0x3e
 8001f46:	f7ff fead 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001f4a:	2028      	movs	r0, #40	; 0x28
 8001f4c:	f7ff feaa 	bl	8001ca4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001f50:	20c7      	movs	r0, #199	; 0xc7
 8001f52:	f7ff fe85 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001f56:	2086      	movs	r0, #134	; 0x86
 8001f58:	f7ff fea4 	bl	8001ca4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001f5c:	2036      	movs	r0, #54	; 0x36
 8001f5e:	f7ff fe7f 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001f62:	2048      	movs	r0, #72	; 0x48
 8001f64:	f7ff fe9e 	bl	8001ca4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001f68:	203a      	movs	r0, #58	; 0x3a
 8001f6a:	f7ff fe79 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001f6e:	2055      	movs	r0, #85	; 0x55
 8001f70:	f7ff fe98 	bl	8001ca4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001f74:	20b1      	movs	r0, #177	; 0xb1
 8001f76:	f7ff fe73 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff fe92 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001f80:	2018      	movs	r0, #24
 8001f82:	f7ff fe8f 	bl	8001ca4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001f86:	20b6      	movs	r0, #182	; 0xb6
 8001f88:	f7ff fe6a 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001f8c:	2008      	movs	r0, #8
 8001f8e:	f7ff fe89 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001f92:	2082      	movs	r0, #130	; 0x82
 8001f94:	f7ff fe86 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001f98:	2027      	movs	r0, #39	; 0x27
 8001f9a:	f7ff fe83 	bl	8001ca4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001f9e:	20f2      	movs	r0, #242	; 0xf2
 8001fa0:	f7ff fe5e 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff fe7d 	bl	8001ca4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001faa:	2026      	movs	r0, #38	; 0x26
 8001fac:	f7ff fe58 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff fe77 	bl	8001ca4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001fb6:	20e0      	movs	r0, #224	; 0xe0
 8001fb8:	f7ff fe52 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001fbc:	200f      	movs	r0, #15
 8001fbe:	f7ff fe71 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001fc2:	2031      	movs	r0, #49	; 0x31
 8001fc4:	f7ff fe6e 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001fc8:	202b      	movs	r0, #43	; 0x2b
 8001fca:	f7ff fe6b 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001fce:	200c      	movs	r0, #12
 8001fd0:	f7ff fe68 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001fd4:	200e      	movs	r0, #14
 8001fd6:	f7ff fe65 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001fda:	2008      	movs	r0, #8
 8001fdc:	f7ff fe62 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001fe0:	204e      	movs	r0, #78	; 0x4e
 8001fe2:	f7ff fe5f 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001fe6:	20f1      	movs	r0, #241	; 0xf1
 8001fe8:	f7ff fe5c 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001fec:	2037      	movs	r0, #55	; 0x37
 8001fee:	f7ff fe59 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001ff2:	2007      	movs	r0, #7
 8001ff4:	f7ff fe56 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001ff8:	2010      	movs	r0, #16
 8001ffa:	f7ff fe53 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001ffe:	2003      	movs	r0, #3
 8002000:	f7ff fe50 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002004:	200e      	movs	r0, #14
 8002006:	f7ff fe4d 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800200a:	2009      	movs	r0, #9
 800200c:	f7ff fe4a 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff fe47 	bl	8001ca4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002016:	20e1      	movs	r0, #225	; 0xe1
 8002018:	f7ff fe22 	bl	8001c60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800201c:	2000      	movs	r0, #0
 800201e:	f7ff fe41 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002022:	200e      	movs	r0, #14
 8002024:	f7ff fe3e 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002028:	2014      	movs	r0, #20
 800202a:	f7ff fe3b 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800202e:	2003      	movs	r0, #3
 8002030:	f7ff fe38 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002034:	2011      	movs	r0, #17
 8002036:	f7ff fe35 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800203a:	2007      	movs	r0, #7
 800203c:	f7ff fe32 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002040:	2031      	movs	r0, #49	; 0x31
 8002042:	f7ff fe2f 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002046:	20c1      	movs	r0, #193	; 0xc1
 8002048:	f7ff fe2c 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800204c:	2048      	movs	r0, #72	; 0x48
 800204e:	f7ff fe29 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002052:	2008      	movs	r0, #8
 8002054:	f7ff fe26 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002058:	200f      	movs	r0, #15
 800205a:	f7ff fe23 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800205e:	200c      	movs	r0, #12
 8002060:	f7ff fe20 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002064:	2031      	movs	r0, #49	; 0x31
 8002066:	f7ff fe1d 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800206a:	2036      	movs	r0, #54	; 0x36
 800206c:	f7ff fe1a 	bl	8001ca4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002070:	200f      	movs	r0, #15
 8002072:	f7ff fe17 	bl	8001ca4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002076:	2011      	movs	r0, #17
 8002078:	f7ff fdf2 	bl	8001c60 <ILI9341_Write_Command>
HAL_Delay(120);
 800207c:	2078      	movs	r0, #120	; 0x78
 800207e:	f000 fba5 	bl	80027cc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002082:	2029      	movs	r0, #41	; 0x29
 8002084:	f7ff fdec 	bl	8001c60 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff fe97 	bl	8001dbc <ILI9341_Set_Rotation>
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002098:	b08d      	sub	sp, #52	; 0x34
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	6039      	str	r1, [r7, #0]
 80020a0:	80fb      	strh	r3, [r7, #6]
 80020a2:	466b      	mov	r3, sp
 80020a4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020b2:	d202      	bcs.n	80020ba <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b8:	e002      	b.n	80020c0 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80020ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c6:	4840      	ldr	r0, [pc, #256]	; (80021c8 <ILI9341_Draw_Colour_Burst+0x134>)
 80020c8:	f000 fe4e 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d2:	483d      	ldr	r0, [pc, #244]	; (80021c8 <ILI9341_Draw_Colour_Burst+0x134>)
 80020d4:	f000 fe48 	bl	8002d68 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80020e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020e4:	460b      	mov	r3, r1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	2300      	movs	r3, #0
 80020ec:	4688      	mov	r8, r1
 80020ee:	4699      	mov	r9, r3
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002100:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002104:	2300      	movs	r3, #0
 8002106:	460c      	mov	r4, r1
 8002108:	461d      	mov	r5, r3
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	00eb      	lsls	r3, r5, #3
 8002114:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002118:	00e2      	lsls	r2, r4, #3
 800211a:	1dcb      	adds	r3, r1, #7
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	ebad 0d03 	sub.w	sp, sp, r3
 8002124:	466b      	mov	r3, sp
 8002126:	3300      	adds	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
 800212e:	e00e      	b.n	800214e <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	4413      	add	r3, r2
 8002136:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800213a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	3301      	adds	r3, #1
 8002140:	88fa      	ldrh	r2, [r7, #6]
 8002142:	b2d1      	uxtb	r1, r2
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	3302      	adds	r3, #2
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
 800214e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	429a      	cmp	r2, r3
 8002154:	d3ec      	bcc.n	8002130 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216a:	fbb3 f2f2 	udiv	r2, r3, r2
 800216e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002170:	fb01 f202 	mul.w	r2, r1, r2
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d010      	beq.n	80021a0 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	e009      	b.n	8002198 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002186:	b29a      	uxth	r2, r3
 8002188:	230a      	movs	r3, #10
 800218a:	69b9      	ldr	r1, [r7, #24]
 800218c:	480f      	ldr	r0, [pc, #60]	; (80021cc <ILI9341_Draw_Colour_Burst+0x138>)
 800218e:	f002 f836 	bl	80041fe <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	3301      	adds	r3, #1
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d3f1      	bcc.n	8002184 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	230a      	movs	r3, #10
 80021a6:	69b9      	ldr	r1, [r7, #24]
 80021a8:	4808      	ldr	r0, [pc, #32]	; (80021cc <ILI9341_Draw_Colour_Burst+0x138>)
 80021aa:	f002 f828 	bl	80041fe <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80021ae:	2201      	movs	r2, #1
 80021b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b4:	4804      	ldr	r0, [pc, #16]	; (80021c8 <ILI9341_Draw_Colour_Burst+0x134>)
 80021b6:	f000 fdd7 	bl	8002d68 <HAL_GPIO_WritePin>
 80021ba:	46b5      	mov	sp, r6
}
 80021bc:	bf00      	nop
 80021be:	3734      	adds	r7, #52	; 0x34
 80021c0:	46bd      	mov	sp, r7
 80021c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021c6:	bf00      	nop
 80021c8:	40020800 	.word	0x40020800
 80021cc:	20000344 	.word	0x20000344

080021d0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <ILI9341_Fill_Screen+0x44>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <ILI9341_Fill_Screen+0x48>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2100      	movs	r1, #0
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7ff fd7d 	bl	8001ce8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <ILI9341_Fill_Screen+0x44>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <ILI9341_Fill_Screen+0x48>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	461a      	mov	r2, r3
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff44 	bl	8002094 <ILI9341_Draw_Colour_Burst>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000006 	.word	0x20000006
 8002218:	20000004 	.word	0x20000004

0800221c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
 8002226:	460b      	mov	r3, r1
 8002228:	80bb      	strh	r3, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800222e:	4b64      	ldr	r3, [pc, #400]	; (80023c0 <ILI9341_Draw_Pixel+0x1a4>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	88fa      	ldrh	r2, [r7, #6]
 8002236:	429a      	cmp	r2, r3
 8002238:	f080 80be 	bcs.w	80023b8 <ILI9341_Draw_Pixel+0x19c>
 800223c:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <ILI9341_Draw_Pixel+0x1a8>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	88ba      	ldrh	r2, [r7, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	f080 80b7 	bcs.w	80023b8 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002250:	485d      	ldr	r0, [pc, #372]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 8002252:	f000 fd89 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225c:	485a      	ldr	r0, [pc, #360]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 800225e:	f000 fd83 	bl	8002d68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002262:	202a      	movs	r0, #42	; 0x2a
 8002264:	f7ff fcea 	bl	8001c3c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002268:	2201      	movs	r2, #1
 800226a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800226e:	4856      	ldr	r0, [pc, #344]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 8002270:	f000 fd7a 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002274:	2201      	movs	r2, #1
 8002276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800227a:	4853      	ldr	r0, [pc, #332]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 800227c:	f000 fd74 	bl	8002d68 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002286:	4850      	ldr	r0, [pc, #320]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 8002288:	f000 fd6e 	bl	8002d68 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	b29b      	uxth	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	753b      	strb	r3, [r7, #20]
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	757b      	strb	r3, [r7, #21]
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	3301      	adds	r3, #1
 80022a0:	121b      	asrs	r3, r3, #8
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	75bb      	strb	r3, [r7, #22]
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80022b0:	f107 0114 	add.w	r1, r7, #20
 80022b4:	2301      	movs	r3, #1
 80022b6:	2204      	movs	r2, #4
 80022b8:	4844      	ldr	r0, [pc, #272]	; (80023cc <ILI9341_Draw_Pixel+0x1b0>)
 80022ba:	f001 ffa0 	bl	80041fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c4:	4840      	ldr	r0, [pc, #256]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 80022c6:	f000 fd4f 	bl	8002d68 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022d0:	483d      	ldr	r0, [pc, #244]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 80022d2:	f000 fd49 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022dc:	483a      	ldr	r0, [pc, #232]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 80022de:	f000 fd43 	bl	8002d68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80022e2:	202b      	movs	r0, #43	; 0x2b
 80022e4:	f7ff fcaa 	bl	8001c3c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ee:	4836      	ldr	r0, [pc, #216]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 80022f0:	f000 fd3a 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80022f4:	2201      	movs	r2, #1
 80022f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022fa:	4833      	ldr	r0, [pc, #204]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 80022fc:	f000 fd34 	bl	8002d68 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002306:	4830      	ldr	r0, [pc, #192]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 8002308:	f000 fd2e 	bl	8002d68 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800230c:	88bb      	ldrh	r3, [r7, #4]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	b29b      	uxth	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	743b      	strb	r3, [r7, #16]
 8002316:	88bb      	ldrh	r3, [r7, #4]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	747b      	strb	r3, [r7, #17]
 800231c:	88bb      	ldrh	r3, [r7, #4]
 800231e:	3301      	adds	r3, #1
 8002320:	121b      	asrs	r3, r3, #8
 8002322:	b2db      	uxtb	r3, r3
 8002324:	74bb      	strb	r3, [r7, #18]
 8002326:	88bb      	ldrh	r3, [r7, #4]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3301      	adds	r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002330:	f107 0110 	add.w	r1, r7, #16
 8002334:	2301      	movs	r3, #1
 8002336:	2204      	movs	r2, #4
 8002338:	4824      	ldr	r0, [pc, #144]	; (80023cc <ILI9341_Draw_Pixel+0x1b0>)
 800233a:	f001 ff60 	bl	80041fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002344:	4820      	ldr	r0, [pc, #128]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 8002346:	f000 fd0f 	bl	8002d68 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800234a:	2200      	movs	r2, #0
 800234c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002350:	481d      	ldr	r0, [pc, #116]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 8002352:	f000 fd09 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235c:	481a      	ldr	r0, [pc, #104]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 800235e:	f000 fd03 	bl	8002d68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002362:	202c      	movs	r0, #44	; 0x2c
 8002364:	f7ff fc6a 	bl	8001c3c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236e:	4816      	ldr	r0, [pc, #88]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 8002370:	f000 fcfa 	bl	8002d68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800237a:	4813      	ldr	r0, [pc, #76]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 800237c:	f000 fcf4 	bl	8002d68 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002386:	4810      	ldr	r0, [pc, #64]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 8002388:	f000 fcee 	bl	8002d68 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	b29b      	uxth	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	733b      	strb	r3, [r7, #12]
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800239c:	f107 010c 	add.w	r1, r7, #12
 80023a0:	2301      	movs	r3, #1
 80023a2:	2202      	movs	r2, #2
 80023a4:	4809      	ldr	r0, [pc, #36]	; (80023cc <ILI9341_Draw_Pixel+0x1b0>)
 80023a6:	f001 ff2a 	bl	80041fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80023aa:	2201      	movs	r2, #1
 80023ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <ILI9341_Draw_Pixel+0x1ac>)
 80023b2:	f000 fcd9 	bl	8002d68 <HAL_GPIO_WritePin>
 80023b6:	e000      	b.n	80023ba <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80023b8:	bf00      	nop
	
}
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000006 	.word	0x20000006
 80023c4:	20000004 	.word	0x20000004
 80023c8:	40020800 	.word	0x40020800
 80023cc:	20000344 	.word	0x20000344

080023d0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4604      	mov	r4, r0
 80023d8:	4608      	mov	r0, r1
 80023da:	4611      	mov	r1, r2
 80023dc:	461a      	mov	r2, r3
 80023de:	4623      	mov	r3, r4
 80023e0:	80fb      	strh	r3, [r7, #6]
 80023e2:	4603      	mov	r3, r0
 80023e4:	80bb      	strh	r3, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]
 80023ea:	4613      	mov	r3, r2
 80023ec:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <ILI9341_Draw_Rectangle+0xb0>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d23d      	bcs.n	8002476 <ILI9341_Draw_Rectangle+0xa6>
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <ILI9341_Draw_Rectangle+0xb4>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	88ba      	ldrh	r2, [r7, #4]
 8002402:	429a      	cmp	r2, r3
 8002404:	d237      	bcs.n	8002476 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	4413      	add	r3, r2
 800240c:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <ILI9341_Draw_Rectangle+0xb0>)
 800240e:	8812      	ldrh	r2, [r2, #0]
 8002410:	b292      	uxth	r2, r2
 8002412:	4293      	cmp	r3, r2
 8002414:	dd05      	ble.n	8002422 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <ILI9341_Draw_Rectangle+0xb0>)
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29a      	uxth	r2, r3
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002422:	88ba      	ldrh	r2, [r7, #4]
 8002424:	883b      	ldrh	r3, [r7, #0]
 8002426:	4413      	add	r3, r2
 8002428:	4a16      	ldr	r2, [pc, #88]	; (8002484 <ILI9341_Draw_Rectangle+0xb4>)
 800242a:	8812      	ldrh	r2, [r2, #0]
 800242c:	b292      	uxth	r2, r2
 800242e:	4293      	cmp	r3, r2
 8002430:	dd05      	ble.n	800243e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <ILI9341_Draw_Rectangle+0xb4>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29a      	uxth	r2, r3
 8002438:	88bb      	ldrh	r3, [r7, #4]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800243e:	88fa      	ldrh	r2, [r7, #6]
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	4413      	add	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29c      	uxth	r4, r3
 800244a:	88ba      	ldrh	r2, [r7, #4]
 800244c:	883b      	ldrh	r3, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29b      	uxth	r3, r3
 8002456:	88b9      	ldrh	r1, [r7, #4]
 8002458:	88f8      	ldrh	r0, [r7, #6]
 800245a:	4622      	mov	r2, r4
 800245c:	f7ff fc44 	bl	8001ce8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002460:	883b      	ldrh	r3, [r7, #0]
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	461a      	mov	r2, r3
 800246a:	8b3b      	ldrh	r3, [r7, #24]
 800246c:	4611      	mov	r1, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fe10 	bl	8002094 <ILI9341_Draw_Colour_Burst>
 8002474:	e000      	b.n	8002478 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002476:	bf00      	nop
}
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}
 800247e:	bf00      	nop
 8002480:	20000006 	.word	0x20000006
 8002484:	20000004 	.word	0x20000004

08002488 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 800248e:	2310      	movs	r3, #16
 8002490:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002496:	e019      	b.n	80024cc <TP_Read+0x44>
    {
        value <<= 1;
 8002498:	88bb      	ldrh	r3, [r7, #4]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800249e:	2201      	movs	r2, #1
 80024a0:	2108      	movs	r1, #8
 80024a2:	480e      	ldr	r0, [pc, #56]	; (80024dc <TP_Read+0x54>)
 80024a4:	f000 fc60 	bl	8002d68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2108      	movs	r1, #8
 80024ac:	480b      	ldr	r0, [pc, #44]	; (80024dc <TP_Read+0x54>)
 80024ae:	f000 fc5b 	bl	8002d68 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80024b2:	2110      	movs	r1, #16
 80024b4:	4809      	ldr	r0, [pc, #36]	; (80024dc <TP_Read+0x54>)
 80024b6:	f000 fc3f 	bl	8002d38 <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <TP_Read+0x3e>
        {
            value++;
 80024c0:	88bb      	ldrh	r3, [r7, #4]
 80024c2:	3301      	adds	r3, #1
 80024c4:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1e2      	bne.n	8002498 <TP_Read+0x10>
    };

    return value;
 80024d2:	88bb      	ldrh	r3, [r7, #4]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000

080024e0 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 80024ea:	2308      	movs	r3, #8
 80024ec:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80024ee:	2200      	movs	r2, #0
 80024f0:	2108      	movs	r1, #8
 80024f2:	4815      	ldr	r0, [pc, #84]	; (8002548 <TP_Write+0x68>)
 80024f4:	f000 fc38 	bl	8002d68 <HAL_GPIO_WritePin>
	
    while(i > 0)
 80024f8:	e01e      	b.n	8002538 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da05      	bge.n	800250e <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002502:	2201      	movs	r2, #1
 8002504:	2120      	movs	r1, #32
 8002506:	4810      	ldr	r0, [pc, #64]	; (8002548 <TP_Write+0x68>)
 8002508:	f000 fc2e 	bl	8002d68 <HAL_GPIO_WritePin>
 800250c:	e004      	b.n	8002518 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	2120      	movs	r1, #32
 8002512:	480d      	ldr	r0, [pc, #52]	; (8002548 <TP_Write+0x68>)
 8002514:	f000 fc28 	bl	8002d68 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	2108      	movs	r1, #8
 8002522:	4809      	ldr	r0, [pc, #36]	; (8002548 <TP_Write+0x68>)
 8002524:	f000 fc20 	bl	8002d68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8002528:	2200      	movs	r2, #0
 800252a:	2108      	movs	r1, #8
 800252c:	4806      	ldr	r0, [pc, #24]	; (8002548 <TP_Write+0x68>)
 800252e:	f000 fc1b 	bl	8002d68 <HAL_GPIO_WritePin>
        i--;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	3b01      	subs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1dd      	bne.n	80024fa <TP_Write+0x1a>
    };
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	00000000 	.word	0x00000000

08002550 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002558:	2201      	movs	r2, #1
 800255a:	2108      	movs	r1, #8
 800255c:	485a      	ldr	r0, [pc, #360]	; (80026c8 <TP_Read_Coordinates+0x178>)
 800255e:	f000 fc03 	bl	8002d68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002562:	2201      	movs	r2, #1
 8002564:	2120      	movs	r1, #32
 8002566:	4858      	ldr	r0, [pc, #352]	; (80026c8 <TP_Read_Coordinates+0x178>)
 8002568:	f000 fbfe 	bl	8002d68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 800256c:	2201      	movs	r2, #1
 800256e:	2140      	movs	r1, #64	; 0x40
 8002570:	4855      	ldr	r0, [pc, #340]	; (80026c8 <TP_Read_Coordinates+0x178>)
 8002572:	f000 fbf9 	bl	8002d68 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 800257a:	2300      	movs	r3, #0
 800257c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	2140      	movs	r1, #64	; 0x40
 8002590:	484d      	ldr	r0, [pc, #308]	; (80026c8 <TP_Read_Coordinates+0x178>)
 8002592:	f000 fbe9 	bl	8002d68 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002596:	e023      	b.n	80025e0 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002598:	2090      	movs	r0, #144	; 0x90
 800259a:	f7ff ffa1 	bl	80024e0 <TP_Write>

				rawy = TP_Read();	
 800259e:	f7ff ff73 	bl	8002488 <TP_Read>
 80025a2:	4603      	mov	r3, r0
 80025a4:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 80025a6:	89fb      	ldrh	r3, [r7, #14]
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	4413      	add	r3, r2
 80025ac:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 80025ae:	89fb      	ldrh	r3, [r7, #14]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 80025b6:	20d0      	movs	r0, #208	; 0xd0
 80025b8:	f7ff ff92 	bl	80024e0 <TP_Write>
        rawx = TP_Read();
 80025bc:	f7ff ff64 	bl	8002488 <TP_Read>
 80025c0:	4603      	mov	r3, r0
 80025c2:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80025c4:	89bb      	ldrh	r3, [r7, #12]
 80025c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c8:	4413      	add	r3, r2
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 80025cc:	89bb      	ldrh	r3, [r7, #12]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]
        samples--;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
				counted_samples++;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	3301      	adds	r3, #1
 80025de:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <TP_Read_Coordinates+0xa4>
 80025e6:	2104      	movs	r1, #4
 80025e8:	4837      	ldr	r0, [pc, #220]	; (80026c8 <TP_Read_Coordinates+0x178>)
 80025ea:	f000 fba5 	bl	8002d38 <HAL_GPIO_ReadPin>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0d1      	beq.n	8002598 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	2140      	movs	r1, #64	; 0x40
 80025f8:	4833      	ldr	r0, [pc, #204]	; (80026c8 <TP_Read_Coordinates+0x178>)
 80025fa:	f000 fbb5 	bl	8002d68 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002604:	d14d      	bne.n	80026a2 <TP_Read_Coordinates+0x152>
 8002606:	2104      	movs	r1, #4
 8002608:	482f      	ldr	r0, [pc, #188]	; (80026c8 <TP_Read_Coordinates+0x178>)
 800260a:	f000 fb95 	bl	8002d38 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d146      	bne.n	80026a2 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002630:	89bb      	ldrh	r3, [r7, #12]
 8002632:	425b      	negs	r3, r3
 8002634:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	425b      	negs	r3, r3
 800263a:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 800263c:	89ba      	ldrh	r2, [r7, #12]
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <TP_Read_Coordinates+0x17c>)
 8002640:	fba3 1302 	umull	r1, r3, r3, r2
 8002644:	1ad2      	subs	r2, r2, r3
 8002646:	0852      	lsrs	r2, r2, #1
 8002648:	4413      	add	r3, r2
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	b29b      	uxth	r3, r3
 800264e:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800265a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80026c0 <TP_Read_Coordinates+0x170>
 800265e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002662:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002666:	ee17 3a90 	vmov	r3, s15
 800266a:	b29a      	uxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002670:	89fb      	ldrh	r3, [r7, #14]
 8002672:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <TP_Read_Coordinates+0x180>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	09db      	lsrs	r3, r3, #7
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b0f      	subs	r3, #15
 800267e:	ee07 3a90 	vmov	s15, r3
 8002682:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002686:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80026c0 <TP_Read_Coordinates+0x170>
 800268a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3302      	adds	r3, #2
 8002692:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002696:	ee17 2a90 	vmov	r2, s15
 800269a:	b292      	uxth	r2, r2
 800269c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 800269e:	2301      	movs	r3, #1
 80026a0:	e007      	b.n	80026b2 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3302      	adds	r3, #2
 80026ac:	2200      	movs	r2, #0
 80026ae:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80026b0:	2300      	movs	r3, #0
		}
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	f3af 8000 	nop.w
 80026c0:	28f5c28f 	.word	0x28f5c28f
 80026c4:	3ff28f5c 	.word	0x3ff28f5c
 80026c8:	40021000 	.word	0x40021000
 80026cc:	e01e01e1 	.word	0xe01e01e1
 80026d0:	a0a0a0a1 	.word	0xa0a0a0a1

080026d4 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 80026d8:	2104      	movs	r1, #4
 80026da:	4805      	ldr	r0, [pc, #20]	; (80026f0 <TP_Touchpad_Pressed+0x1c>)
 80026dc:	f000 fb2c 	bl	8002d38 <HAL_GPIO_ReadPin>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80026ea:	2300      	movs	r3, #0
	}
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_Init+0x34>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <HAL_Init+0x34>)
 80026fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002702:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_Init+0x34>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_Init+0x34>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002710:	2003      	movs	r0, #3
 8002712:	f000 f931 	bl	8002978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002716:	2000      	movs	r0, #0
 8002718:	f000 f808 	bl	800272c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800271c:	f7fe fd44 	bl	80011a8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023c00 	.word	0x40023c00

0800272c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_InitTick+0x54>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_InitTick+0x58>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002742:	fbb3 f3f1 	udiv	r3, r3, r1
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f93b 	bl	80029c6 <HAL_SYSTICK_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e00e      	b.n	8002778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d80a      	bhi.n	8002776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002760:	2200      	movs	r2, #0
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f000 f911 	bl	800298e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800276c:	4a06      	ldr	r2, [pc, #24]	; (8002788 <HAL_InitTick+0x5c>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e000      	b.n	8002778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000000 	.word	0x20000000
 8002784:	2000000c 	.word	0x2000000c
 8002788:	20000008 	.word	0x20000008

0800278c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_IncTick+0x20>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_IncTick+0x24>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_IncTick+0x24>)
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	2000000c 	.word	0x2000000c
 80027b0:	2000047c 	.word	0x2000047c

080027b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return uwTick;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_GetTick+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	2000047c 	.word	0x2000047c

080027cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff ffee 	bl	80027b4 <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d005      	beq.n	80027f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_Delay+0x44>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027f2:	bf00      	nop
 80027f4:	f7ff ffde 	bl	80027b4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d8f7      	bhi.n	80027f4 <HAL_Delay+0x28>
  {
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	2000000c 	.word	0x2000000c

08002814 <__NVIC_SetPriorityGrouping>:
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <__NVIC_SetPriorityGrouping+0x40>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 800283e:	4313      	orrs	r3, r2
 8002840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002842:	4a04      	ldr	r2, [pc, #16]	; (8002854 <__NVIC_SetPriorityGrouping+0x40>)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	60d3      	str	r3, [r2, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00
 8002858:	05fa0000 	.word	0x05fa0000

0800285c <__NVIC_GetPriorityGrouping>:
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_SetPriority>:
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	db0a      	blt.n	80028a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	490c      	ldr	r1, [pc, #48]	; (80028c4 <__NVIC_SetPriority+0x4c>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	440b      	add	r3, r1
 800289c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028a0:	e00a      	b.n	80028b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4908      	ldr	r1, [pc, #32]	; (80028c8 <__NVIC_SetPriority+0x50>)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	3b04      	subs	r3, #4
 80028b0:	0112      	lsls	r2, r2, #4
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	440b      	add	r3, r1
 80028b6:	761a      	strb	r2, [r3, #24]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000e100 	.word	0xe000e100
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <NVIC_EncodePriority>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f1c3 0307 	rsb	r3, r3, #7
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	bf28      	it	cs
 80028ea:	2304      	movcs	r3, #4
 80028ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d902      	bls.n	80028fc <NVIC_EncodePriority+0x30>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3b03      	subs	r3, #3
 80028fa:	e000      	b.n	80028fe <NVIC_EncodePriority+0x32>
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	401a      	ands	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43d9      	mvns	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	4313      	orrs	r3, r2
}
 8002926:	4618      	mov	r0, r3
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002944:	d301      	bcc.n	800294a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002946:	2301      	movs	r3, #1
 8002948:	e00f      	b.n	800296a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294a:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <SysTick_Config+0x40>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002952:	210f      	movs	r1, #15
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	f7ff ff8e 	bl	8002878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <SysTick_Config+0x40>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <SysTick_Config+0x40>)
 8002964:	2207      	movs	r2, #7
 8002966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	e000e010 	.word	0xe000e010

08002978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff47 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a0:	f7ff ff5c 	bl	800285c <__NVIC_GetPriorityGrouping>
 80029a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	6978      	ldr	r0, [r7, #20]
 80029ac:	f7ff ff8e 	bl	80028cc <NVIC_EncodePriority>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff5d 	bl	8002878 <__NVIC_SetPriority>
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff ffb0 	bl	8002934 <SysTick_Config>
 80029d4:	4603      	mov	r3, r0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	; 0x24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e175      	b.n	8002cec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	f040 8164 	bne.w	8002ce6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d00b      	beq.n	8002a3e <HAL_GPIO_Init+0x5e>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d007      	beq.n	8002a3e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a32:	2b11      	cmp	r3, #17
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b12      	cmp	r3, #18
 8002a3c:	d130      	bne.n	8002aa0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	2203      	movs	r2, #3
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 0201 	and.w	r2, r3, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x100>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b12      	cmp	r3, #18
 8002ade:	d123      	bne.n	8002b28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	08da      	lsrs	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3208      	adds	r2, #8
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3208      	adds	r2, #8
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80be 	beq.w	8002ce6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_GPIO_Init+0x324>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	4a65      	ldr	r2, [pc, #404]	; (8002d04 <HAL_GPIO_Init+0x324>)
 8002b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b74:	6453      	str	r3, [r2, #68]	; 0x44
 8002b76:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_GPIO_Init+0x324>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b82:	4a61      	ldr	r2, [pc, #388]	; (8002d08 <HAL_GPIO_Init+0x328>)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	3302      	adds	r3, #2
 8002b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	220f      	movs	r2, #15
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_GPIO_Init+0x32c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d037      	beq.n	8002c1e <HAL_GPIO_Init+0x23e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a57      	ldr	r2, [pc, #348]	; (8002d10 <HAL_GPIO_Init+0x330>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d031      	beq.n	8002c1a <HAL_GPIO_Init+0x23a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a56      	ldr	r2, [pc, #344]	; (8002d14 <HAL_GPIO_Init+0x334>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d02b      	beq.n	8002c16 <HAL_GPIO_Init+0x236>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a55      	ldr	r2, [pc, #340]	; (8002d18 <HAL_GPIO_Init+0x338>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d025      	beq.n	8002c12 <HAL_GPIO_Init+0x232>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a54      	ldr	r2, [pc, #336]	; (8002d1c <HAL_GPIO_Init+0x33c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01f      	beq.n	8002c0e <HAL_GPIO_Init+0x22e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a53      	ldr	r2, [pc, #332]	; (8002d20 <HAL_GPIO_Init+0x340>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d019      	beq.n	8002c0a <HAL_GPIO_Init+0x22a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a52      	ldr	r2, [pc, #328]	; (8002d24 <HAL_GPIO_Init+0x344>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0x226>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a51      	ldr	r2, [pc, #324]	; (8002d28 <HAL_GPIO_Init+0x348>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00d      	beq.n	8002c02 <HAL_GPIO_Init+0x222>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a50      	ldr	r2, [pc, #320]	; (8002d2c <HAL_GPIO_Init+0x34c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <HAL_GPIO_Init+0x21e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4f      	ldr	r2, [pc, #316]	; (8002d30 <HAL_GPIO_Init+0x350>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_GPIO_Init+0x21a>
 8002bf6:	2309      	movs	r3, #9
 8002bf8:	e012      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002bfa:	230a      	movs	r3, #10
 8002bfc:	e010      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002bfe:	2308      	movs	r3, #8
 8002c00:	e00e      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c02:	2307      	movs	r3, #7
 8002c04:	e00c      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c06:	2306      	movs	r3, #6
 8002c08:	e00a      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c0a:	2305      	movs	r3, #5
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x240>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	; (8002d08 <HAL_GPIO_Init+0x328>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <HAL_GPIO_Init+0x354>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c62:	4a34      	ldr	r2, [pc, #208]	; (8002d34 <HAL_GPIO_Init+0x354>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c68:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <HAL_GPIO_Init+0x354>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c8c:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <HAL_GPIO_Init+0x354>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_GPIO_Init+0x354>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_GPIO_Init+0x354>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_GPIO_Init+0x354>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <HAL_GPIO_Init+0x354>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	f67f ae86 	bls.w	8002a00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	; 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40021400 	.word	0x40021400
 8002d24:	40021800 	.word	0x40021800
 8002d28:	40021c00 	.word	0x40021c00
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40022400 	.word	0x40022400
 8002d34:	40013c00 	.word	0x40013c00

08002d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	e001      	b.n	8002d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
 8002d74:	4613      	mov	r3, r2
 8002d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d78:	787b      	ldrb	r3, [r7, #1]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d84:	e003      	b.n	8002d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	041a      	lsls	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	619a      	str	r2, [r3, #24]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40007000 	.word	0x40007000

08002dbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dea:	f7ff fce3 	bl	80027b4 <HAL_GetTick>
 8002dee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002df0:	e009      	b.n	8002e06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002df2:	f7ff fcdf 	bl	80027b4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e00:	d901      	bls.n	8002e06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e022      	b.n	8002e4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e12:	d1ee      	bne.n	8002df2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0f      	ldr	r2, [pc, #60]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e20:	f7ff fcc8 	bl	80027b4 <HAL_GetTick>
 8002e24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e26:	e009      	b.n	8002e3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e28:	f7ff fcc4 	bl	80027b4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e36:	d901      	bls.n	8002e3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e007      	b.n	8002e4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e48:	d1ee      	bne.n	8002e28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40007000 	.word	0x40007000

08002e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e29b      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8087 	beq.w	8002f8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e80:	4b96      	ldr	r3, [pc, #600]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8c:	4b93      	ldr	r3, [pc, #588]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d112      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62>
 8002e98:	4b90      	ldr	r3, [pc, #576]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea4:	d10b      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea6:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d06c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x130>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d168      	bne.n	8002f8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e275      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x7a>
 8002ec8:	4b84      	ldr	r3, [pc, #528]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a83      	ldr	r2, [pc, #524]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	e02e      	b.n	8002f34 <HAL_RCC_OscConfig+0xd8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x9c>
 8002ede:	4b7f      	ldr	r3, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7e      	ldr	r2, [pc, #504]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b7c      	ldr	r3, [pc, #496]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7b      	ldr	r2, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e01d      	b.n	8002f34 <HAL_RCC_OscConfig+0xd8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0xc0>
 8002f02:	4b76      	ldr	r3, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a75      	ldr	r2, [pc, #468]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b73      	ldr	r3, [pc, #460]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a72      	ldr	r2, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0xd8>
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b6c      	ldr	r3, [pc, #432]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a6b      	ldr	r2, [pc, #428]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7ff fc3a 	bl	80027b4 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7ff fc36 	bl	80027b4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e229      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0xe8>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7ff fc26 	bl	80027b4 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7ff fc22 	bl	80027b4 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e215      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b57      	ldr	r3, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x110>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d069      	beq.n	800306e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9a:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa6:	4b4d      	ldr	r3, [pc, #308]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x190>
 8002fb2:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x17a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1e9      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	493d      	ldr	r1, [pc, #244]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e040      	b.n	800306e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d023      	beq.n	800303c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a38      	ldr	r2, [pc, #224]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7ff fbd8 	bl	80027b4 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003008:	f7ff fbd4 	bl	80027b4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1c7      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003026:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4929      	ldr	r1, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
 800303a:	e018      	b.n	800306e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a26      	ldr	r2, [pc, #152]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7ff fbb4 	bl	80027b4 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003050:	f7ff fbb0 	bl	80027b4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e1a3      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d038      	beq.n	80030ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d019      	beq.n	80030b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7ff fb91 	bl	80027b4 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003096:	f7ff fb8d 	bl	80027b4 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e180      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x23a>
 80030b4:	e01a      	b.n	80030ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 80030b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ba:	4a08      	ldr	r2, [pc, #32]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7ff fb77 	bl	80027b4 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ca:	f7ff fb73 	bl	80027b4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d903      	bls.n	80030e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e166      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
 80030dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	4b92      	ldr	r3, [pc, #584]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ee      	bne.n	80030ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a4 	beq.w	8003242 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fa:	4b8c      	ldr	r3, [pc, #560]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4b89      	ldr	r3, [pc, #548]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a88      	ldr	r2, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 8003112:	4b86      	ldr	r3, [pc, #536]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311e:	2301      	movs	r3, #1
 8003120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003122:	4b83      	ldr	r3, [pc, #524]	; (8003330 <HAL_RCC_OscConfig+0x4d4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d118      	bne.n	8003160 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800312e:	4b80      	ldr	r3, [pc, #512]	; (8003330 <HAL_RCC_OscConfig+0x4d4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a7f      	ldr	r2, [pc, #508]	; (8003330 <HAL_RCC_OscConfig+0x4d4>)
 8003134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313a:	f7ff fb3b 	bl	80027b4 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003142:	f7ff fb37 	bl	80027b4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b64      	cmp	r3, #100	; 0x64
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e12a      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003154:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x4d4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x31a>
 8003168:	4b70      	ldr	r3, [pc, #448]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a6f      	ldr	r2, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
 8003174:	e02d      	b.n	80031d2 <HAL_RCC_OscConfig+0x376>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x33c>
 800317e:	4b6b      	ldr	r3, [pc, #428]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a6a      	ldr	r2, [pc, #424]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	4b68      	ldr	r3, [pc, #416]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a67      	ldr	r2, [pc, #412]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	e01c      	b.n	80031d2 <HAL_RCC_OscConfig+0x376>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d10c      	bne.n	80031ba <HAL_RCC_OscConfig+0x35e>
 80031a0:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a61      	ldr	r2, [pc, #388]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	4b5f      	ldr	r3, [pc, #380]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a5e      	ldr	r2, [pc, #376]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	e00b      	b.n	80031d2 <HAL_RCC_OscConfig+0x376>
 80031ba:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a5b      	ldr	r2, [pc, #364]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	4a58      	ldr	r2, [pc, #352]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	f023 0304 	bic.w	r3, r3, #4
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d015      	beq.n	8003206 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7ff faeb 	bl	80027b4 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7ff fae7 	bl	80027b4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e0d8      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	4b4c      	ldr	r3, [pc, #304]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ee      	beq.n	80031e2 <HAL_RCC_OscConfig+0x386>
 8003204:	e014      	b.n	8003230 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003206:	f7ff fad5 	bl	80027b4 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7ff fad1 	bl	80027b4 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0c2      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003224:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ee      	bne.n	800320e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a3c      	ldr	r2, [pc, #240]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80ae 	beq.w	80033a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800324c:	4b37      	ldr	r3, [pc, #220]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d06d      	beq.n	8003334 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d14b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a31      	ldr	r2, [pc, #196]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800326a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7ff faa2 	bl	80027b4 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003274:	f7ff fa9e 	bl	80027b4 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e091      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	019b      	lsls	r3, r3, #6
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	071b      	lsls	r3, r3, #28
 80032be:	491b      	ldr	r1, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7ff fa70 	bl	80027b4 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7ff fa6c 	bl	80027b4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e05f      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x47c>
 80032f6:	e057      	b.n	80033a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0b      	ldr	r2, [pc, #44]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7ff fa56 	bl	80027b4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7ff fa52 	bl	80027b4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e045      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x4b0>
 800332a:	e03d      	b.n	80033a8 <HAL_RCC_OscConfig+0x54c>
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003334:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <HAL_RCC_OscConfig+0x558>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d030      	beq.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d129      	bne.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d122      	bne.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800336a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800336c:	4293      	cmp	r3, r2
 800336e:	d119      	bne.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d10f      	bne.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0d0      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b6a      	ldr	r3, [pc, #424]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b67      	ldr	r3, [pc, #412]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 020f 	bic.w	r2, r3, #15
 80033e6:	4965      	ldr	r1, [pc, #404]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b63      	ldr	r3, [pc, #396]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0b8      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003418:	4b59      	ldr	r3, [pc, #356]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a58      	ldr	r2, [pc, #352]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003422:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003430:	4b53      	ldr	r3, [pc, #332]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a52      	ldr	r2, [pc, #328]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003436:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800343a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800343c:	4b50      	ldr	r3, [pc, #320]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	494d      	ldr	r1, [pc, #308]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d040      	beq.n	80034dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d115      	bne.n	800349a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e07f      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b41      	ldr	r3, [pc, #260]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e073      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348a:	4b3d      	ldr	r3, [pc, #244]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06b      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4936      	ldr	r1, [pc, #216]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7ff f982 	bl	80027b4 <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7ff f97e 	bl	80027b4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e053      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b27      	ldr	r3, [pc, #156]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d210      	bcs.n	800350c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 020f 	bic.w	r2, r3, #15
 80034f2:	4922      	ldr	r1, [pc, #136]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e032      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4916      	ldr	r1, [pc, #88]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003536:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	490e      	ldr	r1, [pc, #56]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800354a:	f000 f821 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 800354e:	4602      	mov	r2, r0
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	490a      	ldr	r1, [pc, #40]	; (8003584 <HAL_RCC_ClockConfig+0x1cc>)
 800355c:	5ccb      	ldrb	r3, [r1, r3]
 800355e:	fa22 f303 	lsr.w	r3, r2, r3
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1d0>)
 8003564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_RCC_ClockConfig+0x1d4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f8de 	bl	800272c <HAL_InitTick>

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023c00 	.word	0x40023c00
 8003580:	40023800 	.word	0x40023800
 8003584:	0802e31c 	.word	0x0802e31c
 8003588:	20000000 	.word	0x20000000
 800358c:	20000008 	.word	0x20000008

08003590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003594:	b094      	sub	sp, #80	; 0x50
 8003596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	647b      	str	r3, [r7, #68]	; 0x44
 800359c:	2300      	movs	r3, #0
 800359e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a0:	2300      	movs	r3, #0
 80035a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a8:	4b79      	ldr	r3, [pc, #484]	; (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d00d      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x40>
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	f200 80e1 	bhi.w	800377c <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x34>
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d003      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x3a>
 80035c2:	e0db      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c4:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_GetSysClockFreq+0x204>)
 80035c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035c8:	e0db      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ca:	4b73      	ldr	r3, [pc, #460]	; (8003798 <HAL_RCC_GetSysClockFreq+0x208>)
 80035cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ce:	e0d8      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d0:	4b6f      	ldr	r3, [pc, #444]	; (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035da:	4b6d      	ldr	r3, [pc, #436]	; (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d063      	beq.n	80036ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e6:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	099b      	lsrs	r3, r3, #6
 80035ec:	2200      	movs	r2, #0
 80035ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
 80035fa:	2300      	movs	r3, #0
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
 80035fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003602:	4622      	mov	r2, r4
 8003604:	462b      	mov	r3, r5
 8003606:	f04f 0000 	mov.w	r0, #0
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	0159      	lsls	r1, r3, #5
 8003610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003614:	0150      	lsls	r0, r2, #5
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4621      	mov	r1, r4
 800361c:	1a51      	subs	r1, r2, r1
 800361e:	6139      	str	r1, [r7, #16]
 8003620:	4629      	mov	r1, r5
 8003622:	eb63 0301 	sbc.w	r3, r3, r1
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003634:	4659      	mov	r1, fp
 8003636:	018b      	lsls	r3, r1, #6
 8003638:	4651      	mov	r1, sl
 800363a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800363e:	4651      	mov	r1, sl
 8003640:	018a      	lsls	r2, r1, #6
 8003642:	4651      	mov	r1, sl
 8003644:	ebb2 0801 	subs.w	r8, r2, r1
 8003648:	4659      	mov	r1, fp
 800364a:	eb63 0901 	sbc.w	r9, r3, r1
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800365a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800365e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003662:	4690      	mov	r8, r2
 8003664:	4699      	mov	r9, r3
 8003666:	4623      	mov	r3, r4
 8003668:	eb18 0303 	adds.w	r3, r8, r3
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	462b      	mov	r3, r5
 8003670:	eb49 0303 	adc.w	r3, r9, r3
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003682:	4629      	mov	r1, r5
 8003684:	024b      	lsls	r3, r1, #9
 8003686:	4621      	mov	r1, r4
 8003688:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800368c:	4621      	mov	r1, r4
 800368e:	024a      	lsls	r2, r1, #9
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003696:	2200      	movs	r2, #0
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
 800369a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800369c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036a0:	f7fc fe26 	bl	80002f0 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4613      	mov	r3, r2
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ac:	e058      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ae:	4b38      	ldr	r3, [pc, #224]	; (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	2200      	movs	r2, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	4611      	mov	r1, r2
 80036ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036be:	623b      	str	r3, [r7, #32]
 80036c0:	2300      	movs	r3, #0
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
 80036c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036c8:	4642      	mov	r2, r8
 80036ca:	464b      	mov	r3, r9
 80036cc:	f04f 0000 	mov.w	r0, #0
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	0159      	lsls	r1, r3, #5
 80036d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036da:	0150      	lsls	r0, r2, #5
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4641      	mov	r1, r8
 80036e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036e6:	4649      	mov	r1, r9
 80036e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003700:	ebb2 040a 	subs.w	r4, r2, sl
 8003704:	eb63 050b 	sbc.w	r5, r3, fp
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	00eb      	lsls	r3, r5, #3
 8003712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003716:	00e2      	lsls	r2, r4, #3
 8003718:	4614      	mov	r4, r2
 800371a:	461d      	mov	r5, r3
 800371c:	4643      	mov	r3, r8
 800371e:	18e3      	adds	r3, r4, r3
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	464b      	mov	r3, r9
 8003724:	eb45 0303 	adc.w	r3, r5, r3
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003736:	4629      	mov	r1, r5
 8003738:	028b      	lsls	r3, r1, #10
 800373a:	4621      	mov	r1, r4
 800373c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003740:	4621      	mov	r1, r4
 8003742:	028a      	lsls	r2, r1, #10
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800374a:	2200      	movs	r2, #0
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	61fa      	str	r2, [r7, #28]
 8003750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003754:	f7fc fdcc 	bl	80002f0 <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4613      	mov	r3, r2
 800375e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	3301      	adds	r3, #1
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800377a:	e002      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetSysClockFreq+0x204>)
 800377e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003784:	4618      	mov	r0, r3
 8003786:	3750      	adds	r7, #80	; 0x50
 8003788:	46bd      	mov	sp, r7
 800378a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	00f42400 	.word	0x00f42400
 8003798:	007a1200 	.word	0x007a1200

0800379c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000000 	.word	0x20000000

080037b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037b8:	f7ff fff0 	bl	800379c <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0a9b      	lsrs	r3, r3, #10
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	0802e32c 	.word	0x0802e32c

080037dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037e0:	f7ff ffdc 	bl	800379c <HAL_RCC_GetHCLKFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	0b5b      	lsrs	r3, r3, #13
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4903      	ldr	r1, [pc, #12]	; (8003800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40023800 	.word	0x40023800
 8003800:	0802e32c 	.word	0x0802e32c

08003804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d012      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800382c:	4b69      	ldr	r3, [pc, #420]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a68      	ldr	r2, [pc, #416]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003832:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003836:	6093      	str	r3, [r2, #8]
 8003838:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	4964      	ldr	r1, [pc, #400]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800384e:	2301      	movs	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d017      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800385e:	4b5d      	ldr	r3, [pc, #372]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003864:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386c:	4959      	ldr	r1, [pc, #356]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800387c:	d101      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800387e:	2301      	movs	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800388a:	2301      	movs	r3, #1
 800388c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d017      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800389a:	4b4e      	ldr	r3, [pc, #312]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	494a      	ldr	r1, [pc, #296]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b8:	d101      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038d6:	2301      	movs	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 808b 	beq.w	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e8:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	4a39      	ldr	r2, [pc, #228]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f2:	6413      	str	r3, [r2, #64]	; 0x40
 80038f4:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a34      	ldr	r2, [pc, #208]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fe ff52 	bl	80027b4 <HAL_GetTick>
 8003910:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003914:	f7fe ff4e 	bl	80027b4 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e38f      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003926:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003932:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d035      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d02e      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003950:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003958:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003970:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003972:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d114      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe ff16 	bl	80027b4 <HAL_GetTick>
 8003988:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398a:	e00a      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398c:	f7fe ff12 	bl	80027b4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	; 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e351      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ee      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ba:	d111      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039ca:	400b      	ands	r3, r1
 80039cc:	4901      	ldr	r1, [pc, #4]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
 80039d2:	e00b      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40007000 	.word	0x40007000
 80039dc:	0ffffcff 	.word	0x0ffffcff
 80039e0:	4bac      	ldr	r3, [pc, #688]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4aab      	ldr	r2, [pc, #684]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039ea:	6093      	str	r3, [r2, #8]
 80039ec:	4ba9      	ldr	r3, [pc, #676]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f8:	49a6      	ldr	r1, [pc, #664]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d010      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a0a:	4ba2      	ldr	r3, [pc, #648]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a10:	4aa0      	ldr	r2, [pc, #640]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a1a:	4b9e      	ldr	r3, [pc, #632]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	499b      	ldr	r1, [pc, #620]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a38:	4b96      	ldr	r3, [pc, #600]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a46:	4993      	ldr	r1, [pc, #588]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a5a:	4b8e      	ldr	r3, [pc, #568]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a68:	498a      	ldr	r1, [pc, #552]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a7c:	4b85      	ldr	r3, [pc, #532]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8a:	4982      	ldr	r1, [pc, #520]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a9e:	4b7d      	ldr	r3, [pc, #500]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4979      	ldr	r1, [pc, #484]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ac0:	4b74      	ldr	r3, [pc, #464]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	4971      	ldr	r1, [pc, #452]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ae2:	4b6c      	ldr	r3, [pc, #432]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	f023 020c 	bic.w	r2, r3, #12
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af0:	4968      	ldr	r1, [pc, #416]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b04:	4b63      	ldr	r3, [pc, #396]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	4960      	ldr	r1, [pc, #384]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b26:	4b5b      	ldr	r3, [pc, #364]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b34:	4957      	ldr	r1, [pc, #348]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b48:	4b52      	ldr	r3, [pc, #328]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	494f      	ldr	r1, [pc, #316]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b6a:	4b4a      	ldr	r3, [pc, #296]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	4946      	ldr	r1, [pc, #280]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b8c:	4b41      	ldr	r3, [pc, #260]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9a:	493e      	ldr	r1, [pc, #248]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bae:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbc:	4935      	ldr	r1, [pc, #212]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bd0:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bde:	492d      	ldr	r1, [pc, #180]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d011      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bf2:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c00:	4924      	ldr	r1, [pc, #144]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c10:	d101      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c40:	4914      	ldr	r1, [pc, #80]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c64:	490b      	ldr	r1, [pc, #44]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00f      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c88:	4902      	ldr	r1, [pc, #8]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c90:	e002      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ca4:	4b8a      	ldr	r3, [pc, #552]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003caa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	4986      	ldr	r1, [pc, #536]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cc8:	4b81      	ldr	r3, [pc, #516]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd8:	497d      	ldr	r1, [pc, #500]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d006      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80d6 	beq.w	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cf4:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a75      	ldr	r2, [pc, #468]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d00:	f7fe fd58 	bl	80027b4 <HAL_GetTick>
 8003d04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d08:	f7fe fd54 	bl	80027b4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e195      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d1a:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d021      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d11d      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d3a:	4b65      	ldr	r3, [pc, #404]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d48:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4e:	0e1b      	lsrs	r3, r3, #24
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	019a      	lsls	r2, r3, #6
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	061b      	lsls	r3, r3, #24
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	071b      	lsls	r3, r3, #28
 8003d6e:	4958      	ldr	r1, [pc, #352]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02e      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da0:	d129      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003da2:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003db0:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db6:	0f1b      	lsrs	r3, r3, #28
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	019a      	lsls	r2, r3, #6
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	041b      	lsls	r3, r3, #16
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	061b      	lsls	r3, r3, #24
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	071b      	lsls	r3, r3, #28
 8003dd6:	493e      	ldr	r1, [pc, #248]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dde:	4b3c      	ldr	r3, [pc, #240]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de4:	f023 021f 	bic.w	r2, r3, #31
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	3b01      	subs	r3, #1
 8003dee:	4938      	ldr	r1, [pc, #224]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01d      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e02:	4b33      	ldr	r3, [pc, #204]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e08:	0e1b      	lsrs	r3, r3, #24
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e10:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e16:	0f1b      	lsrs	r3, r3, #28
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	019a      	lsls	r2, r3, #6
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	041b      	lsls	r3, r3, #16
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	4926      	ldr	r1, [pc, #152]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d011      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	019a      	lsls	r2, r3, #6
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	041b      	lsls	r3, r3, #16
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	061b      	lsls	r3, r3, #24
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	071b      	lsls	r3, r3, #28
 8003e66:	491a      	ldr	r1, [pc, #104]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7a:	f7fe fc9b 	bl	80027b4 <HAL_GetTick>
 8003e7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e82:	f7fe fc97 	bl	80027b4 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b64      	cmp	r3, #100	; 0x64
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e0d8      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	f040 80ce 	bne.w	8004044 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb4:	f7fe fc7e 	bl	80027b4 <HAL_GetTick>
 8003eb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ebc:	f7fe fc7a 	bl	80027b4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d904      	bls.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e0bb      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ed4:	4b5e      	ldr	r3, [pc, #376]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee0:	d0ec      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02e      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d12a      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f0a:	4b51      	ldr	r3, [pc, #324]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f18:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	0f1b      	lsrs	r3, r3, #28
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	019a      	lsls	r2, r3, #6
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	071b      	lsls	r3, r3, #28
 8003f3e:	4944      	ldr	r1, [pc, #272]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f46:	4b42      	ldr	r3, [pc, #264]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	493d      	ldr	r1, [pc, #244]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d022      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f74:	d11d      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	0e1b      	lsrs	r3, r3, #24
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	0f1b      	lsrs	r3, r3, #28
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	019a      	lsls	r2, r3, #6
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	4929      	ldr	r1, [pc, #164]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d028      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	0e1b      	lsrs	r3, r3, #24
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fcc:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	019a      	lsls	r2, r3, #6
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	4917      	ldr	r1, [pc, #92]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	4911      	ldr	r1, [pc, #68]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401c:	f7fe fbca 	bl	80027b4 <HAL_GetTick>
 8004020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004024:	f7fe fbc6 	bl	80027b4 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e007      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800403e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004042:	d1ef      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800

08004054 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e01c      	b.n	80040a0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	795b      	ldrb	r3, [r3, #5]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc fff4 	bl	8001064 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0204 	orr.w	r2, r2, #4
 8004090:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e09d      	b.n	80041f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d108      	bne.n	80040d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ca:	d009      	beq.n	80040e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	61da      	str	r2, [r3, #28]
 80040d2:	e005      	b.n	80040e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fd f810 	bl	8001120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004116:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004120:	d902      	bls.n	8004128 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	e002      	b.n	800412e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800412c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004136:	d007      	beq.n	8004148 <HAL_SPI_Init+0xa0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004140:	d002      	beq.n	8004148 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	ea42 0103 	orr.w	r1, r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	0c1b      	lsrs	r3, r3, #16
 80041a4:	f003 0204 	and.w	r2, r3, #4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041c4:	ea42 0103 	orr.w	r1, r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b088      	sub	sp, #32
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	4613      	mov	r3, r2
 800420c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_SPI_Transmit+0x22>
 800421c:	2302      	movs	r3, #2
 800421e:	e158      	b.n	80044d2 <HAL_SPI_Transmit+0x2d4>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004228:	f7fe fac4 	bl	80027b4 <HAL_GetTick>
 800422c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d002      	beq.n	8004244 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800423e:	2302      	movs	r3, #2
 8004240:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004242:	e13d      	b.n	80044c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_SPI_Transmit+0x52>
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004254:	e134      	b.n	80044c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2203      	movs	r2, #3
 800425a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a0:	d10f      	bne.n	80042c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d007      	beq.n	80042e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042e8:	d94b      	bls.n	8004382 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_SPI_Transmit+0xfa>
 80042f2:	8afb      	ldrh	r3, [r7, #22]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d13e      	bne.n	8004376 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800431c:	e02b      	b.n	8004376 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d112      	bne.n	8004352 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	881a      	ldrh	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	1c9a      	adds	r2, r3, #2
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004350:	e011      	b.n	8004376 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004352:	f7fe fa2f 	bl	80027b4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d803      	bhi.n	800436a <HAL_SPI_Transmit+0x16c>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004368:	d102      	bne.n	8004370 <HAL_SPI_Transmit+0x172>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004374:	e0a4      	b.n	80044c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ce      	bne.n	800431e <HAL_SPI_Transmit+0x120>
 8004380:	e07c      	b.n	800447c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_SPI_Transmit+0x192>
 800438a:	8afb      	ldrh	r3, [r7, #22]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d170      	bne.n	8004472 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	d912      	bls.n	80043c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	881a      	ldrh	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	1c9a      	adds	r2, r3, #2
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b02      	subs	r3, #2
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043be:	e058      	b.n	8004472 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	7812      	ldrb	r2, [r2, #0]
 80043cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80043e6:	e044      	b.n	8004472 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d12b      	bne.n	800444e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d912      	bls.n	8004426 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	881a      	ldrh	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	1c9a      	adds	r2, r3, #2
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b02      	subs	r3, #2
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004424:	e025      	b.n	8004472 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	330c      	adds	r3, #12
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800444c:	e011      	b.n	8004472 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800444e:	f7fe f9b1 	bl	80027b4 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d803      	bhi.n	8004466 <HAL_SPI_Transmit+0x268>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d102      	bne.n	800446c <HAL_SPI_Transmit+0x26e>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d102      	bne.n	8004472 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004470:	e026      	b.n	80044c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1b5      	bne.n	80043e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	6839      	ldr	r1, [r7, #0]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f945 	bl	8004710 <SPI_EndRxTxTransaction>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e000      	b.n	80044c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80044be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044ec:	f7fe f962 	bl	80027b4 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4413      	add	r3, r2
 80044fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044fc:	f7fe f95a 	bl	80027b4 <HAL_GetTick>
 8004500:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004502:	4b39      	ldr	r3, [pc, #228]	; (80045e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	015b      	lsls	r3, r3, #5
 8004508:	0d1b      	lsrs	r3, r3, #20
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	fb02 f303 	mul.w	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004512:	e054      	b.n	80045be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d050      	beq.n	80045be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800451c:	f7fe f94a 	bl	80027b4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	429a      	cmp	r2, r3
 800452a:	d902      	bls.n	8004532 <SPI_WaitFlagStateUntilTimeout+0x56>
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d13d      	bne.n	80045ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004540:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454a:	d111      	bne.n	8004570 <SPI_WaitFlagStateUntilTimeout+0x94>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004554:	d004      	beq.n	8004560 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455e:	d107      	bne.n	8004570 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004578:	d10f      	bne.n	800459a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004598:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e017      	b.n	80045de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4013      	ands	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	bf0c      	ite	eq
 80045ce:	2301      	moveq	r3, #1
 80045d0:	2300      	movne	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d19b      	bne.n	8004514 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000000 	.word	0x20000000

080045ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80045fa:	f7fe f8db 	bl	80027b4 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	4413      	add	r3, r2
 8004608:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800460a:	f7fe f8d3 	bl	80027b4 <HAL_GetTick>
 800460e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004610:	4b3e      	ldr	r3, [pc, #248]	; (800470c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	00da      	lsls	r2, r3, #3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	0d1b      	lsrs	r3, r3, #20
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004628:	e062      	b.n	80046f0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004630:	d109      	bne.n	8004646 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004644:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d050      	beq.n	80046f0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800464e:	f7fe f8b1 	bl	80027b4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	69fa      	ldr	r2, [r7, #28]
 800465a:	429a      	cmp	r2, r3
 800465c:	d902      	bls.n	8004664 <SPI_WaitFifoStateUntilTimeout+0x78>
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d13d      	bne.n	80046e0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004672:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800467c:	d111      	bne.n	80046a2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004686:	d004      	beq.n	8004692 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004690:	d107      	bne.n	80046a2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046aa:	d10f      	bne.n	80046cc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e010      	b.n	8004702 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4013      	ands	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d194      	bne.n	800462a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000000 	.word	0x20000000

08004710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f7ff ff5f 	bl	80045ec <SPI_WaitFifoStateUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004738:	f043 0220 	orr.w	r2, r3, #32
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e027      	b.n	8004794 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2200      	movs	r2, #0
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff fec4 	bl	80044dc <SPI_WaitFlagStateUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475e:	f043 0220 	orr.w	r2, r3, #32
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e014      	b.n	8004794 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2200      	movs	r2, #0
 8004772:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7ff ff38 	bl	80045ec <SPI_WaitFifoStateUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d007      	beq.n	8004792 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e000      	b.n	8004794 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e049      	b.n	8004842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fc fe6a 	bl	800149c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f000 f8fc 	bl	80049d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_TIM_ConfigClockSource+0x18>
 8004860:	2302      	movs	r3, #2
 8004862:	e0b3      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x180>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <HAL_TIM_ConfigClockSource+0x188>)
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800488a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489c:	d03e      	beq.n	800491c <HAL_TIM_ConfigClockSource+0xd0>
 800489e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a2:	f200 8087 	bhi.w	80049b4 <HAL_TIM_ConfigClockSource+0x168>
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048aa:	f000 8085 	beq.w	80049b8 <HAL_TIM_ConfigClockSource+0x16c>
 80048ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b2:	d87f      	bhi.n	80049b4 <HAL_TIM_ConfigClockSource+0x168>
 80048b4:	2b70      	cmp	r3, #112	; 0x70
 80048b6:	d01a      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0xa2>
 80048b8:	2b70      	cmp	r3, #112	; 0x70
 80048ba:	d87b      	bhi.n	80049b4 <HAL_TIM_ConfigClockSource+0x168>
 80048bc:	2b60      	cmp	r3, #96	; 0x60
 80048be:	d050      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x116>
 80048c0:	2b60      	cmp	r3, #96	; 0x60
 80048c2:	d877      	bhi.n	80049b4 <HAL_TIM_ConfigClockSource+0x168>
 80048c4:	2b50      	cmp	r3, #80	; 0x50
 80048c6:	d03c      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0xf6>
 80048c8:	2b50      	cmp	r3, #80	; 0x50
 80048ca:	d873      	bhi.n	80049b4 <HAL_TIM_ConfigClockSource+0x168>
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d058      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x136>
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d86f      	bhi.n	80049b4 <HAL_TIM_ConfigClockSource+0x168>
 80048d4:	2b30      	cmp	r3, #48	; 0x30
 80048d6:	d064      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x156>
 80048d8:	2b30      	cmp	r3, #48	; 0x30
 80048da:	d86b      	bhi.n	80049b4 <HAL_TIM_ConfigClockSource+0x168>
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d060      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x156>
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d867      	bhi.n	80049b4 <HAL_TIM_ConfigClockSource+0x168>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d05c      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x156>
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d05a      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80048ec:	e062      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6899      	ldr	r1, [r3, #8]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f000 f985 	bl	8004c0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004910:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	609a      	str	r2, [r3, #8]
      break;
 800491a:	e04e      	b.n	80049ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	6899      	ldr	r1, [r3, #8]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f000 f96e 	bl	8004c0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800493e:	609a      	str	r2, [r3, #8]
      break;
 8004940:	e03b      	b.n	80049ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6859      	ldr	r1, [r3, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	461a      	mov	r2, r3
 8004950:	f000 f8e2 	bl	8004b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2150      	movs	r1, #80	; 0x50
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f93b 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004960:	e02b      	b.n	80049ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6859      	ldr	r1, [r3, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	461a      	mov	r2, r3
 8004970:	f000 f901 	bl	8004b76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2160      	movs	r1, #96	; 0x60
 800497a:	4618      	mov	r0, r3
 800497c:	f000 f92b 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004980:	e01b      	b.n	80049ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	461a      	mov	r2, r3
 8004990:	f000 f8c2 	bl	8004b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2140      	movs	r1, #64	; 0x40
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f91b 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 80049a0:	e00b      	b.n	80049ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f000 f912 	bl	8004bd6 <TIM_ITRx_SetConfig>
        break;
 80049b2:	e002      	b.n	80049ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049b4:	bf00      	nop
 80049b6:	e000      	b.n	80049ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	fffeff88 	.word	0xfffeff88

080049d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a40      	ldr	r2, [pc, #256]	; (8004aec <TIM_Base_SetConfig+0x114>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d013      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f6:	d00f      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a3d      	ldr	r2, [pc, #244]	; (8004af0 <TIM_Base_SetConfig+0x118>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a3c      	ldr	r2, [pc, #240]	; (8004af4 <TIM_Base_SetConfig+0x11c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d007      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a3b      	ldr	r2, [pc, #236]	; (8004af8 <TIM_Base_SetConfig+0x120>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a3a      	ldr	r2, [pc, #232]	; (8004afc <TIM_Base_SetConfig+0x124>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d108      	bne.n	8004a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a2f      	ldr	r2, [pc, #188]	; (8004aec <TIM_Base_SetConfig+0x114>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d02b      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d027      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a2c      	ldr	r2, [pc, #176]	; (8004af0 <TIM_Base_SetConfig+0x118>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d023      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2b      	ldr	r2, [pc, #172]	; (8004af4 <TIM_Base_SetConfig+0x11c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d01f      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <TIM_Base_SetConfig+0x120>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01b      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <TIM_Base_SetConfig+0x124>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d017      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a28      	ldr	r2, [pc, #160]	; (8004b00 <TIM_Base_SetConfig+0x128>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a27      	ldr	r2, [pc, #156]	; (8004b04 <TIM_Base_SetConfig+0x12c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00f      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a26      	ldr	r2, [pc, #152]	; (8004b08 <TIM_Base_SetConfig+0x130>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <TIM_Base_SetConfig+0x134>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a24      	ldr	r2, [pc, #144]	; (8004b10 <TIM_Base_SetConfig+0x138>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <TIM_Base_SetConfig+0x13c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d108      	bne.n	8004a9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <TIM_Base_SetConfig+0x114>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_Base_SetConfig+0xf8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a0c      	ldr	r2, [pc, #48]	; (8004afc <TIM_Base_SetConfig+0x124>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d103      	bne.n	8004ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	615a      	str	r2, [r3, #20]
}
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40010400 	.word	0x40010400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800
 8004b0c:	40001800 	.word	0x40001800
 8004b10:	40001c00 	.word	0x40001c00
 8004b14:	40002000 	.word	0x40002000

08004b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0201 	bic.w	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 030a 	bic.w	r3, r3, #10
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b087      	sub	sp, #28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f023 0210 	bic.w	r2, r3, #16
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	031b      	lsls	r3, r3, #12
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f043 0307 	orr.w	r3, r3, #7
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e06d      	b.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a30      	ldr	r2, [pc, #192]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a2f      	ldr	r2, [pc, #188]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d108      	bne.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d01d      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10c      	bne.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40014000 	.word	0x40014000
 8004d64:	40001800 	.word	0x40001800

08004d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e040      	b.n	8004dfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc fbd6 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2224      	movs	r2, #36	; 0x24
 8004d94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f82c 	bl	8004e04 <UART_SetConfig>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e022      	b.n	8004dfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa84 	bl	80052cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fb0b 	bl	8005410 <UART_CheckIdleState>
 8004dfa:	4603      	mov	r3, r0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4ba6      	ldr	r3, [pc, #664]	; (80050c8 <UART_SetConfig+0x2c4>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	6979      	ldr	r1, [r7, #20]
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a94      	ldr	r2, [pc, #592]	; (80050cc <UART_SetConfig+0x2c8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d120      	bne.n	8004ec2 <UART_SetConfig+0xbe>
 8004e80:	4b93      	ldr	r3, [pc, #588]	; (80050d0 <UART_SetConfig+0x2cc>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d816      	bhi.n	8004ebc <UART_SetConfig+0xb8>
 8004e8e:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <UART_SetConfig+0x90>)
 8004e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e94:	08004ea5 	.word	0x08004ea5
 8004e98:	08004eb1 	.word	0x08004eb1
 8004e9c:	08004eab 	.word	0x08004eab
 8004ea0:	08004eb7 	.word	0x08004eb7
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e150      	b.n	800514c <UART_SetConfig+0x348>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	77fb      	strb	r3, [r7, #31]
 8004eae:	e14d      	b.n	800514c <UART_SetConfig+0x348>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e14a      	b.n	800514c <UART_SetConfig+0x348>
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e147      	b.n	800514c <UART_SetConfig+0x348>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e144      	b.n	800514c <UART_SetConfig+0x348>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a83      	ldr	r2, [pc, #524]	; (80050d4 <UART_SetConfig+0x2d0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d132      	bne.n	8004f32 <UART_SetConfig+0x12e>
 8004ecc:	4b80      	ldr	r3, [pc, #512]	; (80050d0 <UART_SetConfig+0x2cc>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d828      	bhi.n	8004f2c <UART_SetConfig+0x128>
 8004eda:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <UART_SetConfig+0xdc>)
 8004edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee0:	08004f15 	.word	0x08004f15
 8004ee4:	08004f2d 	.word	0x08004f2d
 8004ee8:	08004f2d 	.word	0x08004f2d
 8004eec:	08004f2d 	.word	0x08004f2d
 8004ef0:	08004f21 	.word	0x08004f21
 8004ef4:	08004f2d 	.word	0x08004f2d
 8004ef8:	08004f2d 	.word	0x08004f2d
 8004efc:	08004f2d 	.word	0x08004f2d
 8004f00:	08004f1b 	.word	0x08004f1b
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f2d 	.word	0x08004f2d
 8004f10:	08004f27 	.word	0x08004f27
 8004f14:	2300      	movs	r3, #0
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e118      	b.n	800514c <UART_SetConfig+0x348>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	77fb      	strb	r3, [r7, #31]
 8004f1e:	e115      	b.n	800514c <UART_SetConfig+0x348>
 8004f20:	2304      	movs	r3, #4
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e112      	b.n	800514c <UART_SetConfig+0x348>
 8004f26:	2308      	movs	r3, #8
 8004f28:	77fb      	strb	r3, [r7, #31]
 8004f2a:	e10f      	b.n	800514c <UART_SetConfig+0x348>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e10c      	b.n	800514c <UART_SetConfig+0x348>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a68      	ldr	r2, [pc, #416]	; (80050d8 <UART_SetConfig+0x2d4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d120      	bne.n	8004f7e <UART_SetConfig+0x17a>
 8004f3c:	4b64      	ldr	r3, [pc, #400]	; (80050d0 <UART_SetConfig+0x2cc>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f46:	2b30      	cmp	r3, #48	; 0x30
 8004f48:	d013      	beq.n	8004f72 <UART_SetConfig+0x16e>
 8004f4a:	2b30      	cmp	r3, #48	; 0x30
 8004f4c:	d814      	bhi.n	8004f78 <UART_SetConfig+0x174>
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d009      	beq.n	8004f66 <UART_SetConfig+0x162>
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d810      	bhi.n	8004f78 <UART_SetConfig+0x174>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <UART_SetConfig+0x15c>
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d006      	beq.n	8004f6c <UART_SetConfig+0x168>
 8004f5e:	e00b      	b.n	8004f78 <UART_SetConfig+0x174>
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e0f2      	b.n	800514c <UART_SetConfig+0x348>
 8004f66:	2302      	movs	r3, #2
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e0ef      	b.n	800514c <UART_SetConfig+0x348>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e0ec      	b.n	800514c <UART_SetConfig+0x348>
 8004f72:	2308      	movs	r3, #8
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e0e9      	b.n	800514c <UART_SetConfig+0x348>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e0e6      	b.n	800514c <UART_SetConfig+0x348>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a56      	ldr	r2, [pc, #344]	; (80050dc <UART_SetConfig+0x2d8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d120      	bne.n	8004fca <UART_SetConfig+0x1c6>
 8004f88:	4b51      	ldr	r3, [pc, #324]	; (80050d0 <UART_SetConfig+0x2cc>)
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f92:	2bc0      	cmp	r3, #192	; 0xc0
 8004f94:	d013      	beq.n	8004fbe <UART_SetConfig+0x1ba>
 8004f96:	2bc0      	cmp	r3, #192	; 0xc0
 8004f98:	d814      	bhi.n	8004fc4 <UART_SetConfig+0x1c0>
 8004f9a:	2b80      	cmp	r3, #128	; 0x80
 8004f9c:	d009      	beq.n	8004fb2 <UART_SetConfig+0x1ae>
 8004f9e:	2b80      	cmp	r3, #128	; 0x80
 8004fa0:	d810      	bhi.n	8004fc4 <UART_SetConfig+0x1c0>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <UART_SetConfig+0x1a8>
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	d006      	beq.n	8004fb8 <UART_SetConfig+0x1b4>
 8004faa:	e00b      	b.n	8004fc4 <UART_SetConfig+0x1c0>
 8004fac:	2300      	movs	r3, #0
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e0cc      	b.n	800514c <UART_SetConfig+0x348>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e0c9      	b.n	800514c <UART_SetConfig+0x348>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e0c6      	b.n	800514c <UART_SetConfig+0x348>
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e0c3      	b.n	800514c <UART_SetConfig+0x348>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e0c0      	b.n	800514c <UART_SetConfig+0x348>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a44      	ldr	r2, [pc, #272]	; (80050e0 <UART_SetConfig+0x2dc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d125      	bne.n	8005020 <UART_SetConfig+0x21c>
 8004fd4:	4b3e      	ldr	r3, [pc, #248]	; (80050d0 <UART_SetConfig+0x2cc>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe2:	d017      	beq.n	8005014 <UART_SetConfig+0x210>
 8004fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe8:	d817      	bhi.n	800501a <UART_SetConfig+0x216>
 8004fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fee:	d00b      	beq.n	8005008 <UART_SetConfig+0x204>
 8004ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff4:	d811      	bhi.n	800501a <UART_SetConfig+0x216>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <UART_SetConfig+0x1fe>
 8004ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffe:	d006      	beq.n	800500e <UART_SetConfig+0x20a>
 8005000:	e00b      	b.n	800501a <UART_SetConfig+0x216>
 8005002:	2300      	movs	r3, #0
 8005004:	77fb      	strb	r3, [r7, #31]
 8005006:	e0a1      	b.n	800514c <UART_SetConfig+0x348>
 8005008:	2302      	movs	r3, #2
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e09e      	b.n	800514c <UART_SetConfig+0x348>
 800500e:	2304      	movs	r3, #4
 8005010:	77fb      	strb	r3, [r7, #31]
 8005012:	e09b      	b.n	800514c <UART_SetConfig+0x348>
 8005014:	2308      	movs	r3, #8
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e098      	b.n	800514c <UART_SetConfig+0x348>
 800501a:	2310      	movs	r3, #16
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e095      	b.n	800514c <UART_SetConfig+0x348>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2f      	ldr	r2, [pc, #188]	; (80050e4 <UART_SetConfig+0x2e0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d125      	bne.n	8005076 <UART_SetConfig+0x272>
 800502a:	4b29      	ldr	r3, [pc, #164]	; (80050d0 <UART_SetConfig+0x2cc>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005038:	d017      	beq.n	800506a <UART_SetConfig+0x266>
 800503a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800503e:	d817      	bhi.n	8005070 <UART_SetConfig+0x26c>
 8005040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005044:	d00b      	beq.n	800505e <UART_SetConfig+0x25a>
 8005046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504a:	d811      	bhi.n	8005070 <UART_SetConfig+0x26c>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <UART_SetConfig+0x254>
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005054:	d006      	beq.n	8005064 <UART_SetConfig+0x260>
 8005056:	e00b      	b.n	8005070 <UART_SetConfig+0x26c>
 8005058:	2301      	movs	r3, #1
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e076      	b.n	800514c <UART_SetConfig+0x348>
 800505e:	2302      	movs	r3, #2
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e073      	b.n	800514c <UART_SetConfig+0x348>
 8005064:	2304      	movs	r3, #4
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e070      	b.n	800514c <UART_SetConfig+0x348>
 800506a:	2308      	movs	r3, #8
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e06d      	b.n	800514c <UART_SetConfig+0x348>
 8005070:	2310      	movs	r3, #16
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e06a      	b.n	800514c <UART_SetConfig+0x348>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <UART_SetConfig+0x2e4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d138      	bne.n	80050f2 <UART_SetConfig+0x2ee>
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <UART_SetConfig+0x2cc>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800508a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800508e:	d017      	beq.n	80050c0 <UART_SetConfig+0x2bc>
 8005090:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005094:	d82a      	bhi.n	80050ec <UART_SetConfig+0x2e8>
 8005096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509a:	d00b      	beq.n	80050b4 <UART_SetConfig+0x2b0>
 800509c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a0:	d824      	bhi.n	80050ec <UART_SetConfig+0x2e8>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <UART_SetConfig+0x2aa>
 80050a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050aa:	d006      	beq.n	80050ba <UART_SetConfig+0x2b6>
 80050ac:	e01e      	b.n	80050ec <UART_SetConfig+0x2e8>
 80050ae:	2300      	movs	r3, #0
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e04b      	b.n	800514c <UART_SetConfig+0x348>
 80050b4:	2302      	movs	r3, #2
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e048      	b.n	800514c <UART_SetConfig+0x348>
 80050ba:	2304      	movs	r3, #4
 80050bc:	77fb      	strb	r3, [r7, #31]
 80050be:	e045      	b.n	800514c <UART_SetConfig+0x348>
 80050c0:	2308      	movs	r3, #8
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e042      	b.n	800514c <UART_SetConfig+0x348>
 80050c6:	bf00      	nop
 80050c8:	efff69f3 	.word	0xefff69f3
 80050cc:	40011000 	.word	0x40011000
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40004400 	.word	0x40004400
 80050d8:	40004800 	.word	0x40004800
 80050dc:	40004c00 	.word	0x40004c00
 80050e0:	40005000 	.word	0x40005000
 80050e4:	40011400 	.word	0x40011400
 80050e8:	40007800 	.word	0x40007800
 80050ec:	2310      	movs	r3, #16
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e02c      	b.n	800514c <UART_SetConfig+0x348>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a72      	ldr	r2, [pc, #456]	; (80052c0 <UART_SetConfig+0x4bc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d125      	bne.n	8005148 <UART_SetConfig+0x344>
 80050fc:	4b71      	ldr	r3, [pc, #452]	; (80052c4 <UART_SetConfig+0x4c0>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005106:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800510a:	d017      	beq.n	800513c <UART_SetConfig+0x338>
 800510c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005110:	d817      	bhi.n	8005142 <UART_SetConfig+0x33e>
 8005112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005116:	d00b      	beq.n	8005130 <UART_SetConfig+0x32c>
 8005118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511c:	d811      	bhi.n	8005142 <UART_SetConfig+0x33e>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <UART_SetConfig+0x326>
 8005122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005126:	d006      	beq.n	8005136 <UART_SetConfig+0x332>
 8005128:	e00b      	b.n	8005142 <UART_SetConfig+0x33e>
 800512a:	2300      	movs	r3, #0
 800512c:	77fb      	strb	r3, [r7, #31]
 800512e:	e00d      	b.n	800514c <UART_SetConfig+0x348>
 8005130:	2302      	movs	r3, #2
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e00a      	b.n	800514c <UART_SetConfig+0x348>
 8005136:	2304      	movs	r3, #4
 8005138:	77fb      	strb	r3, [r7, #31]
 800513a:	e007      	b.n	800514c <UART_SetConfig+0x348>
 800513c:	2308      	movs	r3, #8
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e004      	b.n	800514c <UART_SetConfig+0x348>
 8005142:	2310      	movs	r3, #16
 8005144:	77fb      	strb	r3, [r7, #31]
 8005146:	e001      	b.n	800514c <UART_SetConfig+0x348>
 8005148:	2310      	movs	r3, #16
 800514a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005154:	d15c      	bne.n	8005210 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8005156:	7ffb      	ldrb	r3, [r7, #31]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d828      	bhi.n	80051ae <UART_SetConfig+0x3aa>
 800515c:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <UART_SetConfig+0x360>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	08005189 	.word	0x08005189
 8005168:	08005191 	.word	0x08005191
 800516c:	08005199 	.word	0x08005199
 8005170:	080051af 	.word	0x080051af
 8005174:	0800519f 	.word	0x0800519f
 8005178:	080051af 	.word	0x080051af
 800517c:	080051af 	.word	0x080051af
 8005180:	080051af 	.word	0x080051af
 8005184:	080051a7 	.word	0x080051a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005188:	f7fe fb14 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 800518c:	61b8      	str	r0, [r7, #24]
        break;
 800518e:	e013      	b.n	80051b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005190:	f7fe fb24 	bl	80037dc <HAL_RCC_GetPCLK2Freq>
 8005194:	61b8      	str	r0, [r7, #24]
        break;
 8005196:	e00f      	b.n	80051b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005198:	4b4b      	ldr	r3, [pc, #300]	; (80052c8 <UART_SetConfig+0x4c4>)
 800519a:	61bb      	str	r3, [r7, #24]
        break;
 800519c:	e00c      	b.n	80051b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519e:	f7fe f9f7 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 80051a2:	61b8      	str	r0, [r7, #24]
        break;
 80051a4:	e008      	b.n	80051b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051aa:	61bb      	str	r3, [r7, #24]
        break;
 80051ac:	e004      	b.n	80051b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	77bb      	strb	r3, [r7, #30]
        break;
 80051b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d074      	beq.n	80052a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	005a      	lsls	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	441a      	add	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b0f      	cmp	r3, #15
 80051da:	d916      	bls.n	800520a <UART_SetConfig+0x406>
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e2:	d212      	bcs.n	800520a <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f023 030f 	bic.w	r3, r3, #15
 80051ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	89fb      	ldrh	r3, [r7, #14]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	89fa      	ldrh	r2, [r7, #14]
 8005206:	60da      	str	r2, [r3, #12]
 8005208:	e04e      	b.n	80052a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	77bb      	strb	r3, [r7, #30]
 800520e:	e04b      	b.n	80052a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005210:	7ffb      	ldrb	r3, [r7, #31]
 8005212:	2b08      	cmp	r3, #8
 8005214:	d827      	bhi.n	8005266 <UART_SetConfig+0x462>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <UART_SetConfig+0x418>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005241 	.word	0x08005241
 8005220:	08005249 	.word	0x08005249
 8005224:	08005251 	.word	0x08005251
 8005228:	08005267 	.word	0x08005267
 800522c:	08005257 	.word	0x08005257
 8005230:	08005267 	.word	0x08005267
 8005234:	08005267 	.word	0x08005267
 8005238:	08005267 	.word	0x08005267
 800523c:	0800525f 	.word	0x0800525f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005240:	f7fe fab8 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8005244:	61b8      	str	r0, [r7, #24]
        break;
 8005246:	e013      	b.n	8005270 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005248:	f7fe fac8 	bl	80037dc <HAL_RCC_GetPCLK2Freq>
 800524c:	61b8      	str	r0, [r7, #24]
        break;
 800524e:	e00f      	b.n	8005270 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005250:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <UART_SetConfig+0x4c4>)
 8005252:	61bb      	str	r3, [r7, #24]
        break;
 8005254:	e00c      	b.n	8005270 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005256:	f7fe f99b 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 800525a:	61b8      	str	r0, [r7, #24]
        break;
 800525c:	e008      	b.n	8005270 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005262:	61bb      	str	r3, [r7, #24]
        break;
 8005264:	e004      	b.n	8005270 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	77bb      	strb	r3, [r7, #30]
        break;
 800526e:	bf00      	nop
    }

    if (pclk != 0U)
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d018      	beq.n	80052a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	085a      	lsrs	r2, r3, #1
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	441a      	add	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	b29b      	uxth	r3, r3
 800528a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b0f      	cmp	r3, #15
 8005290:	d908      	bls.n	80052a4 <UART_SetConfig+0x4a0>
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005298:	d204      	bcs.n	80052a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	e001      	b.n	80052a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40007c00 	.word	0x40007c00
 80052c4:	40023800 	.word	0x40023800
 80052c8:	00f42400 	.word	0x00f42400

080052cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01a      	beq.n	80053e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ca:	d10a      	bne.n	80053e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af02      	add	r7, sp, #8
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005420:	f7fd f9c8 	bl	80027b4 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b08      	cmp	r3, #8
 8005432:	d10e      	bne.n	8005452 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f82d 	bl	80054a2 <UART_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e023      	b.n	800549a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b04      	cmp	r3, #4
 800545e:	d10e      	bne.n	800547e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f817 	bl	80054a2 <UART_WaitOnFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e00d      	b.n	800549a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	4613      	mov	r3, r2
 80054b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b2:	e05e      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d05a      	beq.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054bc:	f7fd f97a 	bl	80027b4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d302      	bcc.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d11b      	bne.n	800550a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0201 	bic.w	r2, r2, #1
 80054f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e043      	b.n	8005592 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02c      	beq.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005526:	d124      	bne.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005530:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005540:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0201 	bic.w	r2, r2, #1
 8005550:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e00f      	b.n	8005592 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4013      	ands	r3, r2
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	429a      	cmp	r2, r3
 8005580:	bf0c      	ite	eq
 8005582:	2301      	moveq	r3, #1
 8005584:	2300      	movne	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	429a      	cmp	r2, r3
 800558e:	d091      	beq.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <__cvt>:
 800559a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800559c:	ed2d 8b02 	vpush	{d8}
 80055a0:	eeb0 8b40 	vmov.f64	d8, d0
 80055a4:	b085      	sub	sp, #20
 80055a6:	4617      	mov	r7, r2
 80055a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80055aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80055ac:	ee18 2a90 	vmov	r2, s17
 80055b0:	f025 0520 	bic.w	r5, r5, #32
 80055b4:	2a00      	cmp	r2, #0
 80055b6:	bfb6      	itet	lt
 80055b8:	222d      	movlt	r2, #45	; 0x2d
 80055ba:	2200      	movge	r2, #0
 80055bc:	eeb1 8b40 	vneglt.f64	d8, d0
 80055c0:	2d46      	cmp	r5, #70	; 0x46
 80055c2:	460c      	mov	r4, r1
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	d004      	beq.n	80055d2 <__cvt+0x38>
 80055c8:	2d45      	cmp	r5, #69	; 0x45
 80055ca:	d100      	bne.n	80055ce <__cvt+0x34>
 80055cc:	3401      	adds	r4, #1
 80055ce:	2102      	movs	r1, #2
 80055d0:	e000      	b.n	80055d4 <__cvt+0x3a>
 80055d2:	2103      	movs	r1, #3
 80055d4:	ab03      	add	r3, sp, #12
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	ab02      	add	r3, sp, #8
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	4622      	mov	r2, r4
 80055de:	4633      	mov	r3, r6
 80055e0:	eeb0 0b48 	vmov.f64	d0, d8
 80055e4:	f000 fe60 	bl	80062a8 <_dtoa_r>
 80055e8:	2d47      	cmp	r5, #71	; 0x47
 80055ea:	d101      	bne.n	80055f0 <__cvt+0x56>
 80055ec:	07fb      	lsls	r3, r7, #31
 80055ee:	d51a      	bpl.n	8005626 <__cvt+0x8c>
 80055f0:	2d46      	cmp	r5, #70	; 0x46
 80055f2:	eb00 0204 	add.w	r2, r0, r4
 80055f6:	d10c      	bne.n	8005612 <__cvt+0x78>
 80055f8:	7803      	ldrb	r3, [r0, #0]
 80055fa:	2b30      	cmp	r3, #48	; 0x30
 80055fc:	d107      	bne.n	800560e <__cvt+0x74>
 80055fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005606:	bf1c      	itt	ne
 8005608:	f1c4 0401 	rsbne	r4, r4, #1
 800560c:	6034      	strne	r4, [r6, #0]
 800560e:	6833      	ldr	r3, [r6, #0]
 8005610:	441a      	add	r2, r3
 8005612:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561a:	bf08      	it	eq
 800561c:	9203      	streq	r2, [sp, #12]
 800561e:	2130      	movs	r1, #48	; 0x30
 8005620:	9b03      	ldr	r3, [sp, #12]
 8005622:	4293      	cmp	r3, r2
 8005624:	d307      	bcc.n	8005636 <__cvt+0x9c>
 8005626:	9b03      	ldr	r3, [sp, #12]
 8005628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800562a:	1a1b      	subs	r3, r3, r0
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	b005      	add	sp, #20
 8005630:	ecbd 8b02 	vpop	{d8}
 8005634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005636:	1c5c      	adds	r4, r3, #1
 8005638:	9403      	str	r4, [sp, #12]
 800563a:	7019      	strb	r1, [r3, #0]
 800563c:	e7f0      	b.n	8005620 <__cvt+0x86>

0800563e <__exponent>:
 800563e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005640:	4603      	mov	r3, r0
 8005642:	2900      	cmp	r1, #0
 8005644:	bfb8      	it	lt
 8005646:	4249      	neglt	r1, r1
 8005648:	f803 2b02 	strb.w	r2, [r3], #2
 800564c:	bfb4      	ite	lt
 800564e:	222d      	movlt	r2, #45	; 0x2d
 8005650:	222b      	movge	r2, #43	; 0x2b
 8005652:	2909      	cmp	r1, #9
 8005654:	7042      	strb	r2, [r0, #1]
 8005656:	dd2a      	ble.n	80056ae <__exponent+0x70>
 8005658:	f10d 0207 	add.w	r2, sp, #7
 800565c:	4617      	mov	r7, r2
 800565e:	260a      	movs	r6, #10
 8005660:	4694      	mov	ip, r2
 8005662:	fb91 f5f6 	sdiv	r5, r1, r6
 8005666:	fb06 1415 	mls	r4, r6, r5, r1
 800566a:	3430      	adds	r4, #48	; 0x30
 800566c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005670:	460c      	mov	r4, r1
 8005672:	2c63      	cmp	r4, #99	; 0x63
 8005674:	f102 32ff 	add.w	r2, r2, #4294967295
 8005678:	4629      	mov	r1, r5
 800567a:	dcf1      	bgt.n	8005660 <__exponent+0x22>
 800567c:	3130      	adds	r1, #48	; 0x30
 800567e:	f1ac 0402 	sub.w	r4, ip, #2
 8005682:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005686:	1c41      	adds	r1, r0, #1
 8005688:	4622      	mov	r2, r4
 800568a:	42ba      	cmp	r2, r7
 800568c:	d30a      	bcc.n	80056a4 <__exponent+0x66>
 800568e:	f10d 0209 	add.w	r2, sp, #9
 8005692:	eba2 020c 	sub.w	r2, r2, ip
 8005696:	42bc      	cmp	r4, r7
 8005698:	bf88      	it	hi
 800569a:	2200      	movhi	r2, #0
 800569c:	4413      	add	r3, r2
 800569e:	1a18      	subs	r0, r3, r0
 80056a0:	b003      	add	sp, #12
 80056a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056a8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056ac:	e7ed      	b.n	800568a <__exponent+0x4c>
 80056ae:	2330      	movs	r3, #48	; 0x30
 80056b0:	3130      	adds	r1, #48	; 0x30
 80056b2:	7083      	strb	r3, [r0, #2]
 80056b4:	70c1      	strb	r1, [r0, #3]
 80056b6:	1d03      	adds	r3, r0, #4
 80056b8:	e7f1      	b.n	800569e <__exponent+0x60>
 80056ba:	0000      	movs	r0, r0
 80056bc:	0000      	movs	r0, r0
	...

080056c0 <_printf_float>:
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	b08b      	sub	sp, #44	; 0x2c
 80056c6:	460c      	mov	r4, r1
 80056c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80056cc:	4616      	mov	r6, r2
 80056ce:	461f      	mov	r7, r3
 80056d0:	4605      	mov	r5, r0
 80056d2:	f000 fce9 	bl	80060a8 <_localeconv_r>
 80056d6:	f8d0 b000 	ldr.w	fp, [r0]
 80056da:	4658      	mov	r0, fp
 80056dc:	f7fa fe00 	bl	80002e0 <strlen>
 80056e0:	2300      	movs	r3, #0
 80056e2:	9308      	str	r3, [sp, #32]
 80056e4:	f8d8 3000 	ldr.w	r3, [r8]
 80056e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80056ec:	6822      	ldr	r2, [r4, #0]
 80056ee:	3307      	adds	r3, #7
 80056f0:	f023 0307 	bic.w	r3, r3, #7
 80056f4:	f103 0108 	add.w	r1, r3, #8
 80056f8:	f8c8 1000 	str.w	r1, [r8]
 80056fc:	ed93 0b00 	vldr	d0, [r3]
 8005700:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8005960 <_printf_float+0x2a0>
 8005704:	eeb0 7bc0 	vabs.f64	d7, d0
 8005708:	eeb4 7b46 	vcmp.f64	d7, d6
 800570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005710:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8005714:	4682      	mov	sl, r0
 8005716:	dd24      	ble.n	8005762 <_printf_float+0xa2>
 8005718:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800571c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005720:	d502      	bpl.n	8005728 <_printf_float+0x68>
 8005722:	232d      	movs	r3, #45	; 0x2d
 8005724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005728:	498f      	ldr	r1, [pc, #572]	; (8005968 <_printf_float+0x2a8>)
 800572a:	4b90      	ldr	r3, [pc, #576]	; (800596c <_printf_float+0x2ac>)
 800572c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005730:	bf94      	ite	ls
 8005732:	4688      	movls	r8, r1
 8005734:	4698      	movhi	r8, r3
 8005736:	2303      	movs	r3, #3
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	f022 0204 	bic.w	r2, r2, #4
 800573e:	2300      	movs	r3, #0
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	9304      	str	r3, [sp, #16]
 8005744:	9700      	str	r7, [sp, #0]
 8005746:	4633      	mov	r3, r6
 8005748:	aa09      	add	r2, sp, #36	; 0x24
 800574a:	4621      	mov	r1, r4
 800574c:	4628      	mov	r0, r5
 800574e:	f000 f9d1 	bl	8005af4 <_printf_common>
 8005752:	3001      	adds	r0, #1
 8005754:	f040 808a 	bne.w	800586c <_printf_float+0x1ac>
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	b00b      	add	sp, #44	; 0x2c
 800575e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005762:	eeb4 0b40 	vcmp.f64	d0, d0
 8005766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800576a:	d709      	bvc.n	8005780 <_printf_float+0xc0>
 800576c:	ee10 3a90 	vmov	r3, s1
 8005770:	2b00      	cmp	r3, #0
 8005772:	bfbc      	itt	lt
 8005774:	232d      	movlt	r3, #45	; 0x2d
 8005776:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800577a:	497d      	ldr	r1, [pc, #500]	; (8005970 <_printf_float+0x2b0>)
 800577c:	4b7d      	ldr	r3, [pc, #500]	; (8005974 <_printf_float+0x2b4>)
 800577e:	e7d5      	b.n	800572c <_printf_float+0x6c>
 8005780:	6863      	ldr	r3, [r4, #4]
 8005782:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005786:	9104      	str	r1, [sp, #16]
 8005788:	1c59      	adds	r1, r3, #1
 800578a:	d13c      	bne.n	8005806 <_printf_float+0x146>
 800578c:	2306      	movs	r3, #6
 800578e:	6063      	str	r3, [r4, #4]
 8005790:	2300      	movs	r3, #0
 8005792:	9303      	str	r3, [sp, #12]
 8005794:	ab08      	add	r3, sp, #32
 8005796:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800579a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800579e:	ab07      	add	r3, sp, #28
 80057a0:	6861      	ldr	r1, [r4, #4]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	6022      	str	r2, [r4, #0]
 80057a6:	f10d 031b 	add.w	r3, sp, #27
 80057aa:	4628      	mov	r0, r5
 80057ac:	f7ff fef5 	bl	800559a <__cvt>
 80057b0:	9b04      	ldr	r3, [sp, #16]
 80057b2:	9907      	ldr	r1, [sp, #28]
 80057b4:	2b47      	cmp	r3, #71	; 0x47
 80057b6:	4680      	mov	r8, r0
 80057b8:	d108      	bne.n	80057cc <_printf_float+0x10c>
 80057ba:	1cc8      	adds	r0, r1, #3
 80057bc:	db02      	blt.n	80057c4 <_printf_float+0x104>
 80057be:	6863      	ldr	r3, [r4, #4]
 80057c0:	4299      	cmp	r1, r3
 80057c2:	dd41      	ble.n	8005848 <_printf_float+0x188>
 80057c4:	f1a9 0902 	sub.w	r9, r9, #2
 80057c8:	fa5f f989 	uxtb.w	r9, r9
 80057cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057d0:	d820      	bhi.n	8005814 <_printf_float+0x154>
 80057d2:	3901      	subs	r1, #1
 80057d4:	464a      	mov	r2, r9
 80057d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057da:	9107      	str	r1, [sp, #28]
 80057dc:	f7ff ff2f 	bl	800563e <__exponent>
 80057e0:	9a08      	ldr	r2, [sp, #32]
 80057e2:	9004      	str	r0, [sp, #16]
 80057e4:	1813      	adds	r3, r2, r0
 80057e6:	2a01      	cmp	r2, #1
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	dc02      	bgt.n	80057f2 <_printf_float+0x132>
 80057ec:	6822      	ldr	r2, [r4, #0]
 80057ee:	07d2      	lsls	r2, r2, #31
 80057f0:	d501      	bpl.n	80057f6 <_printf_float+0x136>
 80057f2:	3301      	adds	r3, #1
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0a2      	beq.n	8005744 <_printf_float+0x84>
 80057fe:	232d      	movs	r3, #45	; 0x2d
 8005800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005804:	e79e      	b.n	8005744 <_printf_float+0x84>
 8005806:	9904      	ldr	r1, [sp, #16]
 8005808:	2947      	cmp	r1, #71	; 0x47
 800580a:	d1c1      	bne.n	8005790 <_printf_float+0xd0>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1bf      	bne.n	8005790 <_printf_float+0xd0>
 8005810:	2301      	movs	r3, #1
 8005812:	e7bc      	b.n	800578e <_printf_float+0xce>
 8005814:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005818:	d118      	bne.n	800584c <_printf_float+0x18c>
 800581a:	2900      	cmp	r1, #0
 800581c:	6863      	ldr	r3, [r4, #4]
 800581e:	dd0b      	ble.n	8005838 <_printf_float+0x178>
 8005820:	6121      	str	r1, [r4, #16]
 8005822:	b913      	cbnz	r3, 800582a <_printf_float+0x16a>
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	07d0      	lsls	r0, r2, #31
 8005828:	d502      	bpl.n	8005830 <_printf_float+0x170>
 800582a:	3301      	adds	r3, #1
 800582c:	440b      	add	r3, r1
 800582e:	6123      	str	r3, [r4, #16]
 8005830:	2300      	movs	r3, #0
 8005832:	65a1      	str	r1, [r4, #88]	; 0x58
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	e7de      	b.n	80057f6 <_printf_float+0x136>
 8005838:	b913      	cbnz	r3, 8005840 <_printf_float+0x180>
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	07d2      	lsls	r2, r2, #31
 800583e:	d501      	bpl.n	8005844 <_printf_float+0x184>
 8005840:	3302      	adds	r3, #2
 8005842:	e7f4      	b.n	800582e <_printf_float+0x16e>
 8005844:	2301      	movs	r3, #1
 8005846:	e7f2      	b.n	800582e <_printf_float+0x16e>
 8005848:	f04f 0967 	mov.w	r9, #103	; 0x67
 800584c:	9b08      	ldr	r3, [sp, #32]
 800584e:	4299      	cmp	r1, r3
 8005850:	db05      	blt.n	800585e <_printf_float+0x19e>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	6121      	str	r1, [r4, #16]
 8005856:	07d8      	lsls	r0, r3, #31
 8005858:	d5ea      	bpl.n	8005830 <_printf_float+0x170>
 800585a:	1c4b      	adds	r3, r1, #1
 800585c:	e7e7      	b.n	800582e <_printf_float+0x16e>
 800585e:	2900      	cmp	r1, #0
 8005860:	bfd4      	ite	le
 8005862:	f1c1 0202 	rsble	r2, r1, #2
 8005866:	2201      	movgt	r2, #1
 8005868:	4413      	add	r3, r2
 800586a:	e7e0      	b.n	800582e <_printf_float+0x16e>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	055a      	lsls	r2, r3, #21
 8005870:	d407      	bmi.n	8005882 <_printf_float+0x1c2>
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	4642      	mov	r2, r8
 8005876:	4631      	mov	r1, r6
 8005878:	4628      	mov	r0, r5
 800587a:	47b8      	blx	r7
 800587c:	3001      	adds	r0, #1
 800587e:	d12a      	bne.n	80058d6 <_printf_float+0x216>
 8005880:	e76a      	b.n	8005758 <_printf_float+0x98>
 8005882:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005886:	f240 80e0 	bls.w	8005a4a <_printf_float+0x38a>
 800588a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800588e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005896:	d133      	bne.n	8005900 <_printf_float+0x240>
 8005898:	4a37      	ldr	r2, [pc, #220]	; (8005978 <_printf_float+0x2b8>)
 800589a:	2301      	movs	r3, #1
 800589c:	4631      	mov	r1, r6
 800589e:	4628      	mov	r0, r5
 80058a0:	47b8      	blx	r7
 80058a2:	3001      	adds	r0, #1
 80058a4:	f43f af58 	beq.w	8005758 <_printf_float+0x98>
 80058a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	db02      	blt.n	80058b6 <_printf_float+0x1f6>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	07d8      	lsls	r0, r3, #31
 80058b4:	d50f      	bpl.n	80058d6 <_printf_float+0x216>
 80058b6:	4653      	mov	r3, sl
 80058b8:	465a      	mov	r2, fp
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	f43f af49 	beq.w	8005758 <_printf_float+0x98>
 80058c6:	f04f 0800 	mov.w	r8, #0
 80058ca:	f104 091a 	add.w	r9, r4, #26
 80058ce:	9b08      	ldr	r3, [sp, #32]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	4543      	cmp	r3, r8
 80058d4:	dc09      	bgt.n	80058ea <_printf_float+0x22a>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	079b      	lsls	r3, r3, #30
 80058da:	f100 8106 	bmi.w	8005aea <_printf_float+0x42a>
 80058de:	68e0      	ldr	r0, [r4, #12]
 80058e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e2:	4298      	cmp	r0, r3
 80058e4:	bfb8      	it	lt
 80058e6:	4618      	movlt	r0, r3
 80058e8:	e738      	b.n	800575c <_printf_float+0x9c>
 80058ea:	2301      	movs	r3, #1
 80058ec:	464a      	mov	r2, r9
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b8      	blx	r7
 80058f4:	3001      	adds	r0, #1
 80058f6:	f43f af2f 	beq.w	8005758 <_printf_float+0x98>
 80058fa:	f108 0801 	add.w	r8, r8, #1
 80058fe:	e7e6      	b.n	80058ce <_printf_float+0x20e>
 8005900:	9b07      	ldr	r3, [sp, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	dc3a      	bgt.n	800597c <_printf_float+0x2bc>
 8005906:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <_printf_float+0x2b8>)
 8005908:	2301      	movs	r3, #1
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	f43f af21 	beq.w	8005758 <_printf_float+0x98>
 8005916:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800591a:	4313      	orrs	r3, r2
 800591c:	d102      	bne.n	8005924 <_printf_float+0x264>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	07d9      	lsls	r1, r3, #31
 8005922:	d5d8      	bpl.n	80058d6 <_printf_float+0x216>
 8005924:	4653      	mov	r3, sl
 8005926:	465a      	mov	r2, fp
 8005928:	4631      	mov	r1, r6
 800592a:	4628      	mov	r0, r5
 800592c:	47b8      	blx	r7
 800592e:	3001      	adds	r0, #1
 8005930:	f43f af12 	beq.w	8005758 <_printf_float+0x98>
 8005934:	f04f 0900 	mov.w	r9, #0
 8005938:	f104 0a1a 	add.w	sl, r4, #26
 800593c:	9b07      	ldr	r3, [sp, #28]
 800593e:	425b      	negs	r3, r3
 8005940:	454b      	cmp	r3, r9
 8005942:	dc01      	bgt.n	8005948 <_printf_float+0x288>
 8005944:	9b08      	ldr	r3, [sp, #32]
 8005946:	e795      	b.n	8005874 <_printf_float+0x1b4>
 8005948:	2301      	movs	r3, #1
 800594a:	4652      	mov	r2, sl
 800594c:	4631      	mov	r1, r6
 800594e:	4628      	mov	r0, r5
 8005950:	47b8      	blx	r7
 8005952:	3001      	adds	r0, #1
 8005954:	f43f af00 	beq.w	8005758 <_printf_float+0x98>
 8005958:	f109 0901 	add.w	r9, r9, #1
 800595c:	e7ee      	b.n	800593c <_printf_float+0x27c>
 800595e:	bf00      	nop
 8005960:	ffffffff 	.word	0xffffffff
 8005964:	7fefffff 	.word	0x7fefffff
 8005968:	0802e574 	.word	0x0802e574
 800596c:	0802e578 	.word	0x0802e578
 8005970:	0802e57c 	.word	0x0802e57c
 8005974:	0802e580 	.word	0x0802e580
 8005978:	0802e7b3 	.word	0x0802e7b3
 800597c:	9a08      	ldr	r2, [sp, #32]
 800597e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005980:	429a      	cmp	r2, r3
 8005982:	bfa8      	it	ge
 8005984:	461a      	movge	r2, r3
 8005986:	2a00      	cmp	r2, #0
 8005988:	4691      	mov	r9, r2
 800598a:	dc38      	bgt.n	80059fe <_printf_float+0x33e>
 800598c:	2300      	movs	r3, #0
 800598e:	9305      	str	r3, [sp, #20]
 8005990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005994:	f104 021a 	add.w	r2, r4, #26
 8005998:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800599a:	9905      	ldr	r1, [sp, #20]
 800599c:	9304      	str	r3, [sp, #16]
 800599e:	eba3 0309 	sub.w	r3, r3, r9
 80059a2:	428b      	cmp	r3, r1
 80059a4:	dc33      	bgt.n	8005a0e <_printf_float+0x34e>
 80059a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	db3c      	blt.n	8005a28 <_printf_float+0x368>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	07da      	lsls	r2, r3, #31
 80059b2:	d439      	bmi.n	8005a28 <_printf_float+0x368>
 80059b4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80059b8:	eba2 0903 	sub.w	r9, r2, r3
 80059bc:	9b04      	ldr	r3, [sp, #16]
 80059be:	1ad2      	subs	r2, r2, r3
 80059c0:	4591      	cmp	r9, r2
 80059c2:	bfa8      	it	ge
 80059c4:	4691      	movge	r9, r2
 80059c6:	f1b9 0f00 	cmp.w	r9, #0
 80059ca:	dc35      	bgt.n	8005a38 <_printf_float+0x378>
 80059cc:	f04f 0800 	mov.w	r8, #0
 80059d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059d4:	f104 0a1a 	add.w	sl, r4, #26
 80059d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80059dc:	1a9b      	subs	r3, r3, r2
 80059de:	eba3 0309 	sub.w	r3, r3, r9
 80059e2:	4543      	cmp	r3, r8
 80059e4:	f77f af77 	ble.w	80058d6 <_printf_float+0x216>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4652      	mov	r2, sl
 80059ec:	4631      	mov	r1, r6
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	f43f aeb0 	beq.w	8005758 <_printf_float+0x98>
 80059f8:	f108 0801 	add.w	r8, r8, #1
 80059fc:	e7ec      	b.n	80059d8 <_printf_float+0x318>
 80059fe:	4613      	mov	r3, r2
 8005a00:	4631      	mov	r1, r6
 8005a02:	4642      	mov	r2, r8
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b8      	blx	r7
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d1bf      	bne.n	800598c <_printf_float+0x2cc>
 8005a0c:	e6a4      	b.n	8005758 <_printf_float+0x98>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	9204      	str	r2, [sp, #16]
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f43f ae9d 	beq.w	8005758 <_printf_float+0x98>
 8005a1e:	9b05      	ldr	r3, [sp, #20]
 8005a20:	9a04      	ldr	r2, [sp, #16]
 8005a22:	3301      	adds	r3, #1
 8005a24:	9305      	str	r3, [sp, #20]
 8005a26:	e7b7      	b.n	8005998 <_printf_float+0x2d8>
 8005a28:	4653      	mov	r3, sl
 8005a2a:	465a      	mov	r2, fp
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4628      	mov	r0, r5
 8005a30:	47b8      	blx	r7
 8005a32:	3001      	adds	r0, #1
 8005a34:	d1be      	bne.n	80059b4 <_printf_float+0x2f4>
 8005a36:	e68f      	b.n	8005758 <_printf_float+0x98>
 8005a38:	9a04      	ldr	r2, [sp, #16]
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	4442      	add	r2, r8
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b8      	blx	r7
 8005a44:	3001      	adds	r0, #1
 8005a46:	d1c1      	bne.n	80059cc <_printf_float+0x30c>
 8005a48:	e686      	b.n	8005758 <_printf_float+0x98>
 8005a4a:	9a08      	ldr	r2, [sp, #32]
 8005a4c:	2a01      	cmp	r2, #1
 8005a4e:	dc01      	bgt.n	8005a54 <_printf_float+0x394>
 8005a50:	07db      	lsls	r3, r3, #31
 8005a52:	d537      	bpl.n	8005ac4 <_printf_float+0x404>
 8005a54:	2301      	movs	r3, #1
 8005a56:	4642      	mov	r2, r8
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f43f ae7a 	beq.w	8005758 <_printf_float+0x98>
 8005a64:	4653      	mov	r3, sl
 8005a66:	465a      	mov	r2, fp
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b8      	blx	r7
 8005a6e:	3001      	adds	r0, #1
 8005a70:	f43f ae72 	beq.w	8005758 <_printf_float+0x98>
 8005a74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005a78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a80:	9b08      	ldr	r3, [sp, #32]
 8005a82:	d01a      	beq.n	8005aba <_printf_float+0x3fa>
 8005a84:	3b01      	subs	r3, #1
 8005a86:	f108 0201 	add.w	r2, r8, #1
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	d10e      	bne.n	8005ab2 <_printf_float+0x3f2>
 8005a94:	e660      	b.n	8005758 <_printf_float+0x98>
 8005a96:	2301      	movs	r3, #1
 8005a98:	464a      	mov	r2, r9
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f43f ae59 	beq.w	8005758 <_printf_float+0x98>
 8005aa6:	f108 0801 	add.w	r8, r8, #1
 8005aaa:	9b08      	ldr	r3, [sp, #32]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4543      	cmp	r3, r8
 8005ab0:	dcf1      	bgt.n	8005a96 <_printf_float+0x3d6>
 8005ab2:	9b04      	ldr	r3, [sp, #16]
 8005ab4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ab8:	e6dd      	b.n	8005876 <_printf_float+0x1b6>
 8005aba:	f04f 0800 	mov.w	r8, #0
 8005abe:	f104 091a 	add.w	r9, r4, #26
 8005ac2:	e7f2      	b.n	8005aaa <_printf_float+0x3ea>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	e7df      	b.n	8005a8a <_printf_float+0x3ca>
 8005aca:	2301      	movs	r3, #1
 8005acc:	464a      	mov	r2, r9
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b8      	blx	r7
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f43f ae3f 	beq.w	8005758 <_printf_float+0x98>
 8005ada:	f108 0801 	add.w	r8, r8, #1
 8005ade:	68e3      	ldr	r3, [r4, #12]
 8005ae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ae2:	1a5b      	subs	r3, r3, r1
 8005ae4:	4543      	cmp	r3, r8
 8005ae6:	dcf0      	bgt.n	8005aca <_printf_float+0x40a>
 8005ae8:	e6f9      	b.n	80058de <_printf_float+0x21e>
 8005aea:	f04f 0800 	mov.w	r8, #0
 8005aee:	f104 0919 	add.w	r9, r4, #25
 8005af2:	e7f4      	b.n	8005ade <_printf_float+0x41e>

08005af4 <_printf_common>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	4616      	mov	r6, r2
 8005afa:	4699      	mov	r9, r3
 8005afc:	688a      	ldr	r2, [r1, #8]
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	bfb8      	it	lt
 8005b08:	4613      	movlt	r3, r2
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b10:	4607      	mov	r7, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	b10a      	cbz	r2, 8005b1a <_printf_common+0x26>
 8005b16:	3301      	adds	r3, #1
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	0699      	lsls	r1, r3, #26
 8005b1e:	bf42      	ittt	mi
 8005b20:	6833      	ldrmi	r3, [r6, #0]
 8005b22:	3302      	addmi	r3, #2
 8005b24:	6033      	strmi	r3, [r6, #0]
 8005b26:	6825      	ldr	r5, [r4, #0]
 8005b28:	f015 0506 	ands.w	r5, r5, #6
 8005b2c:	d106      	bne.n	8005b3c <_printf_common+0x48>
 8005b2e:	f104 0a19 	add.w	sl, r4, #25
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	6832      	ldr	r2, [r6, #0]
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	dc26      	bgt.n	8005b8a <_printf_common+0x96>
 8005b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b40:	1e13      	subs	r3, r2, #0
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	bf18      	it	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	0692      	lsls	r2, r2, #26
 8005b4a:	d42b      	bmi.n	8005ba4 <_printf_common+0xb0>
 8005b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b50:	4649      	mov	r1, r9
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c0      	blx	r8
 8005b56:	3001      	adds	r0, #1
 8005b58:	d01e      	beq.n	8005b98 <_printf_common+0xa4>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	6922      	ldr	r2, [r4, #16]
 8005b5e:	f003 0306 	and.w	r3, r3, #6
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	bf02      	ittt	eq
 8005b66:	68e5      	ldreq	r5, [r4, #12]
 8005b68:	6833      	ldreq	r3, [r6, #0]
 8005b6a:	1aed      	subeq	r5, r5, r3
 8005b6c:	68a3      	ldr	r3, [r4, #8]
 8005b6e:	bf0c      	ite	eq
 8005b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b74:	2500      	movne	r5, #0
 8005b76:	4293      	cmp	r3, r2
 8005b78:	bfc4      	itt	gt
 8005b7a:	1a9b      	subgt	r3, r3, r2
 8005b7c:	18ed      	addgt	r5, r5, r3
 8005b7e:	2600      	movs	r6, #0
 8005b80:	341a      	adds	r4, #26
 8005b82:	42b5      	cmp	r5, r6
 8005b84:	d11a      	bne.n	8005bbc <_printf_common+0xc8>
 8005b86:	2000      	movs	r0, #0
 8005b88:	e008      	b.n	8005b9c <_printf_common+0xa8>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4652      	mov	r2, sl
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4638      	mov	r0, r7
 8005b92:	47c0      	blx	r8
 8005b94:	3001      	adds	r0, #1
 8005b96:	d103      	bne.n	8005ba0 <_printf_common+0xac>
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	e7c6      	b.n	8005b32 <_printf_common+0x3e>
 8005ba4:	18e1      	adds	r1, r4, r3
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	2030      	movs	r0, #48	; 0x30
 8005baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bae:	4422      	add	r2, r4
 8005bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bb8:	3302      	adds	r3, #2
 8005bba:	e7c7      	b.n	8005b4c <_printf_common+0x58>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	47c0      	blx	r8
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d0e6      	beq.n	8005b98 <_printf_common+0xa4>
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7d9      	b.n	8005b82 <_printf_common+0x8e>
	...

08005bd0 <_printf_i>:
 8005bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	7e0f      	ldrb	r7, [r1, #24]
 8005bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bd8:	2f78      	cmp	r7, #120	; 0x78
 8005bda:	4691      	mov	r9, r2
 8005bdc:	4680      	mov	r8, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	469a      	mov	sl, r3
 8005be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005be6:	d807      	bhi.n	8005bf8 <_printf_i+0x28>
 8005be8:	2f62      	cmp	r7, #98	; 0x62
 8005bea:	d80a      	bhi.n	8005c02 <_printf_i+0x32>
 8005bec:	2f00      	cmp	r7, #0
 8005bee:	f000 80d4 	beq.w	8005d9a <_printf_i+0x1ca>
 8005bf2:	2f58      	cmp	r7, #88	; 0x58
 8005bf4:	f000 80c0 	beq.w	8005d78 <_printf_i+0x1a8>
 8005bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c00:	e03a      	b.n	8005c78 <_printf_i+0xa8>
 8005c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c06:	2b15      	cmp	r3, #21
 8005c08:	d8f6      	bhi.n	8005bf8 <_printf_i+0x28>
 8005c0a:	a101      	add	r1, pc, #4	; (adr r1, 8005c10 <_printf_i+0x40>)
 8005c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c7d 	.word	0x08005c7d
 8005c18:	08005bf9 	.word	0x08005bf9
 8005c1c:	08005bf9 	.word	0x08005bf9
 8005c20:	08005bf9 	.word	0x08005bf9
 8005c24:	08005bf9 	.word	0x08005bf9
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005bf9 	.word	0x08005bf9
 8005c30:	08005bf9 	.word	0x08005bf9
 8005c34:	08005bf9 	.word	0x08005bf9
 8005c38:	08005bf9 	.word	0x08005bf9
 8005c3c:	08005d81 	.word	0x08005d81
 8005c40:	08005ca9 	.word	0x08005ca9
 8005c44:	08005d3b 	.word	0x08005d3b
 8005c48:	08005bf9 	.word	0x08005bf9
 8005c4c:	08005bf9 	.word	0x08005bf9
 8005c50:	08005da3 	.word	0x08005da3
 8005c54:	08005bf9 	.word	0x08005bf9
 8005c58:	08005ca9 	.word	0x08005ca9
 8005c5c:	08005bf9 	.word	0x08005bf9
 8005c60:	08005bf9 	.word	0x08005bf9
 8005c64:	08005d43 	.word	0x08005d43
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	1d1a      	adds	r2, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	602a      	str	r2, [r5, #0]
 8005c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e09f      	b.n	8005dbc <_printf_i+0x1ec>
 8005c7c:	6820      	ldr	r0, [r4, #0]
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	0607      	lsls	r7, r0, #24
 8005c82:	f103 0104 	add.w	r1, r3, #4
 8005c86:	6029      	str	r1, [r5, #0]
 8005c88:	d501      	bpl.n	8005c8e <_printf_i+0xbe>
 8005c8a:	681e      	ldr	r6, [r3, #0]
 8005c8c:	e003      	b.n	8005c96 <_printf_i+0xc6>
 8005c8e:	0646      	lsls	r6, r0, #25
 8005c90:	d5fb      	bpl.n	8005c8a <_printf_i+0xba>
 8005c92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c96:	2e00      	cmp	r6, #0
 8005c98:	da03      	bge.n	8005ca2 <_printf_i+0xd2>
 8005c9a:	232d      	movs	r3, #45	; 0x2d
 8005c9c:	4276      	negs	r6, r6
 8005c9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca2:	485a      	ldr	r0, [pc, #360]	; (8005e0c <_printf_i+0x23c>)
 8005ca4:	230a      	movs	r3, #10
 8005ca6:	e012      	b.n	8005cce <_printf_i+0xfe>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	6820      	ldr	r0, [r4, #0]
 8005cac:	1d19      	adds	r1, r3, #4
 8005cae:	6029      	str	r1, [r5, #0]
 8005cb0:	0605      	lsls	r5, r0, #24
 8005cb2:	d501      	bpl.n	8005cb8 <_printf_i+0xe8>
 8005cb4:	681e      	ldr	r6, [r3, #0]
 8005cb6:	e002      	b.n	8005cbe <_printf_i+0xee>
 8005cb8:	0641      	lsls	r1, r0, #25
 8005cba:	d5fb      	bpl.n	8005cb4 <_printf_i+0xe4>
 8005cbc:	881e      	ldrh	r6, [r3, #0]
 8005cbe:	4853      	ldr	r0, [pc, #332]	; (8005e0c <_printf_i+0x23c>)
 8005cc0:	2f6f      	cmp	r7, #111	; 0x6f
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2308      	moveq	r3, #8
 8005cc6:	230a      	movne	r3, #10
 8005cc8:	2100      	movs	r1, #0
 8005cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cce:	6865      	ldr	r5, [r4, #4]
 8005cd0:	60a5      	str	r5, [r4, #8]
 8005cd2:	2d00      	cmp	r5, #0
 8005cd4:	bfa2      	ittt	ge
 8005cd6:	6821      	ldrge	r1, [r4, #0]
 8005cd8:	f021 0104 	bicge.w	r1, r1, #4
 8005cdc:	6021      	strge	r1, [r4, #0]
 8005cde:	b90e      	cbnz	r6, 8005ce4 <_printf_i+0x114>
 8005ce0:	2d00      	cmp	r5, #0
 8005ce2:	d04b      	beq.n	8005d7c <_printf_i+0x1ac>
 8005ce4:	4615      	mov	r5, r2
 8005ce6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cea:	fb03 6711 	mls	r7, r3, r1, r6
 8005cee:	5dc7      	ldrb	r7, [r0, r7]
 8005cf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cf4:	4637      	mov	r7, r6
 8005cf6:	42bb      	cmp	r3, r7
 8005cf8:	460e      	mov	r6, r1
 8005cfa:	d9f4      	bls.n	8005ce6 <_printf_i+0x116>
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d10b      	bne.n	8005d18 <_printf_i+0x148>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	07de      	lsls	r6, r3, #31
 8005d04:	d508      	bpl.n	8005d18 <_printf_i+0x148>
 8005d06:	6923      	ldr	r3, [r4, #16]
 8005d08:	6861      	ldr	r1, [r4, #4]
 8005d0a:	4299      	cmp	r1, r3
 8005d0c:	bfde      	ittt	le
 8005d0e:	2330      	movle	r3, #48	; 0x30
 8005d10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d18:	1b52      	subs	r2, r2, r5
 8005d1a:	6122      	str	r2, [r4, #16]
 8005d1c:	f8cd a000 	str.w	sl, [sp]
 8005d20:	464b      	mov	r3, r9
 8005d22:	aa03      	add	r2, sp, #12
 8005d24:	4621      	mov	r1, r4
 8005d26:	4640      	mov	r0, r8
 8005d28:	f7ff fee4 	bl	8005af4 <_printf_common>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d14a      	bne.n	8005dc6 <_printf_i+0x1f6>
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	b004      	add	sp, #16
 8005d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	f043 0320 	orr.w	r3, r3, #32
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	4833      	ldr	r0, [pc, #204]	; (8005e10 <_printf_i+0x240>)
 8005d44:	2778      	movs	r7, #120	; 0x78
 8005d46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	6829      	ldr	r1, [r5, #0]
 8005d4e:	061f      	lsls	r7, r3, #24
 8005d50:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d54:	d402      	bmi.n	8005d5c <_printf_i+0x18c>
 8005d56:	065f      	lsls	r7, r3, #25
 8005d58:	bf48      	it	mi
 8005d5a:	b2b6      	uxthmi	r6, r6
 8005d5c:	07df      	lsls	r7, r3, #31
 8005d5e:	bf48      	it	mi
 8005d60:	f043 0320 	orrmi.w	r3, r3, #32
 8005d64:	6029      	str	r1, [r5, #0]
 8005d66:	bf48      	it	mi
 8005d68:	6023      	strmi	r3, [r4, #0]
 8005d6a:	b91e      	cbnz	r6, 8005d74 <_printf_i+0x1a4>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	f023 0320 	bic.w	r3, r3, #32
 8005d72:	6023      	str	r3, [r4, #0]
 8005d74:	2310      	movs	r3, #16
 8005d76:	e7a7      	b.n	8005cc8 <_printf_i+0xf8>
 8005d78:	4824      	ldr	r0, [pc, #144]	; (8005e0c <_printf_i+0x23c>)
 8005d7a:	e7e4      	b.n	8005d46 <_printf_i+0x176>
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	e7bd      	b.n	8005cfc <_printf_i+0x12c>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	6826      	ldr	r6, [r4, #0]
 8005d84:	6961      	ldr	r1, [r4, #20]
 8005d86:	1d18      	adds	r0, r3, #4
 8005d88:	6028      	str	r0, [r5, #0]
 8005d8a:	0635      	lsls	r5, r6, #24
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	d501      	bpl.n	8005d94 <_printf_i+0x1c4>
 8005d90:	6019      	str	r1, [r3, #0]
 8005d92:	e002      	b.n	8005d9a <_printf_i+0x1ca>
 8005d94:	0670      	lsls	r0, r6, #25
 8005d96:	d5fb      	bpl.n	8005d90 <_printf_i+0x1c0>
 8005d98:	8019      	strh	r1, [r3, #0]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	4615      	mov	r5, r2
 8005da0:	e7bc      	b.n	8005d1c <_printf_i+0x14c>
 8005da2:	682b      	ldr	r3, [r5, #0]
 8005da4:	1d1a      	adds	r2, r3, #4
 8005da6:	602a      	str	r2, [r5, #0]
 8005da8:	681d      	ldr	r5, [r3, #0]
 8005daa:	6862      	ldr	r2, [r4, #4]
 8005dac:	2100      	movs	r1, #0
 8005dae:	4628      	mov	r0, r5
 8005db0:	f7fa fa46 	bl	8000240 <memchr>
 8005db4:	b108      	cbz	r0, 8005dba <_printf_i+0x1ea>
 8005db6:	1b40      	subs	r0, r0, r5
 8005db8:	6060      	str	r0, [r4, #4]
 8005dba:	6863      	ldr	r3, [r4, #4]
 8005dbc:	6123      	str	r3, [r4, #16]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dc4:	e7aa      	b.n	8005d1c <_printf_i+0x14c>
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	462a      	mov	r2, r5
 8005dca:	4649      	mov	r1, r9
 8005dcc:	4640      	mov	r0, r8
 8005dce:	47d0      	blx	sl
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d0ad      	beq.n	8005d30 <_printf_i+0x160>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	079b      	lsls	r3, r3, #30
 8005dd8:	d413      	bmi.n	8005e02 <_printf_i+0x232>
 8005dda:	68e0      	ldr	r0, [r4, #12]
 8005ddc:	9b03      	ldr	r3, [sp, #12]
 8005dde:	4298      	cmp	r0, r3
 8005de0:	bfb8      	it	lt
 8005de2:	4618      	movlt	r0, r3
 8005de4:	e7a6      	b.n	8005d34 <_printf_i+0x164>
 8005de6:	2301      	movs	r3, #1
 8005de8:	4632      	mov	r2, r6
 8005dea:	4649      	mov	r1, r9
 8005dec:	4640      	mov	r0, r8
 8005dee:	47d0      	blx	sl
 8005df0:	3001      	adds	r0, #1
 8005df2:	d09d      	beq.n	8005d30 <_printf_i+0x160>
 8005df4:	3501      	adds	r5, #1
 8005df6:	68e3      	ldr	r3, [r4, #12]
 8005df8:	9903      	ldr	r1, [sp, #12]
 8005dfa:	1a5b      	subs	r3, r3, r1
 8005dfc:	42ab      	cmp	r3, r5
 8005dfe:	dcf2      	bgt.n	8005de6 <_printf_i+0x216>
 8005e00:	e7eb      	b.n	8005dda <_printf_i+0x20a>
 8005e02:	2500      	movs	r5, #0
 8005e04:	f104 0619 	add.w	r6, r4, #25
 8005e08:	e7f5      	b.n	8005df6 <_printf_i+0x226>
 8005e0a:	bf00      	nop
 8005e0c:	0802e584 	.word	0x0802e584
 8005e10:	0802e595 	.word	0x0802e595

08005e14 <std>:
 8005e14:	2300      	movs	r3, #0
 8005e16:	b510      	push	{r4, lr}
 8005e18:	4604      	mov	r4, r0
 8005e1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e22:	6083      	str	r3, [r0, #8]
 8005e24:	8181      	strh	r1, [r0, #12]
 8005e26:	6643      	str	r3, [r0, #100]	; 0x64
 8005e28:	81c2      	strh	r2, [r0, #14]
 8005e2a:	6183      	str	r3, [r0, #24]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	2208      	movs	r2, #8
 8005e30:	305c      	adds	r0, #92	; 0x5c
 8005e32:	f000 f930 	bl	8006096 <memset>
 8005e36:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <std+0x38>)
 8005e38:	6263      	str	r3, [r4, #36]	; 0x24
 8005e3a:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <std+0x3c>)
 8005e3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e3e:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <std+0x40>)
 8005e40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <std+0x44>)
 8005e44:	6224      	str	r4, [r4, #32]
 8005e46:	6323      	str	r3, [r4, #48]	; 0x30
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	bf00      	nop
 8005e4c:	0800600d 	.word	0x0800600d
 8005e50:	08006033 	.word	0x08006033
 8005e54:	0800606b 	.word	0x0800606b
 8005e58:	0800608f 	.word	0x0800608f

08005e5c <stdio_exit_handler>:
 8005e5c:	4a02      	ldr	r2, [pc, #8]	; (8005e68 <stdio_exit_handler+0xc>)
 8005e5e:	4903      	ldr	r1, [pc, #12]	; (8005e6c <stdio_exit_handler+0x10>)
 8005e60:	4803      	ldr	r0, [pc, #12]	; (8005e70 <stdio_exit_handler+0x14>)
 8005e62:	f000 b869 	b.w	8005f38 <_fwalk_sglue>
 8005e66:	bf00      	nop
 8005e68:	20000010 	.word	0x20000010
 8005e6c:	08008075 	.word	0x08008075
 8005e70:	2000001c 	.word	0x2000001c

08005e74 <cleanup_stdio>:
 8005e74:	6841      	ldr	r1, [r0, #4]
 8005e76:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <cleanup_stdio+0x34>)
 8005e78:	4299      	cmp	r1, r3
 8005e7a:	b510      	push	{r4, lr}
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	d001      	beq.n	8005e84 <cleanup_stdio+0x10>
 8005e80:	f002 f8f8 	bl	8008074 <_fflush_r>
 8005e84:	68a1      	ldr	r1, [r4, #8]
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <cleanup_stdio+0x38>)
 8005e88:	4299      	cmp	r1, r3
 8005e8a:	d002      	beq.n	8005e92 <cleanup_stdio+0x1e>
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f002 f8f1 	bl	8008074 <_fflush_r>
 8005e92:	68e1      	ldr	r1, [r4, #12]
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <cleanup_stdio+0x3c>)
 8005e96:	4299      	cmp	r1, r3
 8005e98:	d004      	beq.n	8005ea4 <cleanup_stdio+0x30>
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea0:	f002 b8e8 	b.w	8008074 <_fflush_r>
 8005ea4:	bd10      	pop	{r4, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000480 	.word	0x20000480
 8005eac:	200004e8 	.word	0x200004e8
 8005eb0:	20000550 	.word	0x20000550

08005eb4 <global_stdio_init.part.0>:
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <global_stdio_init.part.0+0x30>)
 8005eb8:	4c0b      	ldr	r4, [pc, #44]	; (8005ee8 <global_stdio_init.part.0+0x34>)
 8005eba:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <global_stdio_init.part.0+0x38>)
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2104      	movs	r1, #4
 8005ec4:	f7ff ffa6 	bl	8005e14 <std>
 8005ec8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005ecc:	2201      	movs	r2, #1
 8005ece:	2109      	movs	r1, #9
 8005ed0:	f7ff ffa0 	bl	8005e14 <std>
 8005ed4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ed8:	2202      	movs	r2, #2
 8005eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ede:	2112      	movs	r1, #18
 8005ee0:	f7ff bf98 	b.w	8005e14 <std>
 8005ee4:	200005b8 	.word	0x200005b8
 8005ee8:	20000480 	.word	0x20000480
 8005eec:	08005e5d 	.word	0x08005e5d

08005ef0 <__sfp_lock_acquire>:
 8005ef0:	4801      	ldr	r0, [pc, #4]	; (8005ef8 <__sfp_lock_acquire+0x8>)
 8005ef2:	f000 b94d 	b.w	8006190 <__retarget_lock_acquire_recursive>
 8005ef6:	bf00      	nop
 8005ef8:	200005c1 	.word	0x200005c1

08005efc <__sfp_lock_release>:
 8005efc:	4801      	ldr	r0, [pc, #4]	; (8005f04 <__sfp_lock_release+0x8>)
 8005efe:	f000 b948 	b.w	8006192 <__retarget_lock_release_recursive>
 8005f02:	bf00      	nop
 8005f04:	200005c1 	.word	0x200005c1

08005f08 <__sinit>:
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	f7ff fff0 	bl	8005ef0 <__sfp_lock_acquire>
 8005f10:	6a23      	ldr	r3, [r4, #32]
 8005f12:	b11b      	cbz	r3, 8005f1c <__sinit+0x14>
 8005f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f18:	f7ff bff0 	b.w	8005efc <__sfp_lock_release>
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <__sinit+0x28>)
 8005f1e:	6223      	str	r3, [r4, #32]
 8005f20:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <__sinit+0x2c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f5      	bne.n	8005f14 <__sinit+0xc>
 8005f28:	f7ff ffc4 	bl	8005eb4 <global_stdio_init.part.0>
 8005f2c:	e7f2      	b.n	8005f14 <__sinit+0xc>
 8005f2e:	bf00      	nop
 8005f30:	08005e75 	.word	0x08005e75
 8005f34:	200005b8 	.word	0x200005b8

08005f38 <_fwalk_sglue>:
 8005f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f3c:	4607      	mov	r7, r0
 8005f3e:	4688      	mov	r8, r1
 8005f40:	4614      	mov	r4, r2
 8005f42:	2600      	movs	r6, #0
 8005f44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f48:	f1b9 0901 	subs.w	r9, r9, #1
 8005f4c:	d505      	bpl.n	8005f5a <_fwalk_sglue+0x22>
 8005f4e:	6824      	ldr	r4, [r4, #0]
 8005f50:	2c00      	cmp	r4, #0
 8005f52:	d1f7      	bne.n	8005f44 <_fwalk_sglue+0xc>
 8005f54:	4630      	mov	r0, r6
 8005f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5a:	89ab      	ldrh	r3, [r5, #12]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d907      	bls.n	8005f70 <_fwalk_sglue+0x38>
 8005f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f64:	3301      	adds	r3, #1
 8005f66:	d003      	beq.n	8005f70 <_fwalk_sglue+0x38>
 8005f68:	4629      	mov	r1, r5
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	47c0      	blx	r8
 8005f6e:	4306      	orrs	r6, r0
 8005f70:	3568      	adds	r5, #104	; 0x68
 8005f72:	e7e9      	b.n	8005f48 <_fwalk_sglue+0x10>

08005f74 <siprintf>:
 8005f74:	b40e      	push	{r1, r2, r3}
 8005f76:	b500      	push	{lr}
 8005f78:	b09c      	sub	sp, #112	; 0x70
 8005f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f7c:	9002      	str	r0, [sp, #8]
 8005f7e:	9006      	str	r0, [sp, #24]
 8005f80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f84:	4809      	ldr	r0, [pc, #36]	; (8005fac <siprintf+0x38>)
 8005f86:	9107      	str	r1, [sp, #28]
 8005f88:	9104      	str	r1, [sp, #16]
 8005f8a:	4909      	ldr	r1, [pc, #36]	; (8005fb0 <siprintf+0x3c>)
 8005f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f90:	9105      	str	r1, [sp, #20]
 8005f92:	6800      	ldr	r0, [r0, #0]
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	a902      	add	r1, sp, #8
 8005f98:	f001 fbc8 	bl	800772c <_svfiprintf_r>
 8005f9c:	9b02      	ldr	r3, [sp, #8]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	b01c      	add	sp, #112	; 0x70
 8005fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fa8:	b003      	add	sp, #12
 8005faa:	4770      	bx	lr
 8005fac:	20000068 	.word	0x20000068
 8005fb0:	ffff0208 	.word	0xffff0208

08005fb4 <siscanf>:
 8005fb4:	b40e      	push	{r1, r2, r3}
 8005fb6:	b510      	push	{r4, lr}
 8005fb8:	b09f      	sub	sp, #124	; 0x7c
 8005fba:	ac21      	add	r4, sp, #132	; 0x84
 8005fbc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005fc0:	f854 2b04 	ldr.w	r2, [r4], #4
 8005fc4:	9201      	str	r2, [sp, #4]
 8005fc6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005fca:	9004      	str	r0, [sp, #16]
 8005fcc:	9008      	str	r0, [sp, #32]
 8005fce:	f7fa f987 	bl	80002e0 <strlen>
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <siscanf+0x50>)
 8005fd4:	9005      	str	r0, [sp, #20]
 8005fd6:	9009      	str	r0, [sp, #36]	; 0x24
 8005fd8:	930d      	str	r3, [sp, #52]	; 0x34
 8005fda:	480b      	ldr	r0, [pc, #44]	; (8006008 <siscanf+0x54>)
 8005fdc:	9a01      	ldr	r2, [sp, #4]
 8005fde:	6800      	ldr	r0, [r0, #0]
 8005fe0:	9403      	str	r4, [sp, #12]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9311      	str	r3, [sp, #68]	; 0x44
 8005fe6:	9316      	str	r3, [sp, #88]	; 0x58
 8005fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005ff0:	a904      	add	r1, sp, #16
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	f001 fcf2 	bl	80079dc <__ssvfiscanf_r>
 8005ff8:	b01f      	add	sp, #124	; 0x7c
 8005ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ffe:	b003      	add	sp, #12
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	0800602f 	.word	0x0800602f
 8006008:	20000068 	.word	0x20000068

0800600c <__sread>:
 800600c:	b510      	push	{r4, lr}
 800600e:	460c      	mov	r4, r1
 8006010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006014:	f000 f86e 	bl	80060f4 <_read_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	bfab      	itete	ge
 800601c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800601e:	89a3      	ldrhlt	r3, [r4, #12]
 8006020:	181b      	addge	r3, r3, r0
 8006022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006026:	bfac      	ite	ge
 8006028:	6563      	strge	r3, [r4, #84]	; 0x54
 800602a:	81a3      	strhlt	r3, [r4, #12]
 800602c:	bd10      	pop	{r4, pc}

0800602e <__seofread>:
 800602e:	2000      	movs	r0, #0
 8006030:	4770      	bx	lr

08006032 <__swrite>:
 8006032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006036:	461f      	mov	r7, r3
 8006038:	898b      	ldrh	r3, [r1, #12]
 800603a:	05db      	lsls	r3, r3, #23
 800603c:	4605      	mov	r5, r0
 800603e:	460c      	mov	r4, r1
 8006040:	4616      	mov	r6, r2
 8006042:	d505      	bpl.n	8006050 <__swrite+0x1e>
 8006044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006048:	2302      	movs	r3, #2
 800604a:	2200      	movs	r2, #0
 800604c:	f000 f840 	bl	80060d0 <_lseek_r>
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800605a:	81a3      	strh	r3, [r4, #12]
 800605c:	4632      	mov	r2, r6
 800605e:	463b      	mov	r3, r7
 8006060:	4628      	mov	r0, r5
 8006062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006066:	f000 b857 	b.w	8006118 <_write_r>

0800606a <__sseek>:
 800606a:	b510      	push	{r4, lr}
 800606c:	460c      	mov	r4, r1
 800606e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006072:	f000 f82d 	bl	80060d0 <_lseek_r>
 8006076:	1c43      	adds	r3, r0, #1
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	bf15      	itete	ne
 800607c:	6560      	strne	r0, [r4, #84]	; 0x54
 800607e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006086:	81a3      	strheq	r3, [r4, #12]
 8006088:	bf18      	it	ne
 800608a:	81a3      	strhne	r3, [r4, #12]
 800608c:	bd10      	pop	{r4, pc}

0800608e <__sclose>:
 800608e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006092:	f000 b80d 	b.w	80060b0 <_close_r>

08006096 <memset>:
 8006096:	4402      	add	r2, r0
 8006098:	4603      	mov	r3, r0
 800609a:	4293      	cmp	r3, r2
 800609c:	d100      	bne.n	80060a0 <memset+0xa>
 800609e:	4770      	bx	lr
 80060a0:	f803 1b01 	strb.w	r1, [r3], #1
 80060a4:	e7f9      	b.n	800609a <memset+0x4>
	...

080060a8 <_localeconv_r>:
 80060a8:	4800      	ldr	r0, [pc, #0]	; (80060ac <_localeconv_r+0x4>)
 80060aa:	4770      	bx	lr
 80060ac:	2000015c 	.word	0x2000015c

080060b0 <_close_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d06      	ldr	r5, [pc, #24]	; (80060cc <_close_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	f7fb f8f9 	bl	80012b2 <_close>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_close_r+0x1a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_close_r+0x1a>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	200005bc 	.word	0x200005bc

080060d0 <_lseek_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d07      	ldr	r5, [pc, #28]	; (80060f0 <_lseek_r+0x20>)
 80060d4:	4604      	mov	r4, r0
 80060d6:	4608      	mov	r0, r1
 80060d8:	4611      	mov	r1, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	602a      	str	r2, [r5, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	f7fb f90e 	bl	8001300 <_lseek>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_lseek_r+0x1e>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_lseek_r+0x1e>
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	200005bc 	.word	0x200005bc

080060f4 <_read_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4d07      	ldr	r5, [pc, #28]	; (8006114 <_read_r+0x20>)
 80060f8:	4604      	mov	r4, r0
 80060fa:	4608      	mov	r0, r1
 80060fc:	4611      	mov	r1, r2
 80060fe:	2200      	movs	r2, #0
 8006100:	602a      	str	r2, [r5, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	f7fb f89c 	bl	8001240 <_read>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_read_r+0x1e>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_read_r+0x1e>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	200005bc 	.word	0x200005bc

08006118 <_write_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d07      	ldr	r5, [pc, #28]	; (8006138 <_write_r+0x20>)
 800611c:	4604      	mov	r4, r0
 800611e:	4608      	mov	r0, r1
 8006120:	4611      	mov	r1, r2
 8006122:	2200      	movs	r2, #0
 8006124:	602a      	str	r2, [r5, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	f7fb f8a7 	bl	800127a <_write>
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	d102      	bne.n	8006136 <_write_r+0x1e>
 8006130:	682b      	ldr	r3, [r5, #0]
 8006132:	b103      	cbz	r3, 8006136 <_write_r+0x1e>
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	200005bc 	.word	0x200005bc

0800613c <__errno>:
 800613c:	4b01      	ldr	r3, [pc, #4]	; (8006144 <__errno+0x8>)
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000068 	.word	0x20000068

08006148 <__libc_init_array>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	4d0d      	ldr	r5, [pc, #52]	; (8006180 <__libc_init_array+0x38>)
 800614c:	4c0d      	ldr	r4, [pc, #52]	; (8006184 <__libc_init_array+0x3c>)
 800614e:	1b64      	subs	r4, r4, r5
 8006150:	10a4      	asrs	r4, r4, #2
 8006152:	2600      	movs	r6, #0
 8006154:	42a6      	cmp	r6, r4
 8006156:	d109      	bne.n	800616c <__libc_init_array+0x24>
 8006158:	4d0b      	ldr	r5, [pc, #44]	; (8006188 <__libc_init_array+0x40>)
 800615a:	4c0c      	ldr	r4, [pc, #48]	; (800618c <__libc_init_array+0x44>)
 800615c:	f002 fc9c 	bl	8008a98 <_init>
 8006160:	1b64      	subs	r4, r4, r5
 8006162:	10a4      	asrs	r4, r4, #2
 8006164:	2600      	movs	r6, #0
 8006166:	42a6      	cmp	r6, r4
 8006168:	d105      	bne.n	8006176 <__libc_init_array+0x2e>
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006170:	4798      	blx	r3
 8006172:	3601      	adds	r6, #1
 8006174:	e7ee      	b.n	8006154 <__libc_init_array+0xc>
 8006176:	f855 3b04 	ldr.w	r3, [r5], #4
 800617a:	4798      	blx	r3
 800617c:	3601      	adds	r6, #1
 800617e:	e7f2      	b.n	8006166 <__libc_init_array+0x1e>
 8006180:	0802e908 	.word	0x0802e908
 8006184:	0802e908 	.word	0x0802e908
 8006188:	0802e908 	.word	0x0802e908
 800618c:	0802e90c 	.word	0x0802e90c

08006190 <__retarget_lock_acquire_recursive>:
 8006190:	4770      	bx	lr

08006192 <__retarget_lock_release_recursive>:
 8006192:	4770      	bx	lr

08006194 <quorem>:
 8006194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006198:	6903      	ldr	r3, [r0, #16]
 800619a:	690c      	ldr	r4, [r1, #16]
 800619c:	42a3      	cmp	r3, r4
 800619e:	4607      	mov	r7, r0
 80061a0:	db7e      	blt.n	80062a0 <quorem+0x10c>
 80061a2:	3c01      	subs	r4, #1
 80061a4:	f101 0814 	add.w	r8, r1, #20
 80061a8:	f100 0514 	add.w	r5, r0, #20
 80061ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061ba:	3301      	adds	r3, #1
 80061bc:	429a      	cmp	r2, r3
 80061be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80061ca:	d331      	bcc.n	8006230 <quorem+0x9c>
 80061cc:	f04f 0e00 	mov.w	lr, #0
 80061d0:	4640      	mov	r0, r8
 80061d2:	46ac      	mov	ip, r5
 80061d4:	46f2      	mov	sl, lr
 80061d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80061da:	b293      	uxth	r3, r2
 80061dc:	fb06 e303 	mla	r3, r6, r3, lr
 80061e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061e4:	0c1a      	lsrs	r2, r3, #16
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	ebaa 0303 	sub.w	r3, sl, r3
 80061ec:	f8dc a000 	ldr.w	sl, [ip]
 80061f0:	fa13 f38a 	uxtah	r3, r3, sl
 80061f4:	fb06 220e 	mla	r2, r6, lr, r2
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	9b00      	ldr	r3, [sp, #0]
 80061fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006200:	b292      	uxth	r2, r2
 8006202:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006206:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800620a:	f8bd 3000 	ldrh.w	r3, [sp]
 800620e:	4581      	cmp	r9, r0
 8006210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006214:	f84c 3b04 	str.w	r3, [ip], #4
 8006218:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800621c:	d2db      	bcs.n	80061d6 <quorem+0x42>
 800621e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006222:	b92b      	cbnz	r3, 8006230 <quorem+0x9c>
 8006224:	9b01      	ldr	r3, [sp, #4]
 8006226:	3b04      	subs	r3, #4
 8006228:	429d      	cmp	r5, r3
 800622a:	461a      	mov	r2, r3
 800622c:	d32c      	bcc.n	8006288 <quorem+0xf4>
 800622e:	613c      	str	r4, [r7, #16]
 8006230:	4638      	mov	r0, r7
 8006232:	f001 f921 	bl	8007478 <__mcmp>
 8006236:	2800      	cmp	r0, #0
 8006238:	db22      	blt.n	8006280 <quorem+0xec>
 800623a:	3601      	adds	r6, #1
 800623c:	4629      	mov	r1, r5
 800623e:	2000      	movs	r0, #0
 8006240:	f858 2b04 	ldr.w	r2, [r8], #4
 8006244:	f8d1 c000 	ldr.w	ip, [r1]
 8006248:	b293      	uxth	r3, r2
 800624a:	1ac3      	subs	r3, r0, r3
 800624c:	0c12      	lsrs	r2, r2, #16
 800624e:	fa13 f38c 	uxtah	r3, r3, ip
 8006252:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006256:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800625a:	b29b      	uxth	r3, r3
 800625c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006260:	45c1      	cmp	r9, r8
 8006262:	f841 3b04 	str.w	r3, [r1], #4
 8006266:	ea4f 4022 	mov.w	r0, r2, asr #16
 800626a:	d2e9      	bcs.n	8006240 <quorem+0xac>
 800626c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006270:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006274:	b922      	cbnz	r2, 8006280 <quorem+0xec>
 8006276:	3b04      	subs	r3, #4
 8006278:	429d      	cmp	r5, r3
 800627a:	461a      	mov	r2, r3
 800627c:	d30a      	bcc.n	8006294 <quorem+0x100>
 800627e:	613c      	str	r4, [r7, #16]
 8006280:	4630      	mov	r0, r6
 8006282:	b003      	add	sp, #12
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	3b04      	subs	r3, #4
 800628c:	2a00      	cmp	r2, #0
 800628e:	d1ce      	bne.n	800622e <quorem+0x9a>
 8006290:	3c01      	subs	r4, #1
 8006292:	e7c9      	b.n	8006228 <quorem+0x94>
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	3b04      	subs	r3, #4
 8006298:	2a00      	cmp	r2, #0
 800629a:	d1f0      	bne.n	800627e <quorem+0xea>
 800629c:	3c01      	subs	r4, #1
 800629e:	e7eb      	b.n	8006278 <quorem+0xe4>
 80062a0:	2000      	movs	r0, #0
 80062a2:	e7ee      	b.n	8006282 <quorem+0xee>
 80062a4:	0000      	movs	r0, r0
	...

080062a8 <_dtoa_r>:
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	ed2d 8b02 	vpush	{d8}
 80062b0:	69c5      	ldr	r5, [r0, #28]
 80062b2:	b091      	sub	sp, #68	; 0x44
 80062b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80062b8:	ec59 8b10 	vmov	r8, r9, d0
 80062bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80062be:	9106      	str	r1, [sp, #24]
 80062c0:	4606      	mov	r6, r0
 80062c2:	9208      	str	r2, [sp, #32]
 80062c4:	930c      	str	r3, [sp, #48]	; 0x30
 80062c6:	b975      	cbnz	r5, 80062e6 <_dtoa_r+0x3e>
 80062c8:	2010      	movs	r0, #16
 80062ca:	f000 fda5 	bl	8006e18 <malloc>
 80062ce:	4602      	mov	r2, r0
 80062d0:	61f0      	str	r0, [r6, #28]
 80062d2:	b920      	cbnz	r0, 80062de <_dtoa_r+0x36>
 80062d4:	4ba6      	ldr	r3, [pc, #664]	; (8006570 <_dtoa_r+0x2c8>)
 80062d6:	21ef      	movs	r1, #239	; 0xef
 80062d8:	48a6      	ldr	r0, [pc, #664]	; (8006574 <_dtoa_r+0x2cc>)
 80062da:	f001 ff9f 	bl	800821c <__assert_func>
 80062de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062e2:	6005      	str	r5, [r0, #0]
 80062e4:	60c5      	str	r5, [r0, #12]
 80062e6:	69f3      	ldr	r3, [r6, #28]
 80062e8:	6819      	ldr	r1, [r3, #0]
 80062ea:	b151      	cbz	r1, 8006302 <_dtoa_r+0x5a>
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	604a      	str	r2, [r1, #4]
 80062f0:	2301      	movs	r3, #1
 80062f2:	4093      	lsls	r3, r2
 80062f4:	608b      	str	r3, [r1, #8]
 80062f6:	4630      	mov	r0, r6
 80062f8:	f000 fe82 	bl	8007000 <_Bfree>
 80062fc:	69f3      	ldr	r3, [r6, #28]
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	f1b9 0300 	subs.w	r3, r9, #0
 8006306:	bfbb      	ittet	lt
 8006308:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800630c:	9303      	strlt	r3, [sp, #12]
 800630e:	2300      	movge	r3, #0
 8006310:	2201      	movlt	r2, #1
 8006312:	bfac      	ite	ge
 8006314:	6023      	strge	r3, [r4, #0]
 8006316:	6022      	strlt	r2, [r4, #0]
 8006318:	4b97      	ldr	r3, [pc, #604]	; (8006578 <_dtoa_r+0x2d0>)
 800631a:	9c03      	ldr	r4, [sp, #12]
 800631c:	43a3      	bics	r3, r4
 800631e:	d11c      	bne.n	800635a <_dtoa_r+0xb2>
 8006320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006322:	f242 730f 	movw	r3, #9999	; 0x270f
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800632c:	ea53 0308 	orrs.w	r3, r3, r8
 8006330:	f000 84fb 	beq.w	8006d2a <_dtoa_r+0xa82>
 8006334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006336:	b963      	cbnz	r3, 8006352 <_dtoa_r+0xaa>
 8006338:	4b90      	ldr	r3, [pc, #576]	; (800657c <_dtoa_r+0x2d4>)
 800633a:	e020      	b.n	800637e <_dtoa_r+0xd6>
 800633c:	4b90      	ldr	r3, [pc, #576]	; (8006580 <_dtoa_r+0x2d8>)
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	3308      	adds	r3, #8
 8006342:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	9801      	ldr	r0, [sp, #4]
 8006348:	b011      	add	sp, #68	; 0x44
 800634a:	ecbd 8b02 	vpop	{d8}
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	4b8a      	ldr	r3, [pc, #552]	; (800657c <_dtoa_r+0x2d4>)
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	3303      	adds	r3, #3
 8006358:	e7f3      	b.n	8006342 <_dtoa_r+0x9a>
 800635a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800635e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006366:	d10c      	bne.n	8006382 <_dtoa_r+0xda>
 8006368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800636a:	2301      	movs	r3, #1
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 84d7 	beq.w	8006d24 <_dtoa_r+0xa7c>
 8006376:	4b83      	ldr	r3, [pc, #524]	; (8006584 <_dtoa_r+0x2dc>)
 8006378:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	3b01      	subs	r3, #1
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	e7e1      	b.n	8006346 <_dtoa_r+0x9e>
 8006382:	aa0e      	add	r2, sp, #56	; 0x38
 8006384:	a90f      	add	r1, sp, #60	; 0x3c
 8006386:	4630      	mov	r0, r6
 8006388:	eeb0 0b48 	vmov.f64	d0, d8
 800638c:	f001 f91a 	bl	80075c4 <__d2b>
 8006390:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006396:	4605      	mov	r5, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d046      	beq.n	800642a <_dtoa_r+0x182>
 800639c:	eeb0 7b48 	vmov.f64	d7, d8
 80063a0:	ee18 1a90 	vmov	r1, s17
 80063a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80063a8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80063ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80063b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80063b4:	2000      	movs	r0, #0
 80063b6:	ee07 1a90 	vmov	s15, r1
 80063ba:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80063be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006558 <_dtoa_r+0x2b0>
 80063c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80063c6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8006560 <_dtoa_r+0x2b8>
 80063ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80063ce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006568 <_dtoa_r+0x2c0>
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80063da:	eeb0 7b46 	vmov.f64	d7, d6
 80063de:	eea4 7b05 	vfma.f64	d7, d4, d5
 80063e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80063e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80063ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ee:	ee16 ba90 	vmov	fp, s13
 80063f2:	9009      	str	r0, [sp, #36]	; 0x24
 80063f4:	d508      	bpl.n	8006408 <_dtoa_r+0x160>
 80063f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80063fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80063fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006402:	bf18      	it	ne
 8006404:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006408:	f1bb 0f16 	cmp.w	fp, #22
 800640c:	d82b      	bhi.n	8006466 <_dtoa_r+0x1be>
 800640e:	495e      	ldr	r1, [pc, #376]	; (8006588 <_dtoa_r+0x2e0>)
 8006410:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006414:	ed91 7b00 	vldr	d7, [r1]
 8006418:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800641c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006420:	d501      	bpl.n	8006426 <_dtoa_r+0x17e>
 8006422:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006426:	2100      	movs	r1, #0
 8006428:	e01e      	b.n	8006468 <_dtoa_r+0x1c0>
 800642a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800642c:	4413      	add	r3, r2
 800642e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8006432:	2920      	cmp	r1, #32
 8006434:	bfc1      	itttt	gt
 8006436:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800643a:	408c      	lslgt	r4, r1
 800643c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8006440:	fa28 f101 	lsrgt.w	r1, r8, r1
 8006444:	bfd6      	itet	le
 8006446:	f1c1 0120 	rsble	r1, r1, #32
 800644a:	4321      	orrgt	r1, r4
 800644c:	fa08 f101 	lslle.w	r1, r8, r1
 8006450:	ee07 1a90 	vmov	s15, r1
 8006454:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006458:	3b01      	subs	r3, #1
 800645a:	ee17 1a90 	vmov	r1, s15
 800645e:	2001      	movs	r0, #1
 8006460:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006464:	e7a7      	b.n	80063b6 <_dtoa_r+0x10e>
 8006466:	2101      	movs	r1, #1
 8006468:	1ad2      	subs	r2, r2, r3
 800646a:	1e53      	subs	r3, r2, #1
 800646c:	9305      	str	r3, [sp, #20]
 800646e:	bf45      	ittet	mi
 8006470:	f1c2 0301 	rsbmi	r3, r2, #1
 8006474:	9304      	strmi	r3, [sp, #16]
 8006476:	2300      	movpl	r3, #0
 8006478:	2300      	movmi	r3, #0
 800647a:	bf4c      	ite	mi
 800647c:	9305      	strmi	r3, [sp, #20]
 800647e:	9304      	strpl	r3, [sp, #16]
 8006480:	f1bb 0f00 	cmp.w	fp, #0
 8006484:	910b      	str	r1, [sp, #44]	; 0x2c
 8006486:	db18      	blt.n	80064ba <_dtoa_r+0x212>
 8006488:	9b05      	ldr	r3, [sp, #20]
 800648a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800648e:	445b      	add	r3, fp
 8006490:	9305      	str	r3, [sp, #20]
 8006492:	2300      	movs	r3, #0
 8006494:	9a06      	ldr	r2, [sp, #24]
 8006496:	2a09      	cmp	r2, #9
 8006498:	d848      	bhi.n	800652c <_dtoa_r+0x284>
 800649a:	2a05      	cmp	r2, #5
 800649c:	bfc4      	itt	gt
 800649e:	3a04      	subgt	r2, #4
 80064a0:	9206      	strgt	r2, [sp, #24]
 80064a2:	9a06      	ldr	r2, [sp, #24]
 80064a4:	f1a2 0202 	sub.w	r2, r2, #2
 80064a8:	bfcc      	ite	gt
 80064aa:	2400      	movgt	r4, #0
 80064ac:	2401      	movle	r4, #1
 80064ae:	2a03      	cmp	r2, #3
 80064b0:	d847      	bhi.n	8006542 <_dtoa_r+0x29a>
 80064b2:	e8df f002 	tbb	[pc, r2]
 80064b6:	2d0b      	.short	0x2d0b
 80064b8:	392b      	.short	0x392b
 80064ba:	9b04      	ldr	r3, [sp, #16]
 80064bc:	2200      	movs	r2, #0
 80064be:	eba3 030b 	sub.w	r3, r3, fp
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	920a      	str	r2, [sp, #40]	; 0x28
 80064c6:	f1cb 0300 	rsb	r3, fp, #0
 80064ca:	e7e3      	b.n	8006494 <_dtoa_r+0x1ec>
 80064cc:	2200      	movs	r2, #0
 80064ce:	9207      	str	r2, [sp, #28]
 80064d0:	9a08      	ldr	r2, [sp, #32]
 80064d2:	2a00      	cmp	r2, #0
 80064d4:	dc38      	bgt.n	8006548 <_dtoa_r+0x2a0>
 80064d6:	f04f 0a01 	mov.w	sl, #1
 80064da:	46d1      	mov	r9, sl
 80064dc:	4652      	mov	r2, sl
 80064de:	f8cd a020 	str.w	sl, [sp, #32]
 80064e2:	69f7      	ldr	r7, [r6, #28]
 80064e4:	2100      	movs	r1, #0
 80064e6:	2004      	movs	r0, #4
 80064e8:	f100 0c14 	add.w	ip, r0, #20
 80064ec:	4594      	cmp	ip, r2
 80064ee:	d930      	bls.n	8006552 <_dtoa_r+0x2aa>
 80064f0:	6079      	str	r1, [r7, #4]
 80064f2:	4630      	mov	r0, r6
 80064f4:	930d      	str	r3, [sp, #52]	; 0x34
 80064f6:	f000 fd43 	bl	8006f80 <_Balloc>
 80064fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064fc:	9001      	str	r0, [sp, #4]
 80064fe:	4602      	mov	r2, r0
 8006500:	2800      	cmp	r0, #0
 8006502:	d145      	bne.n	8006590 <_dtoa_r+0x2e8>
 8006504:	4b21      	ldr	r3, [pc, #132]	; (800658c <_dtoa_r+0x2e4>)
 8006506:	f240 11af 	movw	r1, #431	; 0x1af
 800650a:	e6e5      	b.n	80062d8 <_dtoa_r+0x30>
 800650c:	2201      	movs	r2, #1
 800650e:	e7de      	b.n	80064ce <_dtoa_r+0x226>
 8006510:	2200      	movs	r2, #0
 8006512:	9207      	str	r2, [sp, #28]
 8006514:	9a08      	ldr	r2, [sp, #32]
 8006516:	eb0b 0a02 	add.w	sl, fp, r2
 800651a:	f10a 0901 	add.w	r9, sl, #1
 800651e:	464a      	mov	r2, r9
 8006520:	2a01      	cmp	r2, #1
 8006522:	bfb8      	it	lt
 8006524:	2201      	movlt	r2, #1
 8006526:	e7dc      	b.n	80064e2 <_dtoa_r+0x23a>
 8006528:	2201      	movs	r2, #1
 800652a:	e7f2      	b.n	8006512 <_dtoa_r+0x26a>
 800652c:	2401      	movs	r4, #1
 800652e:	2200      	movs	r2, #0
 8006530:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006534:	f04f 3aff 	mov.w	sl, #4294967295
 8006538:	2100      	movs	r1, #0
 800653a:	46d1      	mov	r9, sl
 800653c:	2212      	movs	r2, #18
 800653e:	9108      	str	r1, [sp, #32]
 8006540:	e7cf      	b.n	80064e2 <_dtoa_r+0x23a>
 8006542:	2201      	movs	r2, #1
 8006544:	9207      	str	r2, [sp, #28]
 8006546:	e7f5      	b.n	8006534 <_dtoa_r+0x28c>
 8006548:	f8dd a020 	ldr.w	sl, [sp, #32]
 800654c:	46d1      	mov	r9, sl
 800654e:	4652      	mov	r2, sl
 8006550:	e7c7      	b.n	80064e2 <_dtoa_r+0x23a>
 8006552:	3101      	adds	r1, #1
 8006554:	0040      	lsls	r0, r0, #1
 8006556:	e7c7      	b.n	80064e8 <_dtoa_r+0x240>
 8006558:	636f4361 	.word	0x636f4361
 800655c:	3fd287a7 	.word	0x3fd287a7
 8006560:	8b60c8b3 	.word	0x8b60c8b3
 8006564:	3fc68a28 	.word	0x3fc68a28
 8006568:	509f79fb 	.word	0x509f79fb
 800656c:	3fd34413 	.word	0x3fd34413
 8006570:	0802e5b3 	.word	0x0802e5b3
 8006574:	0802e5ca 	.word	0x0802e5ca
 8006578:	7ff00000 	.word	0x7ff00000
 800657c:	0802e5af 	.word	0x0802e5af
 8006580:	0802e5a6 	.word	0x0802e5a6
 8006584:	0802e7b4 	.word	0x0802e7b4
 8006588:	0802e6b8 	.word	0x0802e6b8
 800658c:	0802e622 	.word	0x0802e622
 8006590:	69f2      	ldr	r2, [r6, #28]
 8006592:	9901      	ldr	r1, [sp, #4]
 8006594:	6011      	str	r1, [r2, #0]
 8006596:	f1b9 0f0e 	cmp.w	r9, #14
 800659a:	d86c      	bhi.n	8006676 <_dtoa_r+0x3ce>
 800659c:	2c00      	cmp	r4, #0
 800659e:	d06a      	beq.n	8006676 <_dtoa_r+0x3ce>
 80065a0:	f1bb 0f00 	cmp.w	fp, #0
 80065a4:	f340 80a0 	ble.w	80066e8 <_dtoa_r+0x440>
 80065a8:	4ac1      	ldr	r2, [pc, #772]	; (80068b0 <_dtoa_r+0x608>)
 80065aa:	f00b 010f 	and.w	r1, fp, #15
 80065ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80065b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80065b6:	ed92 7b00 	vldr	d7, [r2]
 80065ba:	ea4f 122b 	mov.w	r2, fp, asr #4
 80065be:	f000 8087 	beq.w	80066d0 <_dtoa_r+0x428>
 80065c2:	49bc      	ldr	r1, [pc, #752]	; (80068b4 <_dtoa_r+0x60c>)
 80065c4:	ed91 6b08 	vldr	d6, [r1, #32]
 80065c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80065cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80065d0:	f002 020f 	and.w	r2, r2, #15
 80065d4:	2103      	movs	r1, #3
 80065d6:	48b7      	ldr	r0, [pc, #732]	; (80068b4 <_dtoa_r+0x60c>)
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d17b      	bne.n	80066d4 <_dtoa_r+0x42c>
 80065dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80065e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80065e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80065e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065ee:	2a00      	cmp	r2, #0
 80065f0:	f000 80a0 	beq.w	8006734 <_dtoa_r+0x48c>
 80065f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80065fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006600:	f140 8098 	bpl.w	8006734 <_dtoa_r+0x48c>
 8006604:	f1b9 0f00 	cmp.w	r9, #0
 8006608:	f000 8094 	beq.w	8006734 <_dtoa_r+0x48c>
 800660c:	f1ba 0f00 	cmp.w	sl, #0
 8006610:	dd2f      	ble.n	8006672 <_dtoa_r+0x3ca>
 8006612:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006616:	ee27 7b06 	vmul.f64	d7, d7, d6
 800661a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800661e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006622:	3101      	adds	r1, #1
 8006624:	4654      	mov	r4, sl
 8006626:	ed9d 6b02 	vldr	d6, [sp, #8]
 800662a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800662e:	ee07 1a90 	vmov	s15, r1
 8006632:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006636:	eea7 5b06 	vfma.f64	d5, d7, d6
 800663a:	ee15 7a90 	vmov	r7, s11
 800663e:	ec51 0b15 	vmov	r0, r1, d5
 8006642:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8006646:	2c00      	cmp	r4, #0
 8006648:	d177      	bne.n	800673a <_dtoa_r+0x492>
 800664a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800664e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006652:	ec41 0b17 	vmov	d7, r0, r1
 8006656:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800665a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665e:	f300 826a 	bgt.w	8006b36 <_dtoa_r+0x88e>
 8006662:	eeb1 7b47 	vneg.f64	d7, d7
 8006666:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800666a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666e:	f100 8260 	bmi.w	8006b32 <_dtoa_r+0x88a>
 8006672:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006678:	2a00      	cmp	r2, #0
 800667a:	f2c0 811d 	blt.w	80068b8 <_dtoa_r+0x610>
 800667e:	f1bb 0f0e 	cmp.w	fp, #14
 8006682:	f300 8119 	bgt.w	80068b8 <_dtoa_r+0x610>
 8006686:	4b8a      	ldr	r3, [pc, #552]	; (80068b0 <_dtoa_r+0x608>)
 8006688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800668c:	ed93 6b00 	vldr	d6, [r3]
 8006690:	9b08      	ldr	r3, [sp, #32]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f280 80b7 	bge.w	8006806 <_dtoa_r+0x55e>
 8006698:	f1b9 0f00 	cmp.w	r9, #0
 800669c:	f300 80b3 	bgt.w	8006806 <_dtoa_r+0x55e>
 80066a0:	f040 8246 	bne.w	8006b30 <_dtoa_r+0x888>
 80066a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80066a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80066ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b8:	464c      	mov	r4, r9
 80066ba:	464f      	mov	r7, r9
 80066bc:	f280 821c 	bge.w	8006af8 <_dtoa_r+0x850>
 80066c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80066c4:	2331      	movs	r3, #49	; 0x31
 80066c6:	f808 3b01 	strb.w	r3, [r8], #1
 80066ca:	f10b 0b01 	add.w	fp, fp, #1
 80066ce:	e218      	b.n	8006b02 <_dtoa_r+0x85a>
 80066d0:	2102      	movs	r1, #2
 80066d2:	e780      	b.n	80065d6 <_dtoa_r+0x32e>
 80066d4:	07d4      	lsls	r4, r2, #31
 80066d6:	d504      	bpl.n	80066e2 <_dtoa_r+0x43a>
 80066d8:	ed90 6b00 	vldr	d6, [r0]
 80066dc:	3101      	adds	r1, #1
 80066de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80066e2:	1052      	asrs	r2, r2, #1
 80066e4:	3008      	adds	r0, #8
 80066e6:	e777      	b.n	80065d8 <_dtoa_r+0x330>
 80066e8:	d022      	beq.n	8006730 <_dtoa_r+0x488>
 80066ea:	f1cb 0200 	rsb	r2, fp, #0
 80066ee:	4970      	ldr	r1, [pc, #448]	; (80068b0 <_dtoa_r+0x608>)
 80066f0:	f002 000f 	and.w	r0, r2, #15
 80066f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80066f8:	ed91 7b00 	vldr	d7, [r1]
 80066fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006700:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006704:	486b      	ldr	r0, [pc, #428]	; (80068b4 <_dtoa_r+0x60c>)
 8006706:	1112      	asrs	r2, r2, #4
 8006708:	2400      	movs	r4, #0
 800670a:	2102      	movs	r1, #2
 800670c:	b92a      	cbnz	r2, 800671a <_dtoa_r+0x472>
 800670e:	2c00      	cmp	r4, #0
 8006710:	f43f af6a 	beq.w	80065e8 <_dtoa_r+0x340>
 8006714:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006718:	e766      	b.n	80065e8 <_dtoa_r+0x340>
 800671a:	07d7      	lsls	r7, r2, #31
 800671c:	d505      	bpl.n	800672a <_dtoa_r+0x482>
 800671e:	ed90 6b00 	vldr	d6, [r0]
 8006722:	3101      	adds	r1, #1
 8006724:	2401      	movs	r4, #1
 8006726:	ee27 7b06 	vmul.f64	d7, d7, d6
 800672a:	1052      	asrs	r2, r2, #1
 800672c:	3008      	adds	r0, #8
 800672e:	e7ed      	b.n	800670c <_dtoa_r+0x464>
 8006730:	2102      	movs	r1, #2
 8006732:	e759      	b.n	80065e8 <_dtoa_r+0x340>
 8006734:	465a      	mov	r2, fp
 8006736:	464c      	mov	r4, r9
 8006738:	e775      	b.n	8006626 <_dtoa_r+0x37e>
 800673a:	ec41 0b17 	vmov	d7, r0, r1
 800673e:	495c      	ldr	r1, [pc, #368]	; (80068b0 <_dtoa_r+0x608>)
 8006740:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8006744:	ed11 4b02 	vldr	d4, [r1, #-8]
 8006748:	9901      	ldr	r1, [sp, #4]
 800674a:	440c      	add	r4, r1
 800674c:	9907      	ldr	r1, [sp, #28]
 800674e:	b351      	cbz	r1, 80067a6 <_dtoa_r+0x4fe>
 8006750:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006754:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006758:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800675c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006760:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006764:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006768:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800676c:	ee14 1a90 	vmov	r1, s9
 8006770:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006774:	3130      	adds	r1, #48	; 0x30
 8006776:	ee36 6b45 	vsub.f64	d6, d6, d5
 800677a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800677e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006782:	f808 1b01 	strb.w	r1, [r8], #1
 8006786:	d439      	bmi.n	80067fc <_dtoa_r+0x554>
 8006788:	ee32 5b46 	vsub.f64	d5, d2, d6
 800678c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006794:	d472      	bmi.n	800687c <_dtoa_r+0x5d4>
 8006796:	45a0      	cmp	r8, r4
 8006798:	f43f af6b 	beq.w	8006672 <_dtoa_r+0x3ca>
 800679c:	ee27 7b03 	vmul.f64	d7, d7, d3
 80067a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80067a4:	e7e0      	b.n	8006768 <_dtoa_r+0x4c0>
 80067a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80067aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80067ae:	4620      	mov	r0, r4
 80067b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80067b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80067b8:	ee14 1a90 	vmov	r1, s9
 80067bc:	3130      	adds	r1, #48	; 0x30
 80067be:	f808 1b01 	strb.w	r1, [r8], #1
 80067c2:	45a0      	cmp	r8, r4
 80067c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80067c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80067cc:	d118      	bne.n	8006800 <_dtoa_r+0x558>
 80067ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80067d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80067d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80067da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067de:	dc4d      	bgt.n	800687c <_dtoa_r+0x5d4>
 80067e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80067e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80067e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ec:	f57f af41 	bpl.w	8006672 <_dtoa_r+0x3ca>
 80067f0:	4680      	mov	r8, r0
 80067f2:	3801      	subs	r0, #1
 80067f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80067f8:	2b30      	cmp	r3, #48	; 0x30
 80067fa:	d0f9      	beq.n	80067f0 <_dtoa_r+0x548>
 80067fc:	4693      	mov	fp, r2
 80067fe:	e02a      	b.n	8006856 <_dtoa_r+0x5ae>
 8006800:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006804:	e7d6      	b.n	80067b4 <_dtoa_r+0x50c>
 8006806:	ed9d 7b02 	vldr	d7, [sp, #8]
 800680a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800680e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006812:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006816:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800681a:	ee15 3a10 	vmov	r3, s10
 800681e:	3330      	adds	r3, #48	; 0x30
 8006820:	f808 3b01 	strb.w	r3, [r8], #1
 8006824:	9b01      	ldr	r3, [sp, #4]
 8006826:	eba8 0303 	sub.w	r3, r8, r3
 800682a:	4599      	cmp	r9, r3
 800682c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006830:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006834:	d133      	bne.n	800689e <_dtoa_r+0x5f6>
 8006836:	ee37 7b07 	vadd.f64	d7, d7, d7
 800683a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800683e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006842:	dc1a      	bgt.n	800687a <_dtoa_r+0x5d2>
 8006844:	eeb4 7b46 	vcmp.f64	d7, d6
 8006848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800684c:	d103      	bne.n	8006856 <_dtoa_r+0x5ae>
 800684e:	ee15 3a10 	vmov	r3, s10
 8006852:	07d9      	lsls	r1, r3, #31
 8006854:	d411      	bmi.n	800687a <_dtoa_r+0x5d2>
 8006856:	4629      	mov	r1, r5
 8006858:	4630      	mov	r0, r6
 800685a:	f000 fbd1 	bl	8007000 <_Bfree>
 800685e:	2300      	movs	r3, #0
 8006860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006862:	f888 3000 	strb.w	r3, [r8]
 8006866:	f10b 0301 	add.w	r3, fp, #1
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800686e:	2b00      	cmp	r3, #0
 8006870:	f43f ad69 	beq.w	8006346 <_dtoa_r+0x9e>
 8006874:	f8c3 8000 	str.w	r8, [r3]
 8006878:	e565      	b.n	8006346 <_dtoa_r+0x9e>
 800687a:	465a      	mov	r2, fp
 800687c:	4643      	mov	r3, r8
 800687e:	4698      	mov	r8, r3
 8006880:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8006884:	2939      	cmp	r1, #57	; 0x39
 8006886:	d106      	bne.n	8006896 <_dtoa_r+0x5ee>
 8006888:	9901      	ldr	r1, [sp, #4]
 800688a:	4299      	cmp	r1, r3
 800688c:	d1f7      	bne.n	800687e <_dtoa_r+0x5d6>
 800688e:	9801      	ldr	r0, [sp, #4]
 8006890:	2130      	movs	r1, #48	; 0x30
 8006892:	3201      	adds	r2, #1
 8006894:	7001      	strb	r1, [r0, #0]
 8006896:	7819      	ldrb	r1, [r3, #0]
 8006898:	3101      	adds	r1, #1
 800689a:	7019      	strb	r1, [r3, #0]
 800689c:	e7ae      	b.n	80067fc <_dtoa_r+0x554>
 800689e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80068a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068aa:	d1b2      	bne.n	8006812 <_dtoa_r+0x56a>
 80068ac:	e7d3      	b.n	8006856 <_dtoa_r+0x5ae>
 80068ae:	bf00      	nop
 80068b0:	0802e6b8 	.word	0x0802e6b8
 80068b4:	0802e690 	.word	0x0802e690
 80068b8:	9907      	ldr	r1, [sp, #28]
 80068ba:	2900      	cmp	r1, #0
 80068bc:	f000 80d0 	beq.w	8006a60 <_dtoa_r+0x7b8>
 80068c0:	9906      	ldr	r1, [sp, #24]
 80068c2:	2901      	cmp	r1, #1
 80068c4:	f300 80b4 	bgt.w	8006a30 <_dtoa_r+0x788>
 80068c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ca:	2900      	cmp	r1, #0
 80068cc:	f000 80ac 	beq.w	8006a28 <_dtoa_r+0x780>
 80068d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80068d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80068d8:	461c      	mov	r4, r3
 80068da:	9309      	str	r3, [sp, #36]	; 0x24
 80068dc:	9b04      	ldr	r3, [sp, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	9304      	str	r3, [sp, #16]
 80068e2:	9b05      	ldr	r3, [sp, #20]
 80068e4:	2101      	movs	r1, #1
 80068e6:	4413      	add	r3, r2
 80068e8:	4630      	mov	r0, r6
 80068ea:	9305      	str	r3, [sp, #20]
 80068ec:	f000 fc3e 	bl	800716c <__i2b>
 80068f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f2:	4607      	mov	r7, r0
 80068f4:	f1b8 0f00 	cmp.w	r8, #0
 80068f8:	d00d      	beq.n	8006916 <_dtoa_r+0x66e>
 80068fa:	9a05      	ldr	r2, [sp, #20]
 80068fc:	2a00      	cmp	r2, #0
 80068fe:	dd0a      	ble.n	8006916 <_dtoa_r+0x66e>
 8006900:	4542      	cmp	r2, r8
 8006902:	9904      	ldr	r1, [sp, #16]
 8006904:	bfa8      	it	ge
 8006906:	4642      	movge	r2, r8
 8006908:	1a89      	subs	r1, r1, r2
 800690a:	9104      	str	r1, [sp, #16]
 800690c:	9905      	ldr	r1, [sp, #20]
 800690e:	eba8 0802 	sub.w	r8, r8, r2
 8006912:	1a8a      	subs	r2, r1, r2
 8006914:	9205      	str	r2, [sp, #20]
 8006916:	b303      	cbz	r3, 800695a <_dtoa_r+0x6b2>
 8006918:	9a07      	ldr	r2, [sp, #28]
 800691a:	2a00      	cmp	r2, #0
 800691c:	f000 80a5 	beq.w	8006a6a <_dtoa_r+0x7c2>
 8006920:	2c00      	cmp	r4, #0
 8006922:	dd13      	ble.n	800694c <_dtoa_r+0x6a4>
 8006924:	4639      	mov	r1, r7
 8006926:	4622      	mov	r2, r4
 8006928:	4630      	mov	r0, r6
 800692a:	930d      	str	r3, [sp, #52]	; 0x34
 800692c:	f000 fcde 	bl	80072ec <__pow5mult>
 8006930:	462a      	mov	r2, r5
 8006932:	4601      	mov	r1, r0
 8006934:	4607      	mov	r7, r0
 8006936:	4630      	mov	r0, r6
 8006938:	f000 fc2e 	bl	8007198 <__multiply>
 800693c:	4629      	mov	r1, r5
 800693e:	9009      	str	r0, [sp, #36]	; 0x24
 8006940:	4630      	mov	r0, r6
 8006942:	f000 fb5d 	bl	8007000 <_Bfree>
 8006946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694a:	4615      	mov	r5, r2
 800694c:	1b1a      	subs	r2, r3, r4
 800694e:	d004      	beq.n	800695a <_dtoa_r+0x6b2>
 8006950:	4629      	mov	r1, r5
 8006952:	4630      	mov	r0, r6
 8006954:	f000 fcca 	bl	80072ec <__pow5mult>
 8006958:	4605      	mov	r5, r0
 800695a:	2101      	movs	r1, #1
 800695c:	4630      	mov	r0, r6
 800695e:	f000 fc05 	bl	800716c <__i2b>
 8006962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	4604      	mov	r4, r0
 8006968:	f340 8081 	ble.w	8006a6e <_dtoa_r+0x7c6>
 800696c:	461a      	mov	r2, r3
 800696e:	4601      	mov	r1, r0
 8006970:	4630      	mov	r0, r6
 8006972:	f000 fcbb 	bl	80072ec <__pow5mult>
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	2b01      	cmp	r3, #1
 800697a:	4604      	mov	r4, r0
 800697c:	dd7a      	ble.n	8006a74 <_dtoa_r+0x7cc>
 800697e:	2300      	movs	r3, #0
 8006980:	9309      	str	r3, [sp, #36]	; 0x24
 8006982:	6922      	ldr	r2, [r4, #16]
 8006984:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006988:	6910      	ldr	r0, [r2, #16]
 800698a:	f000 fba1 	bl	80070d0 <__hi0bits>
 800698e:	f1c0 0020 	rsb	r0, r0, #32
 8006992:	9b05      	ldr	r3, [sp, #20]
 8006994:	4418      	add	r0, r3
 8006996:	f010 001f 	ands.w	r0, r0, #31
 800699a:	f000 8093 	beq.w	8006ac4 <_dtoa_r+0x81c>
 800699e:	f1c0 0220 	rsb	r2, r0, #32
 80069a2:	2a04      	cmp	r2, #4
 80069a4:	f340 8085 	ble.w	8006ab2 <_dtoa_r+0x80a>
 80069a8:	9b04      	ldr	r3, [sp, #16]
 80069aa:	f1c0 001c 	rsb	r0, r0, #28
 80069ae:	4403      	add	r3, r0
 80069b0:	9304      	str	r3, [sp, #16]
 80069b2:	9b05      	ldr	r3, [sp, #20]
 80069b4:	4480      	add	r8, r0
 80069b6:	4403      	add	r3, r0
 80069b8:	9305      	str	r3, [sp, #20]
 80069ba:	9b04      	ldr	r3, [sp, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dd05      	ble.n	80069cc <_dtoa_r+0x724>
 80069c0:	4629      	mov	r1, r5
 80069c2:	461a      	mov	r2, r3
 80069c4:	4630      	mov	r0, r6
 80069c6:	f000 fceb 	bl	80073a0 <__lshift>
 80069ca:	4605      	mov	r5, r0
 80069cc:	9b05      	ldr	r3, [sp, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dd05      	ble.n	80069de <_dtoa_r+0x736>
 80069d2:	4621      	mov	r1, r4
 80069d4:	461a      	mov	r2, r3
 80069d6:	4630      	mov	r0, r6
 80069d8:	f000 fce2 	bl	80073a0 <__lshift>
 80069dc:	4604      	mov	r4, r0
 80069de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d071      	beq.n	8006ac8 <_dtoa_r+0x820>
 80069e4:	4621      	mov	r1, r4
 80069e6:	4628      	mov	r0, r5
 80069e8:	f000 fd46 	bl	8007478 <__mcmp>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	da6b      	bge.n	8006ac8 <_dtoa_r+0x820>
 80069f0:	2300      	movs	r3, #0
 80069f2:	4629      	mov	r1, r5
 80069f4:	220a      	movs	r2, #10
 80069f6:	4630      	mov	r0, r6
 80069f8:	f000 fb24 	bl	8007044 <__multadd>
 80069fc:	9b07      	ldr	r3, [sp, #28]
 80069fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a02:	4605      	mov	r5, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8197 	beq.w	8006d38 <_dtoa_r+0xa90>
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	220a      	movs	r2, #10
 8006a10:	4630      	mov	r0, r6
 8006a12:	f000 fb17 	bl	8007044 <__multadd>
 8006a16:	f1ba 0f00 	cmp.w	sl, #0
 8006a1a:	4607      	mov	r7, r0
 8006a1c:	f300 8093 	bgt.w	8006b46 <_dtoa_r+0x89e>
 8006a20:	9b06      	ldr	r3, [sp, #24]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	dc57      	bgt.n	8006ad6 <_dtoa_r+0x82e>
 8006a26:	e08e      	b.n	8006b46 <_dtoa_r+0x89e>
 8006a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a2e:	e751      	b.n	80068d4 <_dtoa_r+0x62c>
 8006a30:	f109 34ff 	add.w	r4, r9, #4294967295
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	bfbf      	itttt	lt
 8006a38:	1ae2      	sublt	r2, r4, r3
 8006a3a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a3c:	189b      	addlt	r3, r3, r2
 8006a3e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006a40:	bfae      	itee	ge
 8006a42:	1b1c      	subge	r4, r3, r4
 8006a44:	4623      	movlt	r3, r4
 8006a46:	2400      	movlt	r4, #0
 8006a48:	f1b9 0f00 	cmp.w	r9, #0
 8006a4c:	bfb5      	itete	lt
 8006a4e:	9a04      	ldrlt	r2, [sp, #16]
 8006a50:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006a54:	eba2 0809 	sublt.w	r8, r2, r9
 8006a58:	464a      	movge	r2, r9
 8006a5a:	bfb8      	it	lt
 8006a5c:	2200      	movlt	r2, #0
 8006a5e:	e73c      	b.n	80068da <_dtoa_r+0x632>
 8006a60:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006a64:	9f07      	ldr	r7, [sp, #28]
 8006a66:	461c      	mov	r4, r3
 8006a68:	e744      	b.n	80068f4 <_dtoa_r+0x64c>
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	e770      	b.n	8006950 <_dtoa_r+0x6a8>
 8006a6e:	9b06      	ldr	r3, [sp, #24]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	dc18      	bgt.n	8006aa6 <_dtoa_r+0x7fe>
 8006a74:	9b02      	ldr	r3, [sp, #8]
 8006a76:	b9b3      	cbnz	r3, 8006aa6 <_dtoa_r+0x7fe>
 8006a78:	9b03      	ldr	r3, [sp, #12]
 8006a7a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006a7e:	b9a2      	cbnz	r2, 8006aaa <_dtoa_r+0x802>
 8006a80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a84:	0d12      	lsrs	r2, r2, #20
 8006a86:	0512      	lsls	r2, r2, #20
 8006a88:	b18a      	cbz	r2, 8006aae <_dtoa_r+0x806>
 8006a8a:	9b04      	ldr	r3, [sp, #16]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	9304      	str	r3, [sp, #16]
 8006a90:	9b05      	ldr	r3, [sp, #20]
 8006a92:	3301      	adds	r3, #1
 8006a94:	9305      	str	r3, [sp, #20]
 8006a96:	2301      	movs	r3, #1
 8006a98:	9309      	str	r3, [sp, #36]	; 0x24
 8006a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f47f af70 	bne.w	8006982 <_dtoa_r+0x6da>
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	e775      	b.n	8006992 <_dtoa_r+0x6ea>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e7f6      	b.n	8006a98 <_dtoa_r+0x7f0>
 8006aaa:	9b02      	ldr	r3, [sp, #8]
 8006aac:	e7f4      	b.n	8006a98 <_dtoa_r+0x7f0>
 8006aae:	9209      	str	r2, [sp, #36]	; 0x24
 8006ab0:	e7f3      	b.n	8006a9a <_dtoa_r+0x7f2>
 8006ab2:	d082      	beq.n	80069ba <_dtoa_r+0x712>
 8006ab4:	9b04      	ldr	r3, [sp, #16]
 8006ab6:	321c      	adds	r2, #28
 8006ab8:	4413      	add	r3, r2
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	9b05      	ldr	r3, [sp, #20]
 8006abe:	4490      	add	r8, r2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	e779      	b.n	80069b8 <_dtoa_r+0x710>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	e7f5      	b.n	8006ab4 <_dtoa_r+0x80c>
 8006ac8:	f1b9 0f00 	cmp.w	r9, #0
 8006acc:	dc36      	bgt.n	8006b3c <_dtoa_r+0x894>
 8006ace:	9b06      	ldr	r3, [sp, #24]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	dd33      	ble.n	8006b3c <_dtoa_r+0x894>
 8006ad4:	46ca      	mov	sl, r9
 8006ad6:	f1ba 0f00 	cmp.w	sl, #0
 8006ada:	d10d      	bne.n	8006af8 <_dtoa_r+0x850>
 8006adc:	4621      	mov	r1, r4
 8006ade:	4653      	mov	r3, sl
 8006ae0:	2205      	movs	r2, #5
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f000 faae 	bl	8007044 <__multadd>
 8006ae8:	4601      	mov	r1, r0
 8006aea:	4604      	mov	r4, r0
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 fcc3 	bl	8007478 <__mcmp>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f73f ade4 	bgt.w	80066c0 <_dtoa_r+0x418>
 8006af8:	9b08      	ldr	r3, [sp, #32]
 8006afa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006afe:	ea6f 0b03 	mvn.w	fp, r3
 8006b02:	f04f 0900 	mov.w	r9, #0
 8006b06:	4621      	mov	r1, r4
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f000 fa79 	bl	8007000 <_Bfree>
 8006b0e:	2f00      	cmp	r7, #0
 8006b10:	f43f aea1 	beq.w	8006856 <_dtoa_r+0x5ae>
 8006b14:	f1b9 0f00 	cmp.w	r9, #0
 8006b18:	d005      	beq.n	8006b26 <_dtoa_r+0x87e>
 8006b1a:	45b9      	cmp	r9, r7
 8006b1c:	d003      	beq.n	8006b26 <_dtoa_r+0x87e>
 8006b1e:	4649      	mov	r1, r9
 8006b20:	4630      	mov	r0, r6
 8006b22:	f000 fa6d 	bl	8007000 <_Bfree>
 8006b26:	4639      	mov	r1, r7
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f000 fa69 	bl	8007000 <_Bfree>
 8006b2e:	e692      	b.n	8006856 <_dtoa_r+0x5ae>
 8006b30:	2400      	movs	r4, #0
 8006b32:	4627      	mov	r7, r4
 8006b34:	e7e0      	b.n	8006af8 <_dtoa_r+0x850>
 8006b36:	4693      	mov	fp, r2
 8006b38:	4627      	mov	r7, r4
 8006b3a:	e5c1      	b.n	80066c0 <_dtoa_r+0x418>
 8006b3c:	9b07      	ldr	r3, [sp, #28]
 8006b3e:	46ca      	mov	sl, r9
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8100 	beq.w	8006d46 <_dtoa_r+0xa9e>
 8006b46:	f1b8 0f00 	cmp.w	r8, #0
 8006b4a:	dd05      	ble.n	8006b58 <_dtoa_r+0x8b0>
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4642      	mov	r2, r8
 8006b50:	4630      	mov	r0, r6
 8006b52:	f000 fc25 	bl	80073a0 <__lshift>
 8006b56:	4607      	mov	r7, r0
 8006b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d05d      	beq.n	8006c1a <_dtoa_r+0x972>
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	4630      	mov	r0, r6
 8006b62:	f000 fa0d 	bl	8006f80 <_Balloc>
 8006b66:	4680      	mov	r8, r0
 8006b68:	b928      	cbnz	r0, 8006b76 <_dtoa_r+0x8ce>
 8006b6a:	4b82      	ldr	r3, [pc, #520]	; (8006d74 <_dtoa_r+0xacc>)
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006b72:	f7ff bbb1 	b.w	80062d8 <_dtoa_r+0x30>
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	3202      	adds	r2, #2
 8006b7a:	0092      	lsls	r2, r2, #2
 8006b7c:	f107 010c 	add.w	r1, r7, #12
 8006b80:	300c      	adds	r0, #12
 8006b82:	f001 fb3d 	bl	8008200 <memcpy>
 8006b86:	2201      	movs	r2, #1
 8006b88:	4641      	mov	r1, r8
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f000 fc08 	bl	80073a0 <__lshift>
 8006b90:	9b01      	ldr	r3, [sp, #4]
 8006b92:	3301      	adds	r3, #1
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	4453      	add	r3, sl
 8006b9a:	9308      	str	r3, [sp, #32]
 8006b9c:	9b02      	ldr	r3, [sp, #8]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	46b9      	mov	r9, r7
 8006ba4:	9307      	str	r3, [sp, #28]
 8006ba6:	4607      	mov	r7, r0
 8006ba8:	9b04      	ldr	r3, [sp, #16]
 8006baa:	4621      	mov	r1, r4
 8006bac:	3b01      	subs	r3, #1
 8006bae:	4628      	mov	r0, r5
 8006bb0:	9302      	str	r3, [sp, #8]
 8006bb2:	f7ff faef 	bl	8006194 <quorem>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	3330      	adds	r3, #48	; 0x30
 8006bba:	9005      	str	r0, [sp, #20]
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc2:	f000 fc59 	bl	8007478 <__mcmp>
 8006bc6:	463a      	mov	r2, r7
 8006bc8:	4682      	mov	sl, r0
 8006bca:	4621      	mov	r1, r4
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f000 fc6f 	bl	80074b0 <__mdiff>
 8006bd2:	68c2      	ldr	r2, [r0, #12]
 8006bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd6:	4680      	mov	r8, r0
 8006bd8:	bb0a      	cbnz	r2, 8006c1e <_dtoa_r+0x976>
 8006bda:	4601      	mov	r1, r0
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f000 fc4b 	bl	8007478 <__mcmp>
 8006be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be4:	4602      	mov	r2, r0
 8006be6:	4641      	mov	r1, r8
 8006be8:	4630      	mov	r0, r6
 8006bea:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006bee:	f000 fa07 	bl	8007000 <_Bfree>
 8006bf2:	9b06      	ldr	r3, [sp, #24]
 8006bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006bfa:	ea43 0102 	orr.w	r1, r3, r2
 8006bfe:	9b07      	ldr	r3, [sp, #28]
 8006c00:	4319      	orrs	r1, r3
 8006c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c04:	d10d      	bne.n	8006c22 <_dtoa_r+0x97a>
 8006c06:	2b39      	cmp	r3, #57	; 0x39
 8006c08:	d029      	beq.n	8006c5e <_dtoa_r+0x9b6>
 8006c0a:	f1ba 0f00 	cmp.w	sl, #0
 8006c0e:	dd01      	ble.n	8006c14 <_dtoa_r+0x96c>
 8006c10:	9b05      	ldr	r3, [sp, #20]
 8006c12:	3331      	adds	r3, #49	; 0x31
 8006c14:	9a02      	ldr	r2, [sp, #8]
 8006c16:	7013      	strb	r3, [r2, #0]
 8006c18:	e775      	b.n	8006b06 <_dtoa_r+0x85e>
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	e7b8      	b.n	8006b90 <_dtoa_r+0x8e8>
 8006c1e:	2201      	movs	r2, #1
 8006c20:	e7e1      	b.n	8006be6 <_dtoa_r+0x93e>
 8006c22:	f1ba 0f00 	cmp.w	sl, #0
 8006c26:	db06      	blt.n	8006c36 <_dtoa_r+0x98e>
 8006c28:	9906      	ldr	r1, [sp, #24]
 8006c2a:	ea41 0a0a 	orr.w	sl, r1, sl
 8006c2e:	9907      	ldr	r1, [sp, #28]
 8006c30:	ea5a 0a01 	orrs.w	sl, sl, r1
 8006c34:	d120      	bne.n	8006c78 <_dtoa_r+0x9d0>
 8006c36:	2a00      	cmp	r2, #0
 8006c38:	ddec      	ble.n	8006c14 <_dtoa_r+0x96c>
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	4630      	mov	r0, r6
 8006c40:	9304      	str	r3, [sp, #16]
 8006c42:	f000 fbad 	bl	80073a0 <__lshift>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4605      	mov	r5, r0
 8006c4a:	f000 fc15 	bl	8007478 <__mcmp>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	9b04      	ldr	r3, [sp, #16]
 8006c52:	dc02      	bgt.n	8006c5a <_dtoa_r+0x9b2>
 8006c54:	d1de      	bne.n	8006c14 <_dtoa_r+0x96c>
 8006c56:	07da      	lsls	r2, r3, #31
 8006c58:	d5dc      	bpl.n	8006c14 <_dtoa_r+0x96c>
 8006c5a:	2b39      	cmp	r3, #57	; 0x39
 8006c5c:	d1d8      	bne.n	8006c10 <_dtoa_r+0x968>
 8006c5e:	9a02      	ldr	r2, [sp, #8]
 8006c60:	2339      	movs	r3, #57	; 0x39
 8006c62:	7013      	strb	r3, [r2, #0]
 8006c64:	4643      	mov	r3, r8
 8006c66:	4698      	mov	r8, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006c6e:	2a39      	cmp	r2, #57	; 0x39
 8006c70:	d051      	beq.n	8006d16 <_dtoa_r+0xa6e>
 8006c72:	3201      	adds	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	e746      	b.n	8006b06 <_dtoa_r+0x85e>
 8006c78:	2a00      	cmp	r2, #0
 8006c7a:	dd03      	ble.n	8006c84 <_dtoa_r+0x9dc>
 8006c7c:	2b39      	cmp	r3, #57	; 0x39
 8006c7e:	d0ee      	beq.n	8006c5e <_dtoa_r+0x9b6>
 8006c80:	3301      	adds	r3, #1
 8006c82:	e7c7      	b.n	8006c14 <_dtoa_r+0x96c>
 8006c84:	9a04      	ldr	r2, [sp, #16]
 8006c86:	9908      	ldr	r1, [sp, #32]
 8006c88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c8c:	428a      	cmp	r2, r1
 8006c8e:	d02b      	beq.n	8006ce8 <_dtoa_r+0xa40>
 8006c90:	4629      	mov	r1, r5
 8006c92:	2300      	movs	r3, #0
 8006c94:	220a      	movs	r2, #10
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 f9d4 	bl	8007044 <__multadd>
 8006c9c:	45b9      	cmp	r9, r7
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	f04f 020a 	mov.w	r2, #10
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4630      	mov	r0, r6
 8006cac:	d107      	bne.n	8006cbe <_dtoa_r+0xa16>
 8006cae:	f000 f9c9 	bl	8007044 <__multadd>
 8006cb2:	4681      	mov	r9, r0
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	9b04      	ldr	r3, [sp, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	9304      	str	r3, [sp, #16]
 8006cbc:	e774      	b.n	8006ba8 <_dtoa_r+0x900>
 8006cbe:	f000 f9c1 	bl	8007044 <__multadd>
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	4681      	mov	r9, r0
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	220a      	movs	r2, #10
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f000 f9ba 	bl	8007044 <__multadd>
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	e7f0      	b.n	8006cb6 <_dtoa_r+0xa0e>
 8006cd4:	f1ba 0f00 	cmp.w	sl, #0
 8006cd8:	9a01      	ldr	r2, [sp, #4]
 8006cda:	bfcc      	ite	gt
 8006cdc:	46d0      	movgt	r8, sl
 8006cde:	f04f 0801 	movle.w	r8, #1
 8006ce2:	4490      	add	r8, r2
 8006ce4:	f04f 0900 	mov.w	r9, #0
 8006ce8:	4629      	mov	r1, r5
 8006cea:	2201      	movs	r2, #1
 8006cec:	4630      	mov	r0, r6
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	f000 fb56 	bl	80073a0 <__lshift>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	f000 fbbe 	bl	8007478 <__mcmp>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	dcb1      	bgt.n	8006c64 <_dtoa_r+0x9bc>
 8006d00:	d102      	bne.n	8006d08 <_dtoa_r+0xa60>
 8006d02:	9b02      	ldr	r3, [sp, #8]
 8006d04:	07db      	lsls	r3, r3, #31
 8006d06:	d4ad      	bmi.n	8006c64 <_dtoa_r+0x9bc>
 8006d08:	4643      	mov	r3, r8
 8006d0a:	4698      	mov	r8, r3
 8006d0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d10:	2a30      	cmp	r2, #48	; 0x30
 8006d12:	d0fa      	beq.n	8006d0a <_dtoa_r+0xa62>
 8006d14:	e6f7      	b.n	8006b06 <_dtoa_r+0x85e>
 8006d16:	9a01      	ldr	r2, [sp, #4]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d1a4      	bne.n	8006c66 <_dtoa_r+0x9be>
 8006d1c:	f10b 0b01 	add.w	fp, fp, #1
 8006d20:	2331      	movs	r3, #49	; 0x31
 8006d22:	e778      	b.n	8006c16 <_dtoa_r+0x96e>
 8006d24:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <_dtoa_r+0xad0>)
 8006d26:	f7ff bb2a 	b.w	800637e <_dtoa_r+0xd6>
 8006d2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f47f ab05 	bne.w	800633c <_dtoa_r+0x94>
 8006d32:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <_dtoa_r+0xad4>)
 8006d34:	f7ff bb23 	b.w	800637e <_dtoa_r+0xd6>
 8006d38:	f1ba 0f00 	cmp.w	sl, #0
 8006d3c:	dc03      	bgt.n	8006d46 <_dtoa_r+0xa9e>
 8006d3e:	9b06      	ldr	r3, [sp, #24]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	f73f aec8 	bgt.w	8006ad6 <_dtoa_r+0x82e>
 8006d46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f7ff fa21 	bl	8006194 <quorem>
 8006d52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d56:	f808 3b01 	strb.w	r3, [r8], #1
 8006d5a:	9a01      	ldr	r2, [sp, #4]
 8006d5c:	eba8 0202 	sub.w	r2, r8, r2
 8006d60:	4592      	cmp	sl, r2
 8006d62:	ddb7      	ble.n	8006cd4 <_dtoa_r+0xa2c>
 8006d64:	4629      	mov	r1, r5
 8006d66:	2300      	movs	r3, #0
 8006d68:	220a      	movs	r2, #10
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 f96a 	bl	8007044 <__multadd>
 8006d70:	4605      	mov	r5, r0
 8006d72:	e7ea      	b.n	8006d4a <_dtoa_r+0xaa2>
 8006d74:	0802e622 	.word	0x0802e622
 8006d78:	0802e7b3 	.word	0x0802e7b3
 8006d7c:	0802e5a6 	.word	0x0802e5a6

08006d80 <_free_r>:
 8006d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d82:	2900      	cmp	r1, #0
 8006d84:	d044      	beq.n	8006e10 <_free_r+0x90>
 8006d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d8a:	9001      	str	r0, [sp, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d92:	bfb8      	it	lt
 8006d94:	18e4      	addlt	r4, r4, r3
 8006d96:	f000 f8e7 	bl	8006f68 <__malloc_lock>
 8006d9a:	4a1e      	ldr	r2, [pc, #120]	; (8006e14 <_free_r+0x94>)
 8006d9c:	9801      	ldr	r0, [sp, #4]
 8006d9e:	6813      	ldr	r3, [r2, #0]
 8006da0:	b933      	cbnz	r3, 8006db0 <_free_r+0x30>
 8006da2:	6063      	str	r3, [r4, #4]
 8006da4:	6014      	str	r4, [r2, #0]
 8006da6:	b003      	add	sp, #12
 8006da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dac:	f000 b8e2 	b.w	8006f74 <__malloc_unlock>
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d908      	bls.n	8006dc6 <_free_r+0x46>
 8006db4:	6825      	ldr	r5, [r4, #0]
 8006db6:	1961      	adds	r1, r4, r5
 8006db8:	428b      	cmp	r3, r1
 8006dba:	bf01      	itttt	eq
 8006dbc:	6819      	ldreq	r1, [r3, #0]
 8006dbe:	685b      	ldreq	r3, [r3, #4]
 8006dc0:	1949      	addeq	r1, r1, r5
 8006dc2:	6021      	streq	r1, [r4, #0]
 8006dc4:	e7ed      	b.n	8006da2 <_free_r+0x22>
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	b10b      	cbz	r3, 8006dd0 <_free_r+0x50>
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	d9fa      	bls.n	8006dc6 <_free_r+0x46>
 8006dd0:	6811      	ldr	r1, [r2, #0]
 8006dd2:	1855      	adds	r5, r2, r1
 8006dd4:	42a5      	cmp	r5, r4
 8006dd6:	d10b      	bne.n	8006df0 <_free_r+0x70>
 8006dd8:	6824      	ldr	r4, [r4, #0]
 8006dda:	4421      	add	r1, r4
 8006ddc:	1854      	adds	r4, r2, r1
 8006dde:	42a3      	cmp	r3, r4
 8006de0:	6011      	str	r1, [r2, #0]
 8006de2:	d1e0      	bne.n	8006da6 <_free_r+0x26>
 8006de4:	681c      	ldr	r4, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	6053      	str	r3, [r2, #4]
 8006dea:	440c      	add	r4, r1
 8006dec:	6014      	str	r4, [r2, #0]
 8006dee:	e7da      	b.n	8006da6 <_free_r+0x26>
 8006df0:	d902      	bls.n	8006df8 <_free_r+0x78>
 8006df2:	230c      	movs	r3, #12
 8006df4:	6003      	str	r3, [r0, #0]
 8006df6:	e7d6      	b.n	8006da6 <_free_r+0x26>
 8006df8:	6825      	ldr	r5, [r4, #0]
 8006dfa:	1961      	adds	r1, r4, r5
 8006dfc:	428b      	cmp	r3, r1
 8006dfe:	bf04      	itt	eq
 8006e00:	6819      	ldreq	r1, [r3, #0]
 8006e02:	685b      	ldreq	r3, [r3, #4]
 8006e04:	6063      	str	r3, [r4, #4]
 8006e06:	bf04      	itt	eq
 8006e08:	1949      	addeq	r1, r1, r5
 8006e0a:	6021      	streq	r1, [r4, #0]
 8006e0c:	6054      	str	r4, [r2, #4]
 8006e0e:	e7ca      	b.n	8006da6 <_free_r+0x26>
 8006e10:	b003      	add	sp, #12
 8006e12:	bd30      	pop	{r4, r5, pc}
 8006e14:	200005c4 	.word	0x200005c4

08006e18 <malloc>:
 8006e18:	4b02      	ldr	r3, [pc, #8]	; (8006e24 <malloc+0xc>)
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	f000 b823 	b.w	8006e68 <_malloc_r>
 8006e22:	bf00      	nop
 8006e24:	20000068 	.word	0x20000068

08006e28 <sbrk_aligned>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4e0e      	ldr	r6, [pc, #56]	; (8006e64 <sbrk_aligned+0x3c>)
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	6831      	ldr	r1, [r6, #0]
 8006e30:	4605      	mov	r5, r0
 8006e32:	b911      	cbnz	r1, 8006e3a <sbrk_aligned+0x12>
 8006e34:	f001 f9d4 	bl	80081e0 <_sbrk_r>
 8006e38:	6030      	str	r0, [r6, #0]
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f001 f9cf 	bl	80081e0 <_sbrk_r>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d00a      	beq.n	8006e5c <sbrk_aligned+0x34>
 8006e46:	1cc4      	adds	r4, r0, #3
 8006e48:	f024 0403 	bic.w	r4, r4, #3
 8006e4c:	42a0      	cmp	r0, r4
 8006e4e:	d007      	beq.n	8006e60 <sbrk_aligned+0x38>
 8006e50:	1a21      	subs	r1, r4, r0
 8006e52:	4628      	mov	r0, r5
 8006e54:	f001 f9c4 	bl	80081e0 <_sbrk_r>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d101      	bne.n	8006e60 <sbrk_aligned+0x38>
 8006e5c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e60:	4620      	mov	r0, r4
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	200005c8 	.word	0x200005c8

08006e68 <_malloc_r>:
 8006e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e6c:	1ccd      	adds	r5, r1, #3
 8006e6e:	f025 0503 	bic.w	r5, r5, #3
 8006e72:	3508      	adds	r5, #8
 8006e74:	2d0c      	cmp	r5, #12
 8006e76:	bf38      	it	cc
 8006e78:	250c      	movcc	r5, #12
 8006e7a:	2d00      	cmp	r5, #0
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	db01      	blt.n	8006e84 <_malloc_r+0x1c>
 8006e80:	42a9      	cmp	r1, r5
 8006e82:	d905      	bls.n	8006e90 <_malloc_r+0x28>
 8006e84:	230c      	movs	r3, #12
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	2600      	movs	r6, #0
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f64 <_malloc_r+0xfc>
 8006e94:	f000 f868 	bl	8006f68 <__malloc_lock>
 8006e98:	f8d8 3000 	ldr.w	r3, [r8]
 8006e9c:	461c      	mov	r4, r3
 8006e9e:	bb5c      	cbnz	r4, 8006ef8 <_malloc_r+0x90>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	f7ff ffc0 	bl	8006e28 <sbrk_aligned>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	4604      	mov	r4, r0
 8006eac:	d155      	bne.n	8006f5a <_malloc_r+0xf2>
 8006eae:	f8d8 4000 	ldr.w	r4, [r8]
 8006eb2:	4626      	mov	r6, r4
 8006eb4:	2e00      	cmp	r6, #0
 8006eb6:	d145      	bne.n	8006f44 <_malloc_r+0xdc>
 8006eb8:	2c00      	cmp	r4, #0
 8006eba:	d048      	beq.n	8006f4e <_malloc_r+0xe6>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	eb04 0903 	add.w	r9, r4, r3
 8006ec6:	f001 f98b 	bl	80081e0 <_sbrk_r>
 8006eca:	4581      	cmp	r9, r0
 8006ecc:	d13f      	bne.n	8006f4e <_malloc_r+0xe6>
 8006ece:	6821      	ldr	r1, [r4, #0]
 8006ed0:	1a6d      	subs	r5, r5, r1
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff ffa7 	bl	8006e28 <sbrk_aligned>
 8006eda:	3001      	adds	r0, #1
 8006edc:	d037      	beq.n	8006f4e <_malloc_r+0xe6>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	442b      	add	r3, r5
 8006ee2:	6023      	str	r3, [r4, #0]
 8006ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d038      	beq.n	8006f5e <_malloc_r+0xf6>
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	42a2      	cmp	r2, r4
 8006ef0:	d12b      	bne.n	8006f4a <_malloc_r+0xe2>
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	605a      	str	r2, [r3, #4]
 8006ef6:	e00f      	b.n	8006f18 <_malloc_r+0xb0>
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	1b52      	subs	r2, r2, r5
 8006efc:	d41f      	bmi.n	8006f3e <_malloc_r+0xd6>
 8006efe:	2a0b      	cmp	r2, #11
 8006f00:	d917      	bls.n	8006f32 <_malloc_r+0xca>
 8006f02:	1961      	adds	r1, r4, r5
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	6025      	str	r5, [r4, #0]
 8006f08:	bf18      	it	ne
 8006f0a:	6059      	strne	r1, [r3, #4]
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	bf08      	it	eq
 8006f10:	f8c8 1000 	streq.w	r1, [r8]
 8006f14:	5162      	str	r2, [r4, r5]
 8006f16:	604b      	str	r3, [r1, #4]
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f104 060b 	add.w	r6, r4, #11
 8006f1e:	f000 f829 	bl	8006f74 <__malloc_unlock>
 8006f22:	f026 0607 	bic.w	r6, r6, #7
 8006f26:	1d23      	adds	r3, r4, #4
 8006f28:	1af2      	subs	r2, r6, r3
 8006f2a:	d0ae      	beq.n	8006e8a <_malloc_r+0x22>
 8006f2c:	1b9b      	subs	r3, r3, r6
 8006f2e:	50a3      	str	r3, [r4, r2]
 8006f30:	e7ab      	b.n	8006e8a <_malloc_r+0x22>
 8006f32:	42a3      	cmp	r3, r4
 8006f34:	6862      	ldr	r2, [r4, #4]
 8006f36:	d1dd      	bne.n	8006ef4 <_malloc_r+0x8c>
 8006f38:	f8c8 2000 	str.w	r2, [r8]
 8006f3c:	e7ec      	b.n	8006f18 <_malloc_r+0xb0>
 8006f3e:	4623      	mov	r3, r4
 8006f40:	6864      	ldr	r4, [r4, #4]
 8006f42:	e7ac      	b.n	8006e9e <_malloc_r+0x36>
 8006f44:	4634      	mov	r4, r6
 8006f46:	6876      	ldr	r6, [r6, #4]
 8006f48:	e7b4      	b.n	8006eb4 <_malloc_r+0x4c>
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	e7cc      	b.n	8006ee8 <_malloc_r+0x80>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4638      	mov	r0, r7
 8006f54:	f000 f80e 	bl	8006f74 <__malloc_unlock>
 8006f58:	e797      	b.n	8006e8a <_malloc_r+0x22>
 8006f5a:	6025      	str	r5, [r4, #0]
 8006f5c:	e7dc      	b.n	8006f18 <_malloc_r+0xb0>
 8006f5e:	605b      	str	r3, [r3, #4]
 8006f60:	deff      	udf	#255	; 0xff
 8006f62:	bf00      	nop
 8006f64:	200005c4 	.word	0x200005c4

08006f68 <__malloc_lock>:
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <__malloc_lock+0x8>)
 8006f6a:	f7ff b911 	b.w	8006190 <__retarget_lock_acquire_recursive>
 8006f6e:	bf00      	nop
 8006f70:	200005c0 	.word	0x200005c0

08006f74 <__malloc_unlock>:
 8006f74:	4801      	ldr	r0, [pc, #4]	; (8006f7c <__malloc_unlock+0x8>)
 8006f76:	f7ff b90c 	b.w	8006192 <__retarget_lock_release_recursive>
 8006f7a:	bf00      	nop
 8006f7c:	200005c0 	.word	0x200005c0

08006f80 <_Balloc>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	69c6      	ldr	r6, [r0, #28]
 8006f84:	4604      	mov	r4, r0
 8006f86:	460d      	mov	r5, r1
 8006f88:	b976      	cbnz	r6, 8006fa8 <_Balloc+0x28>
 8006f8a:	2010      	movs	r0, #16
 8006f8c:	f7ff ff44 	bl	8006e18 <malloc>
 8006f90:	4602      	mov	r2, r0
 8006f92:	61e0      	str	r0, [r4, #28]
 8006f94:	b920      	cbnz	r0, 8006fa0 <_Balloc+0x20>
 8006f96:	4b18      	ldr	r3, [pc, #96]	; (8006ff8 <_Balloc+0x78>)
 8006f98:	4818      	ldr	r0, [pc, #96]	; (8006ffc <_Balloc+0x7c>)
 8006f9a:	216b      	movs	r1, #107	; 0x6b
 8006f9c:	f001 f93e 	bl	800821c <__assert_func>
 8006fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fa4:	6006      	str	r6, [r0, #0]
 8006fa6:	60c6      	str	r6, [r0, #12]
 8006fa8:	69e6      	ldr	r6, [r4, #28]
 8006faa:	68f3      	ldr	r3, [r6, #12]
 8006fac:	b183      	cbz	r3, 8006fd0 <_Balloc+0x50>
 8006fae:	69e3      	ldr	r3, [r4, #28]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fb6:	b9b8      	cbnz	r0, 8006fe8 <_Balloc+0x68>
 8006fb8:	2101      	movs	r1, #1
 8006fba:	fa01 f605 	lsl.w	r6, r1, r5
 8006fbe:	1d72      	adds	r2, r6, #5
 8006fc0:	0092      	lsls	r2, r2, #2
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f001 f948 	bl	8008258 <_calloc_r>
 8006fc8:	b160      	cbz	r0, 8006fe4 <_Balloc+0x64>
 8006fca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fce:	e00e      	b.n	8006fee <_Balloc+0x6e>
 8006fd0:	2221      	movs	r2, #33	; 0x21
 8006fd2:	2104      	movs	r1, #4
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f001 f93f 	bl	8008258 <_calloc_r>
 8006fda:	69e3      	ldr	r3, [r4, #28]
 8006fdc:	60f0      	str	r0, [r6, #12]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e4      	bne.n	8006fae <_Balloc+0x2e>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}
 8006fe8:	6802      	ldr	r2, [r0, #0]
 8006fea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ff4:	e7f7      	b.n	8006fe6 <_Balloc+0x66>
 8006ff6:	bf00      	nop
 8006ff8:	0802e5b3 	.word	0x0802e5b3
 8006ffc:	0802e633 	.word	0x0802e633

08007000 <_Bfree>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	69c6      	ldr	r6, [r0, #28]
 8007004:	4605      	mov	r5, r0
 8007006:	460c      	mov	r4, r1
 8007008:	b976      	cbnz	r6, 8007028 <_Bfree+0x28>
 800700a:	2010      	movs	r0, #16
 800700c:	f7ff ff04 	bl	8006e18 <malloc>
 8007010:	4602      	mov	r2, r0
 8007012:	61e8      	str	r0, [r5, #28]
 8007014:	b920      	cbnz	r0, 8007020 <_Bfree+0x20>
 8007016:	4b09      	ldr	r3, [pc, #36]	; (800703c <_Bfree+0x3c>)
 8007018:	4809      	ldr	r0, [pc, #36]	; (8007040 <_Bfree+0x40>)
 800701a:	218f      	movs	r1, #143	; 0x8f
 800701c:	f001 f8fe 	bl	800821c <__assert_func>
 8007020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007024:	6006      	str	r6, [r0, #0]
 8007026:	60c6      	str	r6, [r0, #12]
 8007028:	b13c      	cbz	r4, 800703a <_Bfree+0x3a>
 800702a:	69eb      	ldr	r3, [r5, #28]
 800702c:	6862      	ldr	r2, [r4, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007034:	6021      	str	r1, [r4, #0]
 8007036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	0802e5b3 	.word	0x0802e5b3
 8007040:	0802e633 	.word	0x0802e633

08007044 <__multadd>:
 8007044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007048:	690d      	ldr	r5, [r1, #16]
 800704a:	4607      	mov	r7, r0
 800704c:	460c      	mov	r4, r1
 800704e:	461e      	mov	r6, r3
 8007050:	f101 0c14 	add.w	ip, r1, #20
 8007054:	2000      	movs	r0, #0
 8007056:	f8dc 3000 	ldr.w	r3, [ip]
 800705a:	b299      	uxth	r1, r3
 800705c:	fb02 6101 	mla	r1, r2, r1, r6
 8007060:	0c1e      	lsrs	r6, r3, #16
 8007062:	0c0b      	lsrs	r3, r1, #16
 8007064:	fb02 3306 	mla	r3, r2, r6, r3
 8007068:	b289      	uxth	r1, r1
 800706a:	3001      	adds	r0, #1
 800706c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007070:	4285      	cmp	r5, r0
 8007072:	f84c 1b04 	str.w	r1, [ip], #4
 8007076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800707a:	dcec      	bgt.n	8007056 <__multadd+0x12>
 800707c:	b30e      	cbz	r6, 80070c2 <__multadd+0x7e>
 800707e:	68a3      	ldr	r3, [r4, #8]
 8007080:	42ab      	cmp	r3, r5
 8007082:	dc19      	bgt.n	80070b8 <__multadd+0x74>
 8007084:	6861      	ldr	r1, [r4, #4]
 8007086:	4638      	mov	r0, r7
 8007088:	3101      	adds	r1, #1
 800708a:	f7ff ff79 	bl	8006f80 <_Balloc>
 800708e:	4680      	mov	r8, r0
 8007090:	b928      	cbnz	r0, 800709e <__multadd+0x5a>
 8007092:	4602      	mov	r2, r0
 8007094:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <__multadd+0x84>)
 8007096:	480d      	ldr	r0, [pc, #52]	; (80070cc <__multadd+0x88>)
 8007098:	21ba      	movs	r1, #186	; 0xba
 800709a:	f001 f8bf 	bl	800821c <__assert_func>
 800709e:	6922      	ldr	r2, [r4, #16]
 80070a0:	3202      	adds	r2, #2
 80070a2:	f104 010c 	add.w	r1, r4, #12
 80070a6:	0092      	lsls	r2, r2, #2
 80070a8:	300c      	adds	r0, #12
 80070aa:	f001 f8a9 	bl	8008200 <memcpy>
 80070ae:	4621      	mov	r1, r4
 80070b0:	4638      	mov	r0, r7
 80070b2:	f7ff ffa5 	bl	8007000 <_Bfree>
 80070b6:	4644      	mov	r4, r8
 80070b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070bc:	3501      	adds	r5, #1
 80070be:	615e      	str	r6, [r3, #20]
 80070c0:	6125      	str	r5, [r4, #16]
 80070c2:	4620      	mov	r0, r4
 80070c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c8:	0802e622 	.word	0x0802e622
 80070cc:	0802e633 	.word	0x0802e633

080070d0 <__hi0bits>:
 80070d0:	0c03      	lsrs	r3, r0, #16
 80070d2:	041b      	lsls	r3, r3, #16
 80070d4:	b9d3      	cbnz	r3, 800710c <__hi0bits+0x3c>
 80070d6:	0400      	lsls	r0, r0, #16
 80070d8:	2310      	movs	r3, #16
 80070da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070de:	bf04      	itt	eq
 80070e0:	0200      	lsleq	r0, r0, #8
 80070e2:	3308      	addeq	r3, #8
 80070e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070e8:	bf04      	itt	eq
 80070ea:	0100      	lsleq	r0, r0, #4
 80070ec:	3304      	addeq	r3, #4
 80070ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070f2:	bf04      	itt	eq
 80070f4:	0080      	lsleq	r0, r0, #2
 80070f6:	3302      	addeq	r3, #2
 80070f8:	2800      	cmp	r0, #0
 80070fa:	db05      	blt.n	8007108 <__hi0bits+0x38>
 80070fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007100:	f103 0301 	add.w	r3, r3, #1
 8007104:	bf08      	it	eq
 8007106:	2320      	moveq	r3, #32
 8007108:	4618      	mov	r0, r3
 800710a:	4770      	bx	lr
 800710c:	2300      	movs	r3, #0
 800710e:	e7e4      	b.n	80070da <__hi0bits+0xa>

08007110 <__lo0bits>:
 8007110:	6803      	ldr	r3, [r0, #0]
 8007112:	f013 0207 	ands.w	r2, r3, #7
 8007116:	d00c      	beq.n	8007132 <__lo0bits+0x22>
 8007118:	07d9      	lsls	r1, r3, #31
 800711a:	d422      	bmi.n	8007162 <__lo0bits+0x52>
 800711c:	079a      	lsls	r2, r3, #30
 800711e:	bf49      	itett	mi
 8007120:	085b      	lsrmi	r3, r3, #1
 8007122:	089b      	lsrpl	r3, r3, #2
 8007124:	6003      	strmi	r3, [r0, #0]
 8007126:	2201      	movmi	r2, #1
 8007128:	bf5c      	itt	pl
 800712a:	6003      	strpl	r3, [r0, #0]
 800712c:	2202      	movpl	r2, #2
 800712e:	4610      	mov	r0, r2
 8007130:	4770      	bx	lr
 8007132:	b299      	uxth	r1, r3
 8007134:	b909      	cbnz	r1, 800713a <__lo0bits+0x2a>
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	2210      	movs	r2, #16
 800713a:	b2d9      	uxtb	r1, r3
 800713c:	b909      	cbnz	r1, 8007142 <__lo0bits+0x32>
 800713e:	3208      	adds	r2, #8
 8007140:	0a1b      	lsrs	r3, r3, #8
 8007142:	0719      	lsls	r1, r3, #28
 8007144:	bf04      	itt	eq
 8007146:	091b      	lsreq	r3, r3, #4
 8007148:	3204      	addeq	r2, #4
 800714a:	0799      	lsls	r1, r3, #30
 800714c:	bf04      	itt	eq
 800714e:	089b      	lsreq	r3, r3, #2
 8007150:	3202      	addeq	r2, #2
 8007152:	07d9      	lsls	r1, r3, #31
 8007154:	d403      	bmi.n	800715e <__lo0bits+0x4e>
 8007156:	085b      	lsrs	r3, r3, #1
 8007158:	f102 0201 	add.w	r2, r2, #1
 800715c:	d003      	beq.n	8007166 <__lo0bits+0x56>
 800715e:	6003      	str	r3, [r0, #0]
 8007160:	e7e5      	b.n	800712e <__lo0bits+0x1e>
 8007162:	2200      	movs	r2, #0
 8007164:	e7e3      	b.n	800712e <__lo0bits+0x1e>
 8007166:	2220      	movs	r2, #32
 8007168:	e7e1      	b.n	800712e <__lo0bits+0x1e>
	...

0800716c <__i2b>:
 800716c:	b510      	push	{r4, lr}
 800716e:	460c      	mov	r4, r1
 8007170:	2101      	movs	r1, #1
 8007172:	f7ff ff05 	bl	8006f80 <_Balloc>
 8007176:	4602      	mov	r2, r0
 8007178:	b928      	cbnz	r0, 8007186 <__i2b+0x1a>
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <__i2b+0x24>)
 800717c:	4805      	ldr	r0, [pc, #20]	; (8007194 <__i2b+0x28>)
 800717e:	f240 1145 	movw	r1, #325	; 0x145
 8007182:	f001 f84b 	bl	800821c <__assert_func>
 8007186:	2301      	movs	r3, #1
 8007188:	6144      	str	r4, [r0, #20]
 800718a:	6103      	str	r3, [r0, #16]
 800718c:	bd10      	pop	{r4, pc}
 800718e:	bf00      	nop
 8007190:	0802e622 	.word	0x0802e622
 8007194:	0802e633 	.word	0x0802e633

08007198 <__multiply>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	4691      	mov	r9, r2
 800719e:	690a      	ldr	r2, [r1, #16]
 80071a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	bfb8      	it	lt
 80071a8:	460b      	movlt	r3, r1
 80071aa:	460c      	mov	r4, r1
 80071ac:	bfbc      	itt	lt
 80071ae:	464c      	movlt	r4, r9
 80071b0:	4699      	movlt	r9, r3
 80071b2:	6927      	ldr	r7, [r4, #16]
 80071b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071b8:	68a3      	ldr	r3, [r4, #8]
 80071ba:	6861      	ldr	r1, [r4, #4]
 80071bc:	eb07 060a 	add.w	r6, r7, sl
 80071c0:	42b3      	cmp	r3, r6
 80071c2:	b085      	sub	sp, #20
 80071c4:	bfb8      	it	lt
 80071c6:	3101      	addlt	r1, #1
 80071c8:	f7ff feda 	bl	8006f80 <_Balloc>
 80071cc:	b930      	cbnz	r0, 80071dc <__multiply+0x44>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b44      	ldr	r3, [pc, #272]	; (80072e4 <__multiply+0x14c>)
 80071d2:	4845      	ldr	r0, [pc, #276]	; (80072e8 <__multiply+0x150>)
 80071d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80071d8:	f001 f820 	bl	800821c <__assert_func>
 80071dc:	f100 0514 	add.w	r5, r0, #20
 80071e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071e4:	462b      	mov	r3, r5
 80071e6:	2200      	movs	r2, #0
 80071e8:	4543      	cmp	r3, r8
 80071ea:	d321      	bcc.n	8007230 <__multiply+0x98>
 80071ec:	f104 0314 	add.w	r3, r4, #20
 80071f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071f4:	f109 0314 	add.w	r3, r9, #20
 80071f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071fc:	9202      	str	r2, [sp, #8]
 80071fe:	1b3a      	subs	r2, r7, r4
 8007200:	3a15      	subs	r2, #21
 8007202:	f022 0203 	bic.w	r2, r2, #3
 8007206:	3204      	adds	r2, #4
 8007208:	f104 0115 	add.w	r1, r4, #21
 800720c:	428f      	cmp	r7, r1
 800720e:	bf38      	it	cc
 8007210:	2204      	movcc	r2, #4
 8007212:	9201      	str	r2, [sp, #4]
 8007214:	9a02      	ldr	r2, [sp, #8]
 8007216:	9303      	str	r3, [sp, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d80c      	bhi.n	8007236 <__multiply+0x9e>
 800721c:	2e00      	cmp	r6, #0
 800721e:	dd03      	ble.n	8007228 <__multiply+0x90>
 8007220:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007224:	2b00      	cmp	r3, #0
 8007226:	d05b      	beq.n	80072e0 <__multiply+0x148>
 8007228:	6106      	str	r6, [r0, #16]
 800722a:	b005      	add	sp, #20
 800722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007230:	f843 2b04 	str.w	r2, [r3], #4
 8007234:	e7d8      	b.n	80071e8 <__multiply+0x50>
 8007236:	f8b3 a000 	ldrh.w	sl, [r3]
 800723a:	f1ba 0f00 	cmp.w	sl, #0
 800723e:	d024      	beq.n	800728a <__multiply+0xf2>
 8007240:	f104 0e14 	add.w	lr, r4, #20
 8007244:	46a9      	mov	r9, r5
 8007246:	f04f 0c00 	mov.w	ip, #0
 800724a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800724e:	f8d9 1000 	ldr.w	r1, [r9]
 8007252:	fa1f fb82 	uxth.w	fp, r2
 8007256:	b289      	uxth	r1, r1
 8007258:	fb0a 110b 	mla	r1, sl, fp, r1
 800725c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007260:	f8d9 2000 	ldr.w	r2, [r9]
 8007264:	4461      	add	r1, ip
 8007266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800726a:	fb0a c20b 	mla	r2, sl, fp, ip
 800726e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007272:	b289      	uxth	r1, r1
 8007274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007278:	4577      	cmp	r7, lr
 800727a:	f849 1b04 	str.w	r1, [r9], #4
 800727e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007282:	d8e2      	bhi.n	800724a <__multiply+0xb2>
 8007284:	9a01      	ldr	r2, [sp, #4]
 8007286:	f845 c002 	str.w	ip, [r5, r2]
 800728a:	9a03      	ldr	r2, [sp, #12]
 800728c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007290:	3304      	adds	r3, #4
 8007292:	f1b9 0f00 	cmp.w	r9, #0
 8007296:	d021      	beq.n	80072dc <__multiply+0x144>
 8007298:	6829      	ldr	r1, [r5, #0]
 800729a:	f104 0c14 	add.w	ip, r4, #20
 800729e:	46ae      	mov	lr, r5
 80072a0:	f04f 0a00 	mov.w	sl, #0
 80072a4:	f8bc b000 	ldrh.w	fp, [ip]
 80072a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072ac:	fb09 220b 	mla	r2, r9, fp, r2
 80072b0:	4452      	add	r2, sl
 80072b2:	b289      	uxth	r1, r1
 80072b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072b8:	f84e 1b04 	str.w	r1, [lr], #4
 80072bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80072c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072c4:	f8be 1000 	ldrh.w	r1, [lr]
 80072c8:	fb09 110a 	mla	r1, r9, sl, r1
 80072cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80072d0:	4567      	cmp	r7, ip
 80072d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072d6:	d8e5      	bhi.n	80072a4 <__multiply+0x10c>
 80072d8:	9a01      	ldr	r2, [sp, #4]
 80072da:	50a9      	str	r1, [r5, r2]
 80072dc:	3504      	adds	r5, #4
 80072de:	e799      	b.n	8007214 <__multiply+0x7c>
 80072e0:	3e01      	subs	r6, #1
 80072e2:	e79b      	b.n	800721c <__multiply+0x84>
 80072e4:	0802e622 	.word	0x0802e622
 80072e8:	0802e633 	.word	0x0802e633

080072ec <__pow5mult>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	4615      	mov	r5, r2
 80072f2:	f012 0203 	ands.w	r2, r2, #3
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	d007      	beq.n	800730c <__pow5mult+0x20>
 80072fc:	4c25      	ldr	r4, [pc, #148]	; (8007394 <__pow5mult+0xa8>)
 80072fe:	3a01      	subs	r2, #1
 8007300:	2300      	movs	r3, #0
 8007302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007306:	f7ff fe9d 	bl	8007044 <__multadd>
 800730a:	4607      	mov	r7, r0
 800730c:	10ad      	asrs	r5, r5, #2
 800730e:	d03d      	beq.n	800738c <__pow5mult+0xa0>
 8007310:	69f4      	ldr	r4, [r6, #28]
 8007312:	b97c      	cbnz	r4, 8007334 <__pow5mult+0x48>
 8007314:	2010      	movs	r0, #16
 8007316:	f7ff fd7f 	bl	8006e18 <malloc>
 800731a:	4602      	mov	r2, r0
 800731c:	61f0      	str	r0, [r6, #28]
 800731e:	b928      	cbnz	r0, 800732c <__pow5mult+0x40>
 8007320:	4b1d      	ldr	r3, [pc, #116]	; (8007398 <__pow5mult+0xac>)
 8007322:	481e      	ldr	r0, [pc, #120]	; (800739c <__pow5mult+0xb0>)
 8007324:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007328:	f000 ff78 	bl	800821c <__assert_func>
 800732c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007330:	6004      	str	r4, [r0, #0]
 8007332:	60c4      	str	r4, [r0, #12]
 8007334:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800733c:	b94c      	cbnz	r4, 8007352 <__pow5mult+0x66>
 800733e:	f240 2171 	movw	r1, #625	; 0x271
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ff12 	bl	800716c <__i2b>
 8007348:	2300      	movs	r3, #0
 800734a:	f8c8 0008 	str.w	r0, [r8, #8]
 800734e:	4604      	mov	r4, r0
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	f04f 0900 	mov.w	r9, #0
 8007356:	07eb      	lsls	r3, r5, #31
 8007358:	d50a      	bpl.n	8007370 <__pow5mult+0x84>
 800735a:	4639      	mov	r1, r7
 800735c:	4622      	mov	r2, r4
 800735e:	4630      	mov	r0, r6
 8007360:	f7ff ff1a 	bl	8007198 <__multiply>
 8007364:	4639      	mov	r1, r7
 8007366:	4680      	mov	r8, r0
 8007368:	4630      	mov	r0, r6
 800736a:	f7ff fe49 	bl	8007000 <_Bfree>
 800736e:	4647      	mov	r7, r8
 8007370:	106d      	asrs	r5, r5, #1
 8007372:	d00b      	beq.n	800738c <__pow5mult+0xa0>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	b938      	cbnz	r0, 8007388 <__pow5mult+0x9c>
 8007378:	4622      	mov	r2, r4
 800737a:	4621      	mov	r1, r4
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff ff0b 	bl	8007198 <__multiply>
 8007382:	6020      	str	r0, [r4, #0]
 8007384:	f8c0 9000 	str.w	r9, [r0]
 8007388:	4604      	mov	r4, r0
 800738a:	e7e4      	b.n	8007356 <__pow5mult+0x6a>
 800738c:	4638      	mov	r0, r7
 800738e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007392:	bf00      	nop
 8007394:	0802e780 	.word	0x0802e780
 8007398:	0802e5b3 	.word	0x0802e5b3
 800739c:	0802e633 	.word	0x0802e633

080073a0 <__lshift>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	460c      	mov	r4, r1
 80073a6:	6849      	ldr	r1, [r1, #4]
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	4607      	mov	r7, r0
 80073b2:	4691      	mov	r9, r2
 80073b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073b8:	f108 0601 	add.w	r6, r8, #1
 80073bc:	42b3      	cmp	r3, r6
 80073be:	db0b      	blt.n	80073d8 <__lshift+0x38>
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff fddd 	bl	8006f80 <_Balloc>
 80073c6:	4605      	mov	r5, r0
 80073c8:	b948      	cbnz	r0, 80073de <__lshift+0x3e>
 80073ca:	4602      	mov	r2, r0
 80073cc:	4b28      	ldr	r3, [pc, #160]	; (8007470 <__lshift+0xd0>)
 80073ce:	4829      	ldr	r0, [pc, #164]	; (8007474 <__lshift+0xd4>)
 80073d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80073d4:	f000 ff22 	bl	800821c <__assert_func>
 80073d8:	3101      	adds	r1, #1
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	e7ee      	b.n	80073bc <__lshift+0x1c>
 80073de:	2300      	movs	r3, #0
 80073e0:	f100 0114 	add.w	r1, r0, #20
 80073e4:	f100 0210 	add.w	r2, r0, #16
 80073e8:	4618      	mov	r0, r3
 80073ea:	4553      	cmp	r3, sl
 80073ec:	db33      	blt.n	8007456 <__lshift+0xb6>
 80073ee:	6920      	ldr	r0, [r4, #16]
 80073f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073f4:	f104 0314 	add.w	r3, r4, #20
 80073f8:	f019 091f 	ands.w	r9, r9, #31
 80073fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007400:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007404:	d02b      	beq.n	800745e <__lshift+0xbe>
 8007406:	f1c9 0e20 	rsb	lr, r9, #32
 800740a:	468a      	mov	sl, r1
 800740c:	2200      	movs	r2, #0
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	fa00 f009 	lsl.w	r0, r0, r9
 8007414:	4310      	orrs	r0, r2
 8007416:	f84a 0b04 	str.w	r0, [sl], #4
 800741a:	f853 2b04 	ldr.w	r2, [r3], #4
 800741e:	459c      	cmp	ip, r3
 8007420:	fa22 f20e 	lsr.w	r2, r2, lr
 8007424:	d8f3      	bhi.n	800740e <__lshift+0x6e>
 8007426:	ebac 0304 	sub.w	r3, ip, r4
 800742a:	3b15      	subs	r3, #21
 800742c:	f023 0303 	bic.w	r3, r3, #3
 8007430:	3304      	adds	r3, #4
 8007432:	f104 0015 	add.w	r0, r4, #21
 8007436:	4584      	cmp	ip, r0
 8007438:	bf38      	it	cc
 800743a:	2304      	movcc	r3, #4
 800743c:	50ca      	str	r2, [r1, r3]
 800743e:	b10a      	cbz	r2, 8007444 <__lshift+0xa4>
 8007440:	f108 0602 	add.w	r6, r8, #2
 8007444:	3e01      	subs	r6, #1
 8007446:	4638      	mov	r0, r7
 8007448:	612e      	str	r6, [r5, #16]
 800744a:	4621      	mov	r1, r4
 800744c:	f7ff fdd8 	bl	8007000 <_Bfree>
 8007450:	4628      	mov	r0, r5
 8007452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007456:	f842 0f04 	str.w	r0, [r2, #4]!
 800745a:	3301      	adds	r3, #1
 800745c:	e7c5      	b.n	80073ea <__lshift+0x4a>
 800745e:	3904      	subs	r1, #4
 8007460:	f853 2b04 	ldr.w	r2, [r3], #4
 8007464:	f841 2f04 	str.w	r2, [r1, #4]!
 8007468:	459c      	cmp	ip, r3
 800746a:	d8f9      	bhi.n	8007460 <__lshift+0xc0>
 800746c:	e7ea      	b.n	8007444 <__lshift+0xa4>
 800746e:	bf00      	nop
 8007470:	0802e622 	.word	0x0802e622
 8007474:	0802e633 	.word	0x0802e633

08007478 <__mcmp>:
 8007478:	b530      	push	{r4, r5, lr}
 800747a:	6902      	ldr	r2, [r0, #16]
 800747c:	690c      	ldr	r4, [r1, #16]
 800747e:	1b12      	subs	r2, r2, r4
 8007480:	d10e      	bne.n	80074a0 <__mcmp+0x28>
 8007482:	f100 0314 	add.w	r3, r0, #20
 8007486:	3114      	adds	r1, #20
 8007488:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800748c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007490:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007494:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007498:	42a5      	cmp	r5, r4
 800749a:	d003      	beq.n	80074a4 <__mcmp+0x2c>
 800749c:	d305      	bcc.n	80074aa <__mcmp+0x32>
 800749e:	2201      	movs	r2, #1
 80074a0:	4610      	mov	r0, r2
 80074a2:	bd30      	pop	{r4, r5, pc}
 80074a4:	4283      	cmp	r3, r0
 80074a6:	d3f3      	bcc.n	8007490 <__mcmp+0x18>
 80074a8:	e7fa      	b.n	80074a0 <__mcmp+0x28>
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295
 80074ae:	e7f7      	b.n	80074a0 <__mcmp+0x28>

080074b0 <__mdiff>:
 80074b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	460c      	mov	r4, r1
 80074b6:	4606      	mov	r6, r0
 80074b8:	4611      	mov	r1, r2
 80074ba:	4620      	mov	r0, r4
 80074bc:	4690      	mov	r8, r2
 80074be:	f7ff ffdb 	bl	8007478 <__mcmp>
 80074c2:	1e05      	subs	r5, r0, #0
 80074c4:	d110      	bne.n	80074e8 <__mdiff+0x38>
 80074c6:	4629      	mov	r1, r5
 80074c8:	4630      	mov	r0, r6
 80074ca:	f7ff fd59 	bl	8006f80 <_Balloc>
 80074ce:	b930      	cbnz	r0, 80074de <__mdiff+0x2e>
 80074d0:	4b3a      	ldr	r3, [pc, #232]	; (80075bc <__mdiff+0x10c>)
 80074d2:	4602      	mov	r2, r0
 80074d4:	f240 2137 	movw	r1, #567	; 0x237
 80074d8:	4839      	ldr	r0, [pc, #228]	; (80075c0 <__mdiff+0x110>)
 80074da:	f000 fe9f 	bl	800821c <__assert_func>
 80074de:	2301      	movs	r3, #1
 80074e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	bfa4      	itt	ge
 80074ea:	4643      	movge	r3, r8
 80074ec:	46a0      	movge	r8, r4
 80074ee:	4630      	mov	r0, r6
 80074f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074f4:	bfa6      	itte	ge
 80074f6:	461c      	movge	r4, r3
 80074f8:	2500      	movge	r5, #0
 80074fa:	2501      	movlt	r5, #1
 80074fc:	f7ff fd40 	bl	8006f80 <_Balloc>
 8007500:	b920      	cbnz	r0, 800750c <__mdiff+0x5c>
 8007502:	4b2e      	ldr	r3, [pc, #184]	; (80075bc <__mdiff+0x10c>)
 8007504:	4602      	mov	r2, r0
 8007506:	f240 2145 	movw	r1, #581	; 0x245
 800750a:	e7e5      	b.n	80074d8 <__mdiff+0x28>
 800750c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007510:	6926      	ldr	r6, [r4, #16]
 8007512:	60c5      	str	r5, [r0, #12]
 8007514:	f104 0914 	add.w	r9, r4, #20
 8007518:	f108 0514 	add.w	r5, r8, #20
 800751c:	f100 0e14 	add.w	lr, r0, #20
 8007520:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007524:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007528:	f108 0210 	add.w	r2, r8, #16
 800752c:	46f2      	mov	sl, lr
 800752e:	2100      	movs	r1, #0
 8007530:	f859 3b04 	ldr.w	r3, [r9], #4
 8007534:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007538:	fa11 f88b 	uxtah	r8, r1, fp
 800753c:	b299      	uxth	r1, r3
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	eba8 0801 	sub.w	r8, r8, r1
 8007544:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007548:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800754c:	fa1f f888 	uxth.w	r8, r8
 8007550:	1419      	asrs	r1, r3, #16
 8007552:	454e      	cmp	r6, r9
 8007554:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007558:	f84a 3b04 	str.w	r3, [sl], #4
 800755c:	d8e8      	bhi.n	8007530 <__mdiff+0x80>
 800755e:	1b33      	subs	r3, r6, r4
 8007560:	3b15      	subs	r3, #21
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	3304      	adds	r3, #4
 8007568:	3415      	adds	r4, #21
 800756a:	42a6      	cmp	r6, r4
 800756c:	bf38      	it	cc
 800756e:	2304      	movcc	r3, #4
 8007570:	441d      	add	r5, r3
 8007572:	4473      	add	r3, lr
 8007574:	469e      	mov	lr, r3
 8007576:	462e      	mov	r6, r5
 8007578:	4566      	cmp	r6, ip
 800757a:	d30e      	bcc.n	800759a <__mdiff+0xea>
 800757c:	f10c 0203 	add.w	r2, ip, #3
 8007580:	1b52      	subs	r2, r2, r5
 8007582:	f022 0203 	bic.w	r2, r2, #3
 8007586:	3d03      	subs	r5, #3
 8007588:	45ac      	cmp	ip, r5
 800758a:	bf38      	it	cc
 800758c:	2200      	movcc	r2, #0
 800758e:	4413      	add	r3, r2
 8007590:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007594:	b17a      	cbz	r2, 80075b6 <__mdiff+0x106>
 8007596:	6107      	str	r7, [r0, #16]
 8007598:	e7a4      	b.n	80074e4 <__mdiff+0x34>
 800759a:	f856 8b04 	ldr.w	r8, [r6], #4
 800759e:	fa11 f288 	uxtah	r2, r1, r8
 80075a2:	1414      	asrs	r4, r2, #16
 80075a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075a8:	b292      	uxth	r2, r2
 80075aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80075ae:	f84e 2b04 	str.w	r2, [lr], #4
 80075b2:	1421      	asrs	r1, r4, #16
 80075b4:	e7e0      	b.n	8007578 <__mdiff+0xc8>
 80075b6:	3f01      	subs	r7, #1
 80075b8:	e7ea      	b.n	8007590 <__mdiff+0xe0>
 80075ba:	bf00      	nop
 80075bc:	0802e622 	.word	0x0802e622
 80075c0:	0802e633 	.word	0x0802e633

080075c4 <__d2b>:
 80075c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075c8:	460f      	mov	r7, r1
 80075ca:	2101      	movs	r1, #1
 80075cc:	ec59 8b10 	vmov	r8, r9, d0
 80075d0:	4616      	mov	r6, r2
 80075d2:	f7ff fcd5 	bl	8006f80 <_Balloc>
 80075d6:	4604      	mov	r4, r0
 80075d8:	b930      	cbnz	r0, 80075e8 <__d2b+0x24>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b24      	ldr	r3, [pc, #144]	; (8007670 <__d2b+0xac>)
 80075de:	4825      	ldr	r0, [pc, #148]	; (8007674 <__d2b+0xb0>)
 80075e0:	f240 310f 	movw	r1, #783	; 0x30f
 80075e4:	f000 fe1a 	bl	800821c <__assert_func>
 80075e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075f0:	bb2d      	cbnz	r5, 800763e <__d2b+0x7a>
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	f1b8 0300 	subs.w	r3, r8, #0
 80075f8:	d026      	beq.n	8007648 <__d2b+0x84>
 80075fa:	4668      	mov	r0, sp
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	f7ff fd87 	bl	8007110 <__lo0bits>
 8007602:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007606:	b1e8      	cbz	r0, 8007644 <__d2b+0x80>
 8007608:	f1c0 0320 	rsb	r3, r0, #32
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	430b      	orrs	r3, r1
 8007612:	40c2      	lsrs	r2, r0
 8007614:	6163      	str	r3, [r4, #20]
 8007616:	9201      	str	r2, [sp, #4]
 8007618:	9b01      	ldr	r3, [sp, #4]
 800761a:	61a3      	str	r3, [r4, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	bf14      	ite	ne
 8007620:	2202      	movne	r2, #2
 8007622:	2201      	moveq	r2, #1
 8007624:	6122      	str	r2, [r4, #16]
 8007626:	b1bd      	cbz	r5, 8007658 <__d2b+0x94>
 8007628:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800762c:	4405      	add	r5, r0
 800762e:	603d      	str	r5, [r7, #0]
 8007630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007634:	6030      	str	r0, [r6, #0]
 8007636:	4620      	mov	r0, r4
 8007638:	b003      	add	sp, #12
 800763a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800763e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007642:	e7d6      	b.n	80075f2 <__d2b+0x2e>
 8007644:	6161      	str	r1, [r4, #20]
 8007646:	e7e7      	b.n	8007618 <__d2b+0x54>
 8007648:	a801      	add	r0, sp, #4
 800764a:	f7ff fd61 	bl	8007110 <__lo0bits>
 800764e:	9b01      	ldr	r3, [sp, #4]
 8007650:	6163      	str	r3, [r4, #20]
 8007652:	3020      	adds	r0, #32
 8007654:	2201      	movs	r2, #1
 8007656:	e7e5      	b.n	8007624 <__d2b+0x60>
 8007658:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800765c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007660:	6038      	str	r0, [r7, #0]
 8007662:	6918      	ldr	r0, [r3, #16]
 8007664:	f7ff fd34 	bl	80070d0 <__hi0bits>
 8007668:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800766c:	e7e2      	b.n	8007634 <__d2b+0x70>
 800766e:	bf00      	nop
 8007670:	0802e622 	.word	0x0802e622
 8007674:	0802e633 	.word	0x0802e633

08007678 <__ssputs_r>:
 8007678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	688e      	ldr	r6, [r1, #8]
 800767e:	461f      	mov	r7, r3
 8007680:	42be      	cmp	r6, r7
 8007682:	680b      	ldr	r3, [r1, #0]
 8007684:	4682      	mov	sl, r0
 8007686:	460c      	mov	r4, r1
 8007688:	4690      	mov	r8, r2
 800768a:	d82c      	bhi.n	80076e6 <__ssputs_r+0x6e>
 800768c:	898a      	ldrh	r2, [r1, #12]
 800768e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007692:	d026      	beq.n	80076e2 <__ssputs_r+0x6a>
 8007694:	6965      	ldr	r5, [r4, #20]
 8007696:	6909      	ldr	r1, [r1, #16]
 8007698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800769c:	eba3 0901 	sub.w	r9, r3, r1
 80076a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076a4:	1c7b      	adds	r3, r7, #1
 80076a6:	444b      	add	r3, r9
 80076a8:	106d      	asrs	r5, r5, #1
 80076aa:	429d      	cmp	r5, r3
 80076ac:	bf38      	it	cc
 80076ae:	461d      	movcc	r5, r3
 80076b0:	0553      	lsls	r3, r2, #21
 80076b2:	d527      	bpl.n	8007704 <__ssputs_r+0x8c>
 80076b4:	4629      	mov	r1, r5
 80076b6:	f7ff fbd7 	bl	8006e68 <_malloc_r>
 80076ba:	4606      	mov	r6, r0
 80076bc:	b360      	cbz	r0, 8007718 <__ssputs_r+0xa0>
 80076be:	6921      	ldr	r1, [r4, #16]
 80076c0:	464a      	mov	r2, r9
 80076c2:	f000 fd9d 	bl	8008200 <memcpy>
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d0:	81a3      	strh	r3, [r4, #12]
 80076d2:	6126      	str	r6, [r4, #16]
 80076d4:	6165      	str	r5, [r4, #20]
 80076d6:	444e      	add	r6, r9
 80076d8:	eba5 0509 	sub.w	r5, r5, r9
 80076dc:	6026      	str	r6, [r4, #0]
 80076de:	60a5      	str	r5, [r4, #8]
 80076e0:	463e      	mov	r6, r7
 80076e2:	42be      	cmp	r6, r7
 80076e4:	d900      	bls.n	80076e8 <__ssputs_r+0x70>
 80076e6:	463e      	mov	r6, r7
 80076e8:	6820      	ldr	r0, [r4, #0]
 80076ea:	4632      	mov	r2, r6
 80076ec:	4641      	mov	r1, r8
 80076ee:	f000 fd5c 	bl	80081aa <memmove>
 80076f2:	68a3      	ldr	r3, [r4, #8]
 80076f4:	1b9b      	subs	r3, r3, r6
 80076f6:	60a3      	str	r3, [r4, #8]
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	4433      	add	r3, r6
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	2000      	movs	r0, #0
 8007700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007704:	462a      	mov	r2, r5
 8007706:	f000 fdcf 	bl	80082a8 <_realloc_r>
 800770a:	4606      	mov	r6, r0
 800770c:	2800      	cmp	r0, #0
 800770e:	d1e0      	bne.n	80076d2 <__ssputs_r+0x5a>
 8007710:	6921      	ldr	r1, [r4, #16]
 8007712:	4650      	mov	r0, sl
 8007714:	f7ff fb34 	bl	8006d80 <_free_r>
 8007718:	230c      	movs	r3, #12
 800771a:	f8ca 3000 	str.w	r3, [sl]
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	f04f 30ff 	mov.w	r0, #4294967295
 800772a:	e7e9      	b.n	8007700 <__ssputs_r+0x88>

0800772c <_svfiprintf_r>:
 800772c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007730:	4698      	mov	r8, r3
 8007732:	898b      	ldrh	r3, [r1, #12]
 8007734:	061b      	lsls	r3, r3, #24
 8007736:	b09d      	sub	sp, #116	; 0x74
 8007738:	4607      	mov	r7, r0
 800773a:	460d      	mov	r5, r1
 800773c:	4614      	mov	r4, r2
 800773e:	d50e      	bpl.n	800775e <_svfiprintf_r+0x32>
 8007740:	690b      	ldr	r3, [r1, #16]
 8007742:	b963      	cbnz	r3, 800775e <_svfiprintf_r+0x32>
 8007744:	2140      	movs	r1, #64	; 0x40
 8007746:	f7ff fb8f 	bl	8006e68 <_malloc_r>
 800774a:	6028      	str	r0, [r5, #0]
 800774c:	6128      	str	r0, [r5, #16]
 800774e:	b920      	cbnz	r0, 800775a <_svfiprintf_r+0x2e>
 8007750:	230c      	movs	r3, #12
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	f04f 30ff 	mov.w	r0, #4294967295
 8007758:	e0d0      	b.n	80078fc <_svfiprintf_r+0x1d0>
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	616b      	str	r3, [r5, #20]
 800775e:	2300      	movs	r3, #0
 8007760:	9309      	str	r3, [sp, #36]	; 0x24
 8007762:	2320      	movs	r3, #32
 8007764:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007768:	f8cd 800c 	str.w	r8, [sp, #12]
 800776c:	2330      	movs	r3, #48	; 0x30
 800776e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007914 <_svfiprintf_r+0x1e8>
 8007772:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007776:	f04f 0901 	mov.w	r9, #1
 800777a:	4623      	mov	r3, r4
 800777c:	469a      	mov	sl, r3
 800777e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007782:	b10a      	cbz	r2, 8007788 <_svfiprintf_r+0x5c>
 8007784:	2a25      	cmp	r2, #37	; 0x25
 8007786:	d1f9      	bne.n	800777c <_svfiprintf_r+0x50>
 8007788:	ebba 0b04 	subs.w	fp, sl, r4
 800778c:	d00b      	beq.n	80077a6 <_svfiprintf_r+0x7a>
 800778e:	465b      	mov	r3, fp
 8007790:	4622      	mov	r2, r4
 8007792:	4629      	mov	r1, r5
 8007794:	4638      	mov	r0, r7
 8007796:	f7ff ff6f 	bl	8007678 <__ssputs_r>
 800779a:	3001      	adds	r0, #1
 800779c:	f000 80a9 	beq.w	80078f2 <_svfiprintf_r+0x1c6>
 80077a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a2:	445a      	add	r2, fp
 80077a4:	9209      	str	r2, [sp, #36]	; 0x24
 80077a6:	f89a 3000 	ldrb.w	r3, [sl]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 80a1 	beq.w	80078f2 <_svfiprintf_r+0x1c6>
 80077b0:	2300      	movs	r3, #0
 80077b2:	f04f 32ff 	mov.w	r2, #4294967295
 80077b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ba:	f10a 0a01 	add.w	sl, sl, #1
 80077be:	9304      	str	r3, [sp, #16]
 80077c0:	9307      	str	r3, [sp, #28]
 80077c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077c6:	931a      	str	r3, [sp, #104]	; 0x68
 80077c8:	4654      	mov	r4, sl
 80077ca:	2205      	movs	r2, #5
 80077cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d0:	4850      	ldr	r0, [pc, #320]	; (8007914 <_svfiprintf_r+0x1e8>)
 80077d2:	f7f8 fd35 	bl	8000240 <memchr>
 80077d6:	9a04      	ldr	r2, [sp, #16]
 80077d8:	b9d8      	cbnz	r0, 8007812 <_svfiprintf_r+0xe6>
 80077da:	06d0      	lsls	r0, r2, #27
 80077dc:	bf44      	itt	mi
 80077de:	2320      	movmi	r3, #32
 80077e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077e4:	0711      	lsls	r1, r2, #28
 80077e6:	bf44      	itt	mi
 80077e8:	232b      	movmi	r3, #43	; 0x2b
 80077ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ee:	f89a 3000 	ldrb.w	r3, [sl]
 80077f2:	2b2a      	cmp	r3, #42	; 0x2a
 80077f4:	d015      	beq.n	8007822 <_svfiprintf_r+0xf6>
 80077f6:	9a07      	ldr	r2, [sp, #28]
 80077f8:	4654      	mov	r4, sl
 80077fa:	2000      	movs	r0, #0
 80077fc:	f04f 0c0a 	mov.w	ip, #10
 8007800:	4621      	mov	r1, r4
 8007802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007806:	3b30      	subs	r3, #48	; 0x30
 8007808:	2b09      	cmp	r3, #9
 800780a:	d94d      	bls.n	80078a8 <_svfiprintf_r+0x17c>
 800780c:	b1b0      	cbz	r0, 800783c <_svfiprintf_r+0x110>
 800780e:	9207      	str	r2, [sp, #28]
 8007810:	e014      	b.n	800783c <_svfiprintf_r+0x110>
 8007812:	eba0 0308 	sub.w	r3, r0, r8
 8007816:	fa09 f303 	lsl.w	r3, r9, r3
 800781a:	4313      	orrs	r3, r2
 800781c:	9304      	str	r3, [sp, #16]
 800781e:	46a2      	mov	sl, r4
 8007820:	e7d2      	b.n	80077c8 <_svfiprintf_r+0x9c>
 8007822:	9b03      	ldr	r3, [sp, #12]
 8007824:	1d19      	adds	r1, r3, #4
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	9103      	str	r1, [sp, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	bfbb      	ittet	lt
 800782e:	425b      	neglt	r3, r3
 8007830:	f042 0202 	orrlt.w	r2, r2, #2
 8007834:	9307      	strge	r3, [sp, #28]
 8007836:	9307      	strlt	r3, [sp, #28]
 8007838:	bfb8      	it	lt
 800783a:	9204      	strlt	r2, [sp, #16]
 800783c:	7823      	ldrb	r3, [r4, #0]
 800783e:	2b2e      	cmp	r3, #46	; 0x2e
 8007840:	d10c      	bne.n	800785c <_svfiprintf_r+0x130>
 8007842:	7863      	ldrb	r3, [r4, #1]
 8007844:	2b2a      	cmp	r3, #42	; 0x2a
 8007846:	d134      	bne.n	80078b2 <_svfiprintf_r+0x186>
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	1d1a      	adds	r2, r3, #4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	9203      	str	r2, [sp, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	bfb8      	it	lt
 8007854:	f04f 33ff 	movlt.w	r3, #4294967295
 8007858:	3402      	adds	r4, #2
 800785a:	9305      	str	r3, [sp, #20]
 800785c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007924 <_svfiprintf_r+0x1f8>
 8007860:	7821      	ldrb	r1, [r4, #0]
 8007862:	2203      	movs	r2, #3
 8007864:	4650      	mov	r0, sl
 8007866:	f7f8 fceb 	bl	8000240 <memchr>
 800786a:	b138      	cbz	r0, 800787c <_svfiprintf_r+0x150>
 800786c:	9b04      	ldr	r3, [sp, #16]
 800786e:	eba0 000a 	sub.w	r0, r0, sl
 8007872:	2240      	movs	r2, #64	; 0x40
 8007874:	4082      	lsls	r2, r0
 8007876:	4313      	orrs	r3, r2
 8007878:	3401      	adds	r4, #1
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007880:	4825      	ldr	r0, [pc, #148]	; (8007918 <_svfiprintf_r+0x1ec>)
 8007882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007886:	2206      	movs	r2, #6
 8007888:	f7f8 fcda 	bl	8000240 <memchr>
 800788c:	2800      	cmp	r0, #0
 800788e:	d038      	beq.n	8007902 <_svfiprintf_r+0x1d6>
 8007890:	4b22      	ldr	r3, [pc, #136]	; (800791c <_svfiprintf_r+0x1f0>)
 8007892:	bb1b      	cbnz	r3, 80078dc <_svfiprintf_r+0x1b0>
 8007894:	9b03      	ldr	r3, [sp, #12]
 8007896:	3307      	adds	r3, #7
 8007898:	f023 0307 	bic.w	r3, r3, #7
 800789c:	3308      	adds	r3, #8
 800789e:	9303      	str	r3, [sp, #12]
 80078a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a2:	4433      	add	r3, r6
 80078a4:	9309      	str	r3, [sp, #36]	; 0x24
 80078a6:	e768      	b.n	800777a <_svfiprintf_r+0x4e>
 80078a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ac:	460c      	mov	r4, r1
 80078ae:	2001      	movs	r0, #1
 80078b0:	e7a6      	b.n	8007800 <_svfiprintf_r+0xd4>
 80078b2:	2300      	movs	r3, #0
 80078b4:	3401      	adds	r4, #1
 80078b6:	9305      	str	r3, [sp, #20]
 80078b8:	4619      	mov	r1, r3
 80078ba:	f04f 0c0a 	mov.w	ip, #10
 80078be:	4620      	mov	r0, r4
 80078c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078c4:	3a30      	subs	r2, #48	; 0x30
 80078c6:	2a09      	cmp	r2, #9
 80078c8:	d903      	bls.n	80078d2 <_svfiprintf_r+0x1a6>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0c6      	beq.n	800785c <_svfiprintf_r+0x130>
 80078ce:	9105      	str	r1, [sp, #20]
 80078d0:	e7c4      	b.n	800785c <_svfiprintf_r+0x130>
 80078d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078d6:	4604      	mov	r4, r0
 80078d8:	2301      	movs	r3, #1
 80078da:	e7f0      	b.n	80078be <_svfiprintf_r+0x192>
 80078dc:	ab03      	add	r3, sp, #12
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	462a      	mov	r2, r5
 80078e2:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <_svfiprintf_r+0x1f4>)
 80078e4:	a904      	add	r1, sp, #16
 80078e6:	4638      	mov	r0, r7
 80078e8:	f7fd feea 	bl	80056c0 <_printf_float>
 80078ec:	1c42      	adds	r2, r0, #1
 80078ee:	4606      	mov	r6, r0
 80078f0:	d1d6      	bne.n	80078a0 <_svfiprintf_r+0x174>
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	065b      	lsls	r3, r3, #25
 80078f6:	f53f af2d 	bmi.w	8007754 <_svfiprintf_r+0x28>
 80078fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078fc:	b01d      	add	sp, #116	; 0x74
 80078fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007902:	ab03      	add	r3, sp, #12
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	462a      	mov	r2, r5
 8007908:	4b05      	ldr	r3, [pc, #20]	; (8007920 <_svfiprintf_r+0x1f4>)
 800790a:	a904      	add	r1, sp, #16
 800790c:	4638      	mov	r0, r7
 800790e:	f7fe f95f 	bl	8005bd0 <_printf_i>
 8007912:	e7eb      	b.n	80078ec <_svfiprintf_r+0x1c0>
 8007914:	0802e78c 	.word	0x0802e78c
 8007918:	0802e796 	.word	0x0802e796
 800791c:	080056c1 	.word	0x080056c1
 8007920:	08007679 	.word	0x08007679
 8007924:	0802e792 	.word	0x0802e792

08007928 <_sungetc_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	1c4b      	adds	r3, r1, #1
 800792c:	4614      	mov	r4, r2
 800792e:	d103      	bne.n	8007938 <_sungetc_r+0x10>
 8007930:	f04f 35ff 	mov.w	r5, #4294967295
 8007934:	4628      	mov	r0, r5
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	8993      	ldrh	r3, [r2, #12]
 800793a:	f023 0320 	bic.w	r3, r3, #32
 800793e:	8193      	strh	r3, [r2, #12]
 8007940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007942:	6852      	ldr	r2, [r2, #4]
 8007944:	b2cd      	uxtb	r5, r1
 8007946:	b18b      	cbz	r3, 800796c <_sungetc_r+0x44>
 8007948:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800794a:	4293      	cmp	r3, r2
 800794c:	dd08      	ble.n	8007960 <_sungetc_r+0x38>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	1e5a      	subs	r2, r3, #1
 8007952:	6022      	str	r2, [r4, #0]
 8007954:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007958:	6863      	ldr	r3, [r4, #4]
 800795a:	3301      	adds	r3, #1
 800795c:	6063      	str	r3, [r4, #4]
 800795e:	e7e9      	b.n	8007934 <_sungetc_r+0xc>
 8007960:	4621      	mov	r1, r4
 8007962:	f000 fbe8 	bl	8008136 <__submore>
 8007966:	2800      	cmp	r0, #0
 8007968:	d0f1      	beq.n	800794e <_sungetc_r+0x26>
 800796a:	e7e1      	b.n	8007930 <_sungetc_r+0x8>
 800796c:	6921      	ldr	r1, [r4, #16]
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	b151      	cbz	r1, 8007988 <_sungetc_r+0x60>
 8007972:	4299      	cmp	r1, r3
 8007974:	d208      	bcs.n	8007988 <_sungetc_r+0x60>
 8007976:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800797a:	42a9      	cmp	r1, r5
 800797c:	d104      	bne.n	8007988 <_sungetc_r+0x60>
 800797e:	3b01      	subs	r3, #1
 8007980:	3201      	adds	r2, #1
 8007982:	6023      	str	r3, [r4, #0]
 8007984:	6062      	str	r2, [r4, #4]
 8007986:	e7d5      	b.n	8007934 <_sungetc_r+0xc>
 8007988:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800798c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007990:	6363      	str	r3, [r4, #52]	; 0x34
 8007992:	2303      	movs	r3, #3
 8007994:	63a3      	str	r3, [r4, #56]	; 0x38
 8007996:	4623      	mov	r3, r4
 8007998:	f803 5f46 	strb.w	r5, [r3, #70]!
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	2301      	movs	r3, #1
 80079a0:	e7dc      	b.n	800795c <_sungetc_r+0x34>

080079a2 <__ssrefill_r>:
 80079a2:	b510      	push	{r4, lr}
 80079a4:	460c      	mov	r4, r1
 80079a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80079a8:	b169      	cbz	r1, 80079c6 <__ssrefill_r+0x24>
 80079aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079ae:	4299      	cmp	r1, r3
 80079b0:	d001      	beq.n	80079b6 <__ssrefill_r+0x14>
 80079b2:	f7ff f9e5 	bl	8006d80 <_free_r>
 80079b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b8:	6063      	str	r3, [r4, #4]
 80079ba:	2000      	movs	r0, #0
 80079bc:	6360      	str	r0, [r4, #52]	; 0x34
 80079be:	b113      	cbz	r3, 80079c6 <__ssrefill_r+0x24>
 80079c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079c2:	6023      	str	r3, [r4, #0]
 80079c4:	bd10      	pop	{r4, pc}
 80079c6:	6923      	ldr	r3, [r4, #16]
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	2300      	movs	r3, #0
 80079cc:	6063      	str	r3, [r4, #4]
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	f043 0320 	orr.w	r3, r3, #32
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	f04f 30ff 	mov.w	r0, #4294967295
 80079da:	e7f3      	b.n	80079c4 <__ssrefill_r+0x22>

080079dc <__ssvfiscanf_r>:
 80079dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	460c      	mov	r4, r1
 80079e2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80079e6:	2100      	movs	r1, #0
 80079e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80079ec:	49a6      	ldr	r1, [pc, #664]	; (8007c88 <__ssvfiscanf_r+0x2ac>)
 80079ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80079f0:	f10d 0804 	add.w	r8, sp, #4
 80079f4:	49a5      	ldr	r1, [pc, #660]	; (8007c8c <__ssvfiscanf_r+0x2b0>)
 80079f6:	4fa6      	ldr	r7, [pc, #664]	; (8007c90 <__ssvfiscanf_r+0x2b4>)
 80079f8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007c94 <__ssvfiscanf_r+0x2b8>
 80079fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007a00:	4606      	mov	r6, r0
 8007a02:	91a1      	str	r1, [sp, #644]	; 0x284
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	7813      	ldrb	r3, [r2, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 815a 	beq.w	8007cc2 <__ssvfiscanf_r+0x2e6>
 8007a0e:	5cf9      	ldrb	r1, [r7, r3]
 8007a10:	f011 0108 	ands.w	r1, r1, #8
 8007a14:	f102 0501 	add.w	r5, r2, #1
 8007a18:	d019      	beq.n	8007a4e <__ssvfiscanf_r+0x72>
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	dd0f      	ble.n	8007a40 <__ssvfiscanf_r+0x64>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	781a      	ldrb	r2, [r3, #0]
 8007a24:	5cba      	ldrb	r2, [r7, r2]
 8007a26:	0712      	lsls	r2, r2, #28
 8007a28:	d401      	bmi.n	8007a2e <__ssvfiscanf_r+0x52>
 8007a2a:	462a      	mov	r2, r5
 8007a2c:	e7eb      	b.n	8007a06 <__ssvfiscanf_r+0x2a>
 8007a2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007a30:	3201      	adds	r2, #1
 8007a32:	9245      	str	r2, [sp, #276]	; 0x114
 8007a34:	6862      	ldr	r2, [r4, #4]
 8007a36:	3301      	adds	r3, #1
 8007a38:	3a01      	subs	r2, #1
 8007a3a:	6062      	str	r2, [r4, #4]
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	e7ec      	b.n	8007a1a <__ssvfiscanf_r+0x3e>
 8007a40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007a42:	4621      	mov	r1, r4
 8007a44:	4630      	mov	r0, r6
 8007a46:	4798      	blx	r3
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d0e9      	beq.n	8007a20 <__ssvfiscanf_r+0x44>
 8007a4c:	e7ed      	b.n	8007a2a <__ssvfiscanf_r+0x4e>
 8007a4e:	2b25      	cmp	r3, #37	; 0x25
 8007a50:	d012      	beq.n	8007a78 <__ssvfiscanf_r+0x9c>
 8007a52:	469a      	mov	sl, r3
 8007a54:	6863      	ldr	r3, [r4, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f340 8091 	ble.w	8007b7e <__ssvfiscanf_r+0x1a2>
 8007a5c:	6822      	ldr	r2, [r4, #0]
 8007a5e:	7813      	ldrb	r3, [r2, #0]
 8007a60:	4553      	cmp	r3, sl
 8007a62:	f040 812e 	bne.w	8007cc2 <__ssvfiscanf_r+0x2e6>
 8007a66:	6863      	ldr	r3, [r4, #4]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	6063      	str	r3, [r4, #4]
 8007a6c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007a6e:	3201      	adds	r2, #1
 8007a70:	3301      	adds	r3, #1
 8007a72:	6022      	str	r2, [r4, #0]
 8007a74:	9345      	str	r3, [sp, #276]	; 0x114
 8007a76:	e7d8      	b.n	8007a2a <__ssvfiscanf_r+0x4e>
 8007a78:	9141      	str	r1, [sp, #260]	; 0x104
 8007a7a:	9143      	str	r1, [sp, #268]	; 0x10c
 8007a7c:	7853      	ldrb	r3, [r2, #1]
 8007a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a80:	bf02      	ittt	eq
 8007a82:	2310      	moveq	r3, #16
 8007a84:	1c95      	addeq	r5, r2, #2
 8007a86:	9341      	streq	r3, [sp, #260]	; 0x104
 8007a88:	220a      	movs	r2, #10
 8007a8a:	46aa      	mov	sl, r5
 8007a8c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007a90:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007a94:	2b09      	cmp	r3, #9
 8007a96:	d91c      	bls.n	8007ad2 <__ssvfiscanf_r+0xf6>
 8007a98:	487e      	ldr	r0, [pc, #504]	; (8007c94 <__ssvfiscanf_r+0x2b8>)
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	f7f8 fbd0 	bl	8000240 <memchr>
 8007aa0:	b138      	cbz	r0, 8007ab2 <__ssvfiscanf_r+0xd6>
 8007aa2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007aa4:	eba0 0009 	sub.w	r0, r0, r9
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4083      	lsls	r3, r0
 8007aac:	4313      	orrs	r3, r2
 8007aae:	9341      	str	r3, [sp, #260]	; 0x104
 8007ab0:	4655      	mov	r5, sl
 8007ab2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ab6:	2b78      	cmp	r3, #120	; 0x78
 8007ab8:	d806      	bhi.n	8007ac8 <__ssvfiscanf_r+0xec>
 8007aba:	2b57      	cmp	r3, #87	; 0x57
 8007abc:	d810      	bhi.n	8007ae0 <__ssvfiscanf_r+0x104>
 8007abe:	2b25      	cmp	r3, #37	; 0x25
 8007ac0:	d0c7      	beq.n	8007a52 <__ssvfiscanf_r+0x76>
 8007ac2:	d857      	bhi.n	8007b74 <__ssvfiscanf_r+0x198>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d065      	beq.n	8007b94 <__ssvfiscanf_r+0x1b8>
 8007ac8:	2303      	movs	r3, #3
 8007aca:	9347      	str	r3, [sp, #284]	; 0x11c
 8007acc:	230a      	movs	r3, #10
 8007ace:	9342      	str	r3, [sp, #264]	; 0x108
 8007ad0:	e076      	b.n	8007bc0 <__ssvfiscanf_r+0x1e4>
 8007ad2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007ad4:	fb02 1103 	mla	r1, r2, r3, r1
 8007ad8:	3930      	subs	r1, #48	; 0x30
 8007ada:	9143      	str	r1, [sp, #268]	; 0x10c
 8007adc:	4655      	mov	r5, sl
 8007ade:	e7d4      	b.n	8007a8a <__ssvfiscanf_r+0xae>
 8007ae0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007ae4:	2a20      	cmp	r2, #32
 8007ae6:	d8ef      	bhi.n	8007ac8 <__ssvfiscanf_r+0xec>
 8007ae8:	a101      	add	r1, pc, #4	; (adr r1, 8007af0 <__ssvfiscanf_r+0x114>)
 8007aea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007ba3 	.word	0x08007ba3
 8007af4:	08007ac9 	.word	0x08007ac9
 8007af8:	08007ac9 	.word	0x08007ac9
 8007afc:	08007c01 	.word	0x08007c01
 8007b00:	08007ac9 	.word	0x08007ac9
 8007b04:	08007ac9 	.word	0x08007ac9
 8007b08:	08007ac9 	.word	0x08007ac9
 8007b0c:	08007ac9 	.word	0x08007ac9
 8007b10:	08007ac9 	.word	0x08007ac9
 8007b14:	08007ac9 	.word	0x08007ac9
 8007b18:	08007ac9 	.word	0x08007ac9
 8007b1c:	08007c17 	.word	0x08007c17
 8007b20:	08007bfd 	.word	0x08007bfd
 8007b24:	08007b7b 	.word	0x08007b7b
 8007b28:	08007b7b 	.word	0x08007b7b
 8007b2c:	08007b7b 	.word	0x08007b7b
 8007b30:	08007ac9 	.word	0x08007ac9
 8007b34:	08007bb9 	.word	0x08007bb9
 8007b38:	08007ac9 	.word	0x08007ac9
 8007b3c:	08007ac9 	.word	0x08007ac9
 8007b40:	08007ac9 	.word	0x08007ac9
 8007b44:	08007ac9 	.word	0x08007ac9
 8007b48:	08007c27 	.word	0x08007c27
 8007b4c:	08007bf5 	.word	0x08007bf5
 8007b50:	08007b9b 	.word	0x08007b9b
 8007b54:	08007ac9 	.word	0x08007ac9
 8007b58:	08007ac9 	.word	0x08007ac9
 8007b5c:	08007c23 	.word	0x08007c23
 8007b60:	08007ac9 	.word	0x08007ac9
 8007b64:	08007bfd 	.word	0x08007bfd
 8007b68:	08007ac9 	.word	0x08007ac9
 8007b6c:	08007ac9 	.word	0x08007ac9
 8007b70:	08007ba3 	.word	0x08007ba3
 8007b74:	3b45      	subs	r3, #69	; 0x45
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d8a6      	bhi.n	8007ac8 <__ssvfiscanf_r+0xec>
 8007b7a:	2305      	movs	r3, #5
 8007b7c:	e01f      	b.n	8007bbe <__ssvfiscanf_r+0x1e2>
 8007b7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b80:	4621      	mov	r1, r4
 8007b82:	4630      	mov	r0, r6
 8007b84:	4798      	blx	r3
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f43f af68 	beq.w	8007a5c <__ssvfiscanf_r+0x80>
 8007b8c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	f040 808d 	bne.w	8007cae <__ssvfiscanf_r+0x2d2>
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	e08f      	b.n	8007cba <__ssvfiscanf_r+0x2de>
 8007b9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007b9c:	f042 0220 	orr.w	r2, r2, #32
 8007ba0:	9241      	str	r2, [sp, #260]	; 0x104
 8007ba2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba8:	9241      	str	r2, [sp, #260]	; 0x104
 8007baa:	2210      	movs	r2, #16
 8007bac:	2b6f      	cmp	r3, #111	; 0x6f
 8007bae:	9242      	str	r2, [sp, #264]	; 0x108
 8007bb0:	bf34      	ite	cc
 8007bb2:	2303      	movcc	r3, #3
 8007bb4:	2304      	movcs	r3, #4
 8007bb6:	e002      	b.n	8007bbe <__ssvfiscanf_r+0x1e2>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9342      	str	r3, [sp, #264]	; 0x108
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	9347      	str	r3, [sp, #284]	; 0x11c
 8007bc0:	6863      	ldr	r3, [r4, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dd3d      	ble.n	8007c42 <__ssvfiscanf_r+0x266>
 8007bc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007bc8:	0659      	lsls	r1, r3, #25
 8007bca:	d404      	bmi.n	8007bd6 <__ssvfiscanf_r+0x1fa>
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	781a      	ldrb	r2, [r3, #0]
 8007bd0:	5cba      	ldrb	r2, [r7, r2]
 8007bd2:	0712      	lsls	r2, r2, #28
 8007bd4:	d43c      	bmi.n	8007c50 <__ssvfiscanf_r+0x274>
 8007bd6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	dc4b      	bgt.n	8007c74 <__ssvfiscanf_r+0x298>
 8007bdc:	466b      	mov	r3, sp
 8007bde:	4622      	mov	r2, r4
 8007be0:	a941      	add	r1, sp, #260	; 0x104
 8007be2:	4630      	mov	r0, r6
 8007be4:	f000 f872 	bl	8007ccc <_scanf_chars>
 8007be8:	2801      	cmp	r0, #1
 8007bea:	d06a      	beq.n	8007cc2 <__ssvfiscanf_r+0x2e6>
 8007bec:	2802      	cmp	r0, #2
 8007bee:	f47f af1c 	bne.w	8007a2a <__ssvfiscanf_r+0x4e>
 8007bf2:	e7cb      	b.n	8007b8c <__ssvfiscanf_r+0x1b0>
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	9342      	str	r3, [sp, #264]	; 0x108
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	e7e0      	b.n	8007bbe <__ssvfiscanf_r+0x1e2>
 8007bfc:	220a      	movs	r2, #10
 8007bfe:	e7d5      	b.n	8007bac <__ssvfiscanf_r+0x1d0>
 8007c00:	4629      	mov	r1, r5
 8007c02:	4640      	mov	r0, r8
 8007c04:	f000 fa5e 	bl	80080c4 <__sccl>
 8007c08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c0e:	9341      	str	r3, [sp, #260]	; 0x104
 8007c10:	4605      	mov	r5, r0
 8007c12:	2301      	movs	r3, #1
 8007c14:	e7d3      	b.n	8007bbe <__ssvfiscanf_r+0x1e2>
 8007c16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1c:	9341      	str	r3, [sp, #260]	; 0x104
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e7cd      	b.n	8007bbe <__ssvfiscanf_r+0x1e2>
 8007c22:	2302      	movs	r3, #2
 8007c24:	e7cb      	b.n	8007bbe <__ssvfiscanf_r+0x1e2>
 8007c26:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007c28:	06c3      	lsls	r3, r0, #27
 8007c2a:	f53f aefe 	bmi.w	8007a2a <__ssvfiscanf_r+0x4e>
 8007c2e:	9b00      	ldr	r3, [sp, #0]
 8007c30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007c32:	1d19      	adds	r1, r3, #4
 8007c34:	9100      	str	r1, [sp, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	07c0      	lsls	r0, r0, #31
 8007c3a:	bf4c      	ite	mi
 8007c3c:	801a      	strhmi	r2, [r3, #0]
 8007c3e:	601a      	strpl	r2, [r3, #0]
 8007c40:	e6f3      	b.n	8007a2a <__ssvfiscanf_r+0x4e>
 8007c42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007c44:	4621      	mov	r1, r4
 8007c46:	4630      	mov	r0, r6
 8007c48:	4798      	blx	r3
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d0bb      	beq.n	8007bc6 <__ssvfiscanf_r+0x1ea>
 8007c4e:	e79d      	b.n	8007b8c <__ssvfiscanf_r+0x1b0>
 8007c50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007c52:	3201      	adds	r2, #1
 8007c54:	9245      	str	r2, [sp, #276]	; 0x114
 8007c56:	6862      	ldr	r2, [r4, #4]
 8007c58:	3a01      	subs	r2, #1
 8007c5a:	2a00      	cmp	r2, #0
 8007c5c:	6062      	str	r2, [r4, #4]
 8007c5e:	dd02      	ble.n	8007c66 <__ssvfiscanf_r+0x28a>
 8007c60:	3301      	adds	r3, #1
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	e7b2      	b.n	8007bcc <__ssvfiscanf_r+0x1f0>
 8007c66:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4798      	blx	r3
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d0ac      	beq.n	8007bcc <__ssvfiscanf_r+0x1f0>
 8007c72:	e78b      	b.n	8007b8c <__ssvfiscanf_r+0x1b0>
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	dc0f      	bgt.n	8007c98 <__ssvfiscanf_r+0x2bc>
 8007c78:	466b      	mov	r3, sp
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	a941      	add	r1, sp, #260	; 0x104
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f000 f87e 	bl	8007d80 <_scanf_i>
 8007c84:	e7b0      	b.n	8007be8 <__ssvfiscanf_r+0x20c>
 8007c86:	bf00      	nop
 8007c88:	08007929 	.word	0x08007929
 8007c8c:	080079a3 	.word	0x080079a3
 8007c90:	0802e7ff 	.word	0x0802e7ff
 8007c94:	0802e792 	.word	0x0802e792
 8007c98:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <__ssvfiscanf_r+0x2ec>)
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f43f aec5 	beq.w	8007a2a <__ssvfiscanf_r+0x4e>
 8007ca0:	466b      	mov	r3, sp
 8007ca2:	4622      	mov	r2, r4
 8007ca4:	a941      	add	r1, sp, #260	; 0x104
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f3af 8000 	nop.w
 8007cac:	e79c      	b.n	8007be8 <__ssvfiscanf_r+0x20c>
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007cb4:	bf18      	it	ne
 8007cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8007cba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007cc4:	e7f9      	b.n	8007cba <__ssvfiscanf_r+0x2de>
 8007cc6:	bf00      	nop
 8007cc8:	00000000 	.word	0x00000000

08007ccc <_scanf_chars>:
 8007ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd0:	4615      	mov	r5, r2
 8007cd2:	688a      	ldr	r2, [r1, #8]
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	b932      	cbnz	r2, 8007ce8 <_scanf_chars+0x1c>
 8007cda:	698a      	ldr	r2, [r1, #24]
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	bf0c      	ite	eq
 8007ce0:	2201      	moveq	r2, #1
 8007ce2:	f04f 32ff 	movne.w	r2, #4294967295
 8007ce6:	608a      	str	r2, [r1, #8]
 8007ce8:	6822      	ldr	r2, [r4, #0]
 8007cea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007d7c <_scanf_chars+0xb0>
 8007cee:	06d1      	lsls	r1, r2, #27
 8007cf0:	bf5f      	itttt	pl
 8007cf2:	681a      	ldrpl	r2, [r3, #0]
 8007cf4:	1d11      	addpl	r1, r2, #4
 8007cf6:	6019      	strpl	r1, [r3, #0]
 8007cf8:	6816      	ldrpl	r6, [r2, #0]
 8007cfa:	2700      	movs	r7, #0
 8007cfc:	69a0      	ldr	r0, [r4, #24]
 8007cfe:	b188      	cbz	r0, 8007d24 <_scanf_chars+0x58>
 8007d00:	2801      	cmp	r0, #1
 8007d02:	d107      	bne.n	8007d14 <_scanf_chars+0x48>
 8007d04:	682a      	ldr	r2, [r5, #0]
 8007d06:	7811      	ldrb	r1, [r2, #0]
 8007d08:	6962      	ldr	r2, [r4, #20]
 8007d0a:	5c52      	ldrb	r2, [r2, r1]
 8007d0c:	b952      	cbnz	r2, 8007d24 <_scanf_chars+0x58>
 8007d0e:	2f00      	cmp	r7, #0
 8007d10:	d031      	beq.n	8007d76 <_scanf_chars+0xaa>
 8007d12:	e022      	b.n	8007d5a <_scanf_chars+0x8e>
 8007d14:	2802      	cmp	r0, #2
 8007d16:	d120      	bne.n	8007d5a <_scanf_chars+0x8e>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007d20:	071b      	lsls	r3, r3, #28
 8007d22:	d41a      	bmi.n	8007d5a <_scanf_chars+0x8e>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	06da      	lsls	r2, r3, #27
 8007d28:	bf5e      	ittt	pl
 8007d2a:	682b      	ldrpl	r3, [r5, #0]
 8007d2c:	781b      	ldrbpl	r3, [r3, #0]
 8007d2e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007d32:	682a      	ldr	r2, [r5, #0]
 8007d34:	686b      	ldr	r3, [r5, #4]
 8007d36:	3201      	adds	r2, #1
 8007d38:	602a      	str	r2, [r5, #0]
 8007d3a:	68a2      	ldr	r2, [r4, #8]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	3a01      	subs	r2, #1
 8007d40:	606b      	str	r3, [r5, #4]
 8007d42:	3701      	adds	r7, #1
 8007d44:	60a2      	str	r2, [r4, #8]
 8007d46:	b142      	cbz	r2, 8007d5a <_scanf_chars+0x8e>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	dcd7      	bgt.n	8007cfc <_scanf_chars+0x30>
 8007d4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007d50:	4629      	mov	r1, r5
 8007d52:	4640      	mov	r0, r8
 8007d54:	4798      	blx	r3
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d0d0      	beq.n	8007cfc <_scanf_chars+0x30>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	f013 0310 	ands.w	r3, r3, #16
 8007d60:	d105      	bne.n	8007d6e <_scanf_chars+0xa2>
 8007d62:	68e2      	ldr	r2, [r4, #12]
 8007d64:	3201      	adds	r2, #1
 8007d66:	60e2      	str	r2, [r4, #12]
 8007d68:	69a2      	ldr	r2, [r4, #24]
 8007d6a:	b102      	cbz	r2, 8007d6e <_scanf_chars+0xa2>
 8007d6c:	7033      	strb	r3, [r6, #0]
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	443b      	add	r3, r7
 8007d72:	6123      	str	r3, [r4, #16]
 8007d74:	2000      	movs	r0, #0
 8007d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d7a:	bf00      	nop
 8007d7c:	0802e7ff 	.word	0x0802e7ff

08007d80 <_scanf_i>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	4698      	mov	r8, r3
 8007d86:	4b74      	ldr	r3, [pc, #464]	; (8007f58 <_scanf_i+0x1d8>)
 8007d88:	460c      	mov	r4, r1
 8007d8a:	4682      	mov	sl, r0
 8007d8c:	4616      	mov	r6, r2
 8007d8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d92:	b087      	sub	sp, #28
 8007d94:	ab03      	add	r3, sp, #12
 8007d96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007d9a:	4b70      	ldr	r3, [pc, #448]	; (8007f5c <_scanf_i+0x1dc>)
 8007d9c:	69a1      	ldr	r1, [r4, #24]
 8007d9e:	4a70      	ldr	r2, [pc, #448]	; (8007f60 <_scanf_i+0x1e0>)
 8007da0:	2903      	cmp	r1, #3
 8007da2:	bf18      	it	ne
 8007da4:	461a      	movne	r2, r3
 8007da6:	68a3      	ldr	r3, [r4, #8]
 8007da8:	9201      	str	r2, [sp, #4]
 8007daa:	1e5a      	subs	r2, r3, #1
 8007dac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007db0:	bf88      	it	hi
 8007db2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007db6:	4627      	mov	r7, r4
 8007db8:	bf82      	ittt	hi
 8007dba:	eb03 0905 	addhi.w	r9, r3, r5
 8007dbe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007dc2:	60a3      	strhi	r3, [r4, #8]
 8007dc4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007dc8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007dcc:	bf98      	it	ls
 8007dce:	f04f 0900 	movls.w	r9, #0
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	463d      	mov	r5, r7
 8007dd6:	f04f 0b00 	mov.w	fp, #0
 8007dda:	6831      	ldr	r1, [r6, #0]
 8007ddc:	ab03      	add	r3, sp, #12
 8007dde:	7809      	ldrb	r1, [r1, #0]
 8007de0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f7f8 fa2b 	bl	8000240 <memchr>
 8007dea:	b328      	cbz	r0, 8007e38 <_scanf_i+0xb8>
 8007dec:	f1bb 0f01 	cmp.w	fp, #1
 8007df0:	d159      	bne.n	8007ea6 <_scanf_i+0x126>
 8007df2:	6862      	ldr	r2, [r4, #4]
 8007df4:	b92a      	cbnz	r2, 8007e02 <_scanf_i+0x82>
 8007df6:	6822      	ldr	r2, [r4, #0]
 8007df8:	2308      	movs	r3, #8
 8007dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dfe:	6063      	str	r3, [r4, #4]
 8007e00:	6022      	str	r2, [r4, #0]
 8007e02:	6822      	ldr	r2, [r4, #0]
 8007e04:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007e08:	6022      	str	r2, [r4, #0]
 8007e0a:	68a2      	ldr	r2, [r4, #8]
 8007e0c:	1e51      	subs	r1, r2, #1
 8007e0e:	60a1      	str	r1, [r4, #8]
 8007e10:	b192      	cbz	r2, 8007e38 <_scanf_i+0xb8>
 8007e12:	6832      	ldr	r2, [r6, #0]
 8007e14:	1c51      	adds	r1, r2, #1
 8007e16:	6031      	str	r1, [r6, #0]
 8007e18:	7812      	ldrb	r2, [r2, #0]
 8007e1a:	f805 2b01 	strb.w	r2, [r5], #1
 8007e1e:	6872      	ldr	r2, [r6, #4]
 8007e20:	3a01      	subs	r2, #1
 8007e22:	2a00      	cmp	r2, #0
 8007e24:	6072      	str	r2, [r6, #4]
 8007e26:	dc07      	bgt.n	8007e38 <_scanf_i+0xb8>
 8007e28:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4650      	mov	r0, sl
 8007e30:	4790      	blx	r2
 8007e32:	2800      	cmp	r0, #0
 8007e34:	f040 8085 	bne.w	8007f42 <_scanf_i+0x1c2>
 8007e38:	f10b 0b01 	add.w	fp, fp, #1
 8007e3c:	f1bb 0f03 	cmp.w	fp, #3
 8007e40:	d1cb      	bne.n	8007dda <_scanf_i+0x5a>
 8007e42:	6863      	ldr	r3, [r4, #4]
 8007e44:	b90b      	cbnz	r3, 8007e4a <_scanf_i+0xca>
 8007e46:	230a      	movs	r3, #10
 8007e48:	6063      	str	r3, [r4, #4]
 8007e4a:	6863      	ldr	r3, [r4, #4]
 8007e4c:	4945      	ldr	r1, [pc, #276]	; (8007f64 <_scanf_i+0x1e4>)
 8007e4e:	6960      	ldr	r0, [r4, #20]
 8007e50:	1ac9      	subs	r1, r1, r3
 8007e52:	f000 f937 	bl	80080c4 <__sccl>
 8007e56:	f04f 0b00 	mov.w	fp, #0
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	6822      	ldr	r2, [r4, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d03d      	beq.n	8007ede <_scanf_i+0x15e>
 8007e62:	6831      	ldr	r1, [r6, #0]
 8007e64:	6960      	ldr	r0, [r4, #20]
 8007e66:	f891 c000 	ldrb.w	ip, [r1]
 8007e6a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d035      	beq.n	8007ede <_scanf_i+0x15e>
 8007e72:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007e76:	d124      	bne.n	8007ec2 <_scanf_i+0x142>
 8007e78:	0510      	lsls	r0, r2, #20
 8007e7a:	d522      	bpl.n	8007ec2 <_scanf_i+0x142>
 8007e7c:	f10b 0b01 	add.w	fp, fp, #1
 8007e80:	f1b9 0f00 	cmp.w	r9, #0
 8007e84:	d003      	beq.n	8007e8e <_scanf_i+0x10e>
 8007e86:	3301      	adds	r3, #1
 8007e88:	f109 39ff 	add.w	r9, r9, #4294967295
 8007e8c:	60a3      	str	r3, [r4, #8]
 8007e8e:	6873      	ldr	r3, [r6, #4]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	6073      	str	r3, [r6, #4]
 8007e96:	dd1b      	ble.n	8007ed0 <_scanf_i+0x150>
 8007e98:	6833      	ldr	r3, [r6, #0]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	6033      	str	r3, [r6, #0]
 8007e9e:	68a3      	ldr	r3, [r4, #8]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	60a3      	str	r3, [r4, #8]
 8007ea4:	e7d9      	b.n	8007e5a <_scanf_i+0xda>
 8007ea6:	f1bb 0f02 	cmp.w	fp, #2
 8007eaa:	d1ae      	bne.n	8007e0a <_scanf_i+0x8a>
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007eb2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007eb6:	d1bf      	bne.n	8007e38 <_scanf_i+0xb8>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ec0:	e7a2      	b.n	8007e08 <_scanf_i+0x88>
 8007ec2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007ec6:	6022      	str	r2, [r4, #0]
 8007ec8:	780b      	ldrb	r3, [r1, #0]
 8007eca:	f805 3b01 	strb.w	r3, [r5], #1
 8007ece:	e7de      	b.n	8007e8e <_scanf_i+0x10e>
 8007ed0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	4798      	blx	r3
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d0df      	beq.n	8007e9e <_scanf_i+0x11e>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	05d9      	lsls	r1, r3, #23
 8007ee2:	d50d      	bpl.n	8007f00 <_scanf_i+0x180>
 8007ee4:	42bd      	cmp	r5, r7
 8007ee6:	d909      	bls.n	8007efc <_scanf_i+0x17c>
 8007ee8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007eec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ef0:	4632      	mov	r2, r6
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	4798      	blx	r3
 8007ef6:	f105 39ff 	add.w	r9, r5, #4294967295
 8007efa:	464d      	mov	r5, r9
 8007efc:	42bd      	cmp	r5, r7
 8007efe:	d028      	beq.n	8007f52 <_scanf_i+0x1d2>
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	f012 0210 	ands.w	r2, r2, #16
 8007f06:	d113      	bne.n	8007f30 <_scanf_i+0x1b0>
 8007f08:	702a      	strb	r2, [r5, #0]
 8007f0a:	6863      	ldr	r3, [r4, #4]
 8007f0c:	9e01      	ldr	r6, [sp, #4]
 8007f0e:	4639      	mov	r1, r7
 8007f10:	4650      	mov	r0, sl
 8007f12:	47b0      	blx	r6
 8007f14:	f8d8 3000 	ldr.w	r3, [r8]
 8007f18:	6821      	ldr	r1, [r4, #0]
 8007f1a:	1d1a      	adds	r2, r3, #4
 8007f1c:	f8c8 2000 	str.w	r2, [r8]
 8007f20:	f011 0f20 	tst.w	r1, #32
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	d00f      	beq.n	8007f48 <_scanf_i+0x1c8>
 8007f28:	6018      	str	r0, [r3, #0]
 8007f2a:	68e3      	ldr	r3, [r4, #12]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	60e3      	str	r3, [r4, #12]
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	1bed      	subs	r5, r5, r7
 8007f34:	445d      	add	r5, fp
 8007f36:	442b      	add	r3, r5
 8007f38:	6123      	str	r3, [r4, #16]
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	b007      	add	sp, #28
 8007f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f42:	f04f 0b00 	mov.w	fp, #0
 8007f46:	e7ca      	b.n	8007ede <_scanf_i+0x15e>
 8007f48:	07ca      	lsls	r2, r1, #31
 8007f4a:	bf4c      	ite	mi
 8007f4c:	8018      	strhmi	r0, [r3, #0]
 8007f4e:	6018      	strpl	r0, [r3, #0]
 8007f50:	e7eb      	b.n	8007f2a <_scanf_i+0x1aa>
 8007f52:	2001      	movs	r0, #1
 8007f54:	e7f2      	b.n	8007f3c <_scanf_i+0x1bc>
 8007f56:	bf00      	nop
 8007f58:	08008b10 	.word	0x08008b10
 8007f5c:	080084f5 	.word	0x080084f5
 8007f60:	0800840d 	.word	0x0800840d
 8007f64:	0802e7ad 	.word	0x0802e7ad

08007f68 <__sflush_r>:
 8007f68:	898a      	ldrh	r2, [r1, #12]
 8007f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6e:	4605      	mov	r5, r0
 8007f70:	0710      	lsls	r0, r2, #28
 8007f72:	460c      	mov	r4, r1
 8007f74:	d458      	bmi.n	8008028 <__sflush_r+0xc0>
 8007f76:	684b      	ldr	r3, [r1, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	dc05      	bgt.n	8007f88 <__sflush_r+0x20>
 8007f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dc02      	bgt.n	8007f88 <__sflush_r+0x20>
 8007f82:	2000      	movs	r0, #0
 8007f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f8a:	2e00      	cmp	r6, #0
 8007f8c:	d0f9      	beq.n	8007f82 <__sflush_r+0x1a>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f94:	682f      	ldr	r7, [r5, #0]
 8007f96:	6a21      	ldr	r1, [r4, #32]
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	d032      	beq.n	8008002 <__sflush_r+0x9a>
 8007f9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	075a      	lsls	r2, r3, #29
 8007fa2:	d505      	bpl.n	8007fb0 <__sflush_r+0x48>
 8007fa4:	6863      	ldr	r3, [r4, #4]
 8007fa6:	1ac0      	subs	r0, r0, r3
 8007fa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007faa:	b10b      	cbz	r3, 8007fb0 <__sflush_r+0x48>
 8007fac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fae:	1ac0      	subs	r0, r0, r3
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fb6:	6a21      	ldr	r1, [r4, #32]
 8007fb8:	4628      	mov	r0, r5
 8007fba:	47b0      	blx	r6
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	d106      	bne.n	8007fd0 <__sflush_r+0x68>
 8007fc2:	6829      	ldr	r1, [r5, #0]
 8007fc4:	291d      	cmp	r1, #29
 8007fc6:	d82b      	bhi.n	8008020 <__sflush_r+0xb8>
 8007fc8:	4a29      	ldr	r2, [pc, #164]	; (8008070 <__sflush_r+0x108>)
 8007fca:	410a      	asrs	r2, r1
 8007fcc:	07d6      	lsls	r6, r2, #31
 8007fce:	d427      	bmi.n	8008020 <__sflush_r+0xb8>
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	6062      	str	r2, [r4, #4]
 8007fd4:	04d9      	lsls	r1, r3, #19
 8007fd6:	6922      	ldr	r2, [r4, #16]
 8007fd8:	6022      	str	r2, [r4, #0]
 8007fda:	d504      	bpl.n	8007fe6 <__sflush_r+0x7e>
 8007fdc:	1c42      	adds	r2, r0, #1
 8007fde:	d101      	bne.n	8007fe4 <__sflush_r+0x7c>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b903      	cbnz	r3, 8007fe6 <__sflush_r+0x7e>
 8007fe4:	6560      	str	r0, [r4, #84]	; 0x54
 8007fe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fe8:	602f      	str	r7, [r5, #0]
 8007fea:	2900      	cmp	r1, #0
 8007fec:	d0c9      	beq.n	8007f82 <__sflush_r+0x1a>
 8007fee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ff2:	4299      	cmp	r1, r3
 8007ff4:	d002      	beq.n	8007ffc <__sflush_r+0x94>
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f7fe fec2 	bl	8006d80 <_free_r>
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	6360      	str	r0, [r4, #52]	; 0x34
 8008000:	e7c0      	b.n	8007f84 <__sflush_r+0x1c>
 8008002:	2301      	movs	r3, #1
 8008004:	4628      	mov	r0, r5
 8008006:	47b0      	blx	r6
 8008008:	1c41      	adds	r1, r0, #1
 800800a:	d1c8      	bne.n	8007f9e <__sflush_r+0x36>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0c5      	beq.n	8007f9e <__sflush_r+0x36>
 8008012:	2b1d      	cmp	r3, #29
 8008014:	d001      	beq.n	800801a <__sflush_r+0xb2>
 8008016:	2b16      	cmp	r3, #22
 8008018:	d101      	bne.n	800801e <__sflush_r+0xb6>
 800801a:	602f      	str	r7, [r5, #0]
 800801c:	e7b1      	b.n	8007f82 <__sflush_r+0x1a>
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008024:	81a3      	strh	r3, [r4, #12]
 8008026:	e7ad      	b.n	8007f84 <__sflush_r+0x1c>
 8008028:	690f      	ldr	r7, [r1, #16]
 800802a:	2f00      	cmp	r7, #0
 800802c:	d0a9      	beq.n	8007f82 <__sflush_r+0x1a>
 800802e:	0793      	lsls	r3, r2, #30
 8008030:	680e      	ldr	r6, [r1, #0]
 8008032:	bf08      	it	eq
 8008034:	694b      	ldreq	r3, [r1, #20]
 8008036:	600f      	str	r7, [r1, #0]
 8008038:	bf18      	it	ne
 800803a:	2300      	movne	r3, #0
 800803c:	eba6 0807 	sub.w	r8, r6, r7
 8008040:	608b      	str	r3, [r1, #8]
 8008042:	f1b8 0f00 	cmp.w	r8, #0
 8008046:	dd9c      	ble.n	8007f82 <__sflush_r+0x1a>
 8008048:	6a21      	ldr	r1, [r4, #32]
 800804a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800804c:	4643      	mov	r3, r8
 800804e:	463a      	mov	r2, r7
 8008050:	4628      	mov	r0, r5
 8008052:	47b0      	blx	r6
 8008054:	2800      	cmp	r0, #0
 8008056:	dc06      	bgt.n	8008066 <__sflush_r+0xfe>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800805e:	81a3      	strh	r3, [r4, #12]
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	e78e      	b.n	8007f84 <__sflush_r+0x1c>
 8008066:	4407      	add	r7, r0
 8008068:	eba8 0800 	sub.w	r8, r8, r0
 800806c:	e7e9      	b.n	8008042 <__sflush_r+0xda>
 800806e:	bf00      	nop
 8008070:	dfbffffe 	.word	0xdfbffffe

08008074 <_fflush_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	690b      	ldr	r3, [r1, #16]
 8008078:	4605      	mov	r5, r0
 800807a:	460c      	mov	r4, r1
 800807c:	b913      	cbnz	r3, 8008084 <_fflush_r+0x10>
 800807e:	2500      	movs	r5, #0
 8008080:	4628      	mov	r0, r5
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	b118      	cbz	r0, 800808e <_fflush_r+0x1a>
 8008086:	6a03      	ldr	r3, [r0, #32]
 8008088:	b90b      	cbnz	r3, 800808e <_fflush_r+0x1a>
 800808a:	f7fd ff3d 	bl	8005f08 <__sinit>
 800808e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0f3      	beq.n	800807e <_fflush_r+0xa>
 8008096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008098:	07d0      	lsls	r0, r2, #31
 800809a:	d404      	bmi.n	80080a6 <_fflush_r+0x32>
 800809c:	0599      	lsls	r1, r3, #22
 800809e:	d402      	bmi.n	80080a6 <_fflush_r+0x32>
 80080a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a2:	f7fe f875 	bl	8006190 <__retarget_lock_acquire_recursive>
 80080a6:	4628      	mov	r0, r5
 80080a8:	4621      	mov	r1, r4
 80080aa:	f7ff ff5d 	bl	8007f68 <__sflush_r>
 80080ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080b0:	07da      	lsls	r2, r3, #31
 80080b2:	4605      	mov	r5, r0
 80080b4:	d4e4      	bmi.n	8008080 <_fflush_r+0xc>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	059b      	lsls	r3, r3, #22
 80080ba:	d4e1      	bmi.n	8008080 <_fflush_r+0xc>
 80080bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080be:	f7fe f868 	bl	8006192 <__retarget_lock_release_recursive>
 80080c2:	e7dd      	b.n	8008080 <_fflush_r+0xc>

080080c4 <__sccl>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	780b      	ldrb	r3, [r1, #0]
 80080c8:	4604      	mov	r4, r0
 80080ca:	2b5e      	cmp	r3, #94	; 0x5e
 80080cc:	bf0b      	itete	eq
 80080ce:	784b      	ldrbeq	r3, [r1, #1]
 80080d0:	1c4a      	addne	r2, r1, #1
 80080d2:	1c8a      	addeq	r2, r1, #2
 80080d4:	2100      	movne	r1, #0
 80080d6:	bf08      	it	eq
 80080d8:	2101      	moveq	r1, #1
 80080da:	3801      	subs	r0, #1
 80080dc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80080e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80080e4:	42a8      	cmp	r0, r5
 80080e6:	d1fb      	bne.n	80080e0 <__sccl+0x1c>
 80080e8:	b90b      	cbnz	r3, 80080ee <__sccl+0x2a>
 80080ea:	1e50      	subs	r0, r2, #1
 80080ec:	bd70      	pop	{r4, r5, r6, pc}
 80080ee:	f081 0101 	eor.w	r1, r1, #1
 80080f2:	54e1      	strb	r1, [r4, r3]
 80080f4:	4610      	mov	r0, r2
 80080f6:	4602      	mov	r2, r0
 80080f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80080fc:	2d2d      	cmp	r5, #45	; 0x2d
 80080fe:	d005      	beq.n	800810c <__sccl+0x48>
 8008100:	2d5d      	cmp	r5, #93	; 0x5d
 8008102:	d016      	beq.n	8008132 <__sccl+0x6e>
 8008104:	2d00      	cmp	r5, #0
 8008106:	d0f1      	beq.n	80080ec <__sccl+0x28>
 8008108:	462b      	mov	r3, r5
 800810a:	e7f2      	b.n	80080f2 <__sccl+0x2e>
 800810c:	7846      	ldrb	r6, [r0, #1]
 800810e:	2e5d      	cmp	r6, #93	; 0x5d
 8008110:	d0fa      	beq.n	8008108 <__sccl+0x44>
 8008112:	42b3      	cmp	r3, r6
 8008114:	dcf8      	bgt.n	8008108 <__sccl+0x44>
 8008116:	3002      	adds	r0, #2
 8008118:	461a      	mov	r2, r3
 800811a:	3201      	adds	r2, #1
 800811c:	4296      	cmp	r6, r2
 800811e:	54a1      	strb	r1, [r4, r2]
 8008120:	dcfb      	bgt.n	800811a <__sccl+0x56>
 8008122:	1af2      	subs	r2, r6, r3
 8008124:	3a01      	subs	r2, #1
 8008126:	1c5d      	adds	r5, r3, #1
 8008128:	42b3      	cmp	r3, r6
 800812a:	bfa8      	it	ge
 800812c:	2200      	movge	r2, #0
 800812e:	18ab      	adds	r3, r5, r2
 8008130:	e7e1      	b.n	80080f6 <__sccl+0x32>
 8008132:	4610      	mov	r0, r2
 8008134:	e7da      	b.n	80080ec <__sccl+0x28>

08008136 <__submore>:
 8008136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813a:	460c      	mov	r4, r1
 800813c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800813e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008142:	4299      	cmp	r1, r3
 8008144:	d11d      	bne.n	8008182 <__submore+0x4c>
 8008146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800814a:	f7fe fe8d 	bl	8006e68 <_malloc_r>
 800814e:	b918      	cbnz	r0, 8008158 <__submore+0x22>
 8008150:	f04f 30ff 	mov.w	r0, #4294967295
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800815c:	63a3      	str	r3, [r4, #56]	; 0x38
 800815e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008162:	6360      	str	r0, [r4, #52]	; 0x34
 8008164:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008168:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800816c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008170:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008174:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008178:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800817c:	6020      	str	r0, [r4, #0]
 800817e:	2000      	movs	r0, #0
 8008180:	e7e8      	b.n	8008154 <__submore+0x1e>
 8008182:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008184:	0077      	lsls	r7, r6, #1
 8008186:	463a      	mov	r2, r7
 8008188:	f000 f88e 	bl	80082a8 <_realloc_r>
 800818c:	4605      	mov	r5, r0
 800818e:	2800      	cmp	r0, #0
 8008190:	d0de      	beq.n	8008150 <__submore+0x1a>
 8008192:	eb00 0806 	add.w	r8, r0, r6
 8008196:	4601      	mov	r1, r0
 8008198:	4632      	mov	r2, r6
 800819a:	4640      	mov	r0, r8
 800819c:	f000 f830 	bl	8008200 <memcpy>
 80081a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80081a4:	f8c4 8000 	str.w	r8, [r4]
 80081a8:	e7e9      	b.n	800817e <__submore+0x48>

080081aa <memmove>:
 80081aa:	4288      	cmp	r0, r1
 80081ac:	b510      	push	{r4, lr}
 80081ae:	eb01 0402 	add.w	r4, r1, r2
 80081b2:	d902      	bls.n	80081ba <memmove+0x10>
 80081b4:	4284      	cmp	r4, r0
 80081b6:	4623      	mov	r3, r4
 80081b8:	d807      	bhi.n	80081ca <memmove+0x20>
 80081ba:	1e43      	subs	r3, r0, #1
 80081bc:	42a1      	cmp	r1, r4
 80081be:	d008      	beq.n	80081d2 <memmove+0x28>
 80081c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081c8:	e7f8      	b.n	80081bc <memmove+0x12>
 80081ca:	4402      	add	r2, r0
 80081cc:	4601      	mov	r1, r0
 80081ce:	428a      	cmp	r2, r1
 80081d0:	d100      	bne.n	80081d4 <memmove+0x2a>
 80081d2:	bd10      	pop	{r4, pc}
 80081d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081dc:	e7f7      	b.n	80081ce <memmove+0x24>
	...

080081e0 <_sbrk_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d06      	ldr	r5, [pc, #24]	; (80081fc <_sbrk_r+0x1c>)
 80081e4:	2300      	movs	r3, #0
 80081e6:	4604      	mov	r4, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	602b      	str	r3, [r5, #0]
 80081ec:	f7f9 f896 	bl	800131c <_sbrk>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d102      	bne.n	80081fa <_sbrk_r+0x1a>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	b103      	cbz	r3, 80081fa <_sbrk_r+0x1a>
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	200005bc 	.word	0x200005bc

08008200 <memcpy>:
 8008200:	440a      	add	r2, r1
 8008202:	4291      	cmp	r1, r2
 8008204:	f100 33ff 	add.w	r3, r0, #4294967295
 8008208:	d100      	bne.n	800820c <memcpy+0xc>
 800820a:	4770      	bx	lr
 800820c:	b510      	push	{r4, lr}
 800820e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008216:	4291      	cmp	r1, r2
 8008218:	d1f9      	bne.n	800820e <memcpy+0xe>
 800821a:	bd10      	pop	{r4, pc}

0800821c <__assert_func>:
 800821c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800821e:	4614      	mov	r4, r2
 8008220:	461a      	mov	r2, r3
 8008222:	4b09      	ldr	r3, [pc, #36]	; (8008248 <__assert_func+0x2c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4605      	mov	r5, r0
 8008228:	68d8      	ldr	r0, [r3, #12]
 800822a:	b14c      	cbz	r4, 8008240 <__assert_func+0x24>
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <__assert_func+0x30>)
 800822e:	9100      	str	r1, [sp, #0]
 8008230:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008234:	4906      	ldr	r1, [pc, #24]	; (8008250 <__assert_func+0x34>)
 8008236:	462b      	mov	r3, r5
 8008238:	f000 f96c 	bl	8008514 <fiprintf>
 800823c:	f000 f97c 	bl	8008538 <abort>
 8008240:	4b04      	ldr	r3, [pc, #16]	; (8008254 <__assert_func+0x38>)
 8008242:	461c      	mov	r4, r3
 8008244:	e7f3      	b.n	800822e <__assert_func+0x12>
 8008246:	bf00      	nop
 8008248:	20000068 	.word	0x20000068
 800824c:	0802e7c2 	.word	0x0802e7c2
 8008250:	0802e7cf 	.word	0x0802e7cf
 8008254:	0802e7fd 	.word	0x0802e7fd

08008258 <_calloc_r>:
 8008258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800825a:	fba1 2402 	umull	r2, r4, r1, r2
 800825e:	b94c      	cbnz	r4, 8008274 <_calloc_r+0x1c>
 8008260:	4611      	mov	r1, r2
 8008262:	9201      	str	r2, [sp, #4]
 8008264:	f7fe fe00 	bl	8006e68 <_malloc_r>
 8008268:	9a01      	ldr	r2, [sp, #4]
 800826a:	4605      	mov	r5, r0
 800826c:	b930      	cbnz	r0, 800827c <_calloc_r+0x24>
 800826e:	4628      	mov	r0, r5
 8008270:	b003      	add	sp, #12
 8008272:	bd30      	pop	{r4, r5, pc}
 8008274:	220c      	movs	r2, #12
 8008276:	6002      	str	r2, [r0, #0]
 8008278:	2500      	movs	r5, #0
 800827a:	e7f8      	b.n	800826e <_calloc_r+0x16>
 800827c:	4621      	mov	r1, r4
 800827e:	f7fd ff0a 	bl	8006096 <memset>
 8008282:	e7f4      	b.n	800826e <_calloc_r+0x16>

08008284 <__ascii_mbtowc>:
 8008284:	b082      	sub	sp, #8
 8008286:	b901      	cbnz	r1, 800828a <__ascii_mbtowc+0x6>
 8008288:	a901      	add	r1, sp, #4
 800828a:	b142      	cbz	r2, 800829e <__ascii_mbtowc+0x1a>
 800828c:	b14b      	cbz	r3, 80082a2 <__ascii_mbtowc+0x1e>
 800828e:	7813      	ldrb	r3, [r2, #0]
 8008290:	600b      	str	r3, [r1, #0]
 8008292:	7812      	ldrb	r2, [r2, #0]
 8008294:	1e10      	subs	r0, r2, #0
 8008296:	bf18      	it	ne
 8008298:	2001      	movne	r0, #1
 800829a:	b002      	add	sp, #8
 800829c:	4770      	bx	lr
 800829e:	4610      	mov	r0, r2
 80082a0:	e7fb      	b.n	800829a <__ascii_mbtowc+0x16>
 80082a2:	f06f 0001 	mvn.w	r0, #1
 80082a6:	e7f8      	b.n	800829a <__ascii_mbtowc+0x16>

080082a8 <_realloc_r>:
 80082a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ac:	4680      	mov	r8, r0
 80082ae:	4614      	mov	r4, r2
 80082b0:	460e      	mov	r6, r1
 80082b2:	b921      	cbnz	r1, 80082be <_realloc_r+0x16>
 80082b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082b8:	4611      	mov	r1, r2
 80082ba:	f7fe bdd5 	b.w	8006e68 <_malloc_r>
 80082be:	b92a      	cbnz	r2, 80082cc <_realloc_r+0x24>
 80082c0:	f7fe fd5e 	bl	8006d80 <_free_r>
 80082c4:	4625      	mov	r5, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082cc:	f000 f93b 	bl	8008546 <_malloc_usable_size_r>
 80082d0:	4284      	cmp	r4, r0
 80082d2:	4607      	mov	r7, r0
 80082d4:	d802      	bhi.n	80082dc <_realloc_r+0x34>
 80082d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082da:	d812      	bhi.n	8008302 <_realloc_r+0x5a>
 80082dc:	4621      	mov	r1, r4
 80082de:	4640      	mov	r0, r8
 80082e0:	f7fe fdc2 	bl	8006e68 <_malloc_r>
 80082e4:	4605      	mov	r5, r0
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d0ed      	beq.n	80082c6 <_realloc_r+0x1e>
 80082ea:	42bc      	cmp	r4, r7
 80082ec:	4622      	mov	r2, r4
 80082ee:	4631      	mov	r1, r6
 80082f0:	bf28      	it	cs
 80082f2:	463a      	movcs	r2, r7
 80082f4:	f7ff ff84 	bl	8008200 <memcpy>
 80082f8:	4631      	mov	r1, r6
 80082fa:	4640      	mov	r0, r8
 80082fc:	f7fe fd40 	bl	8006d80 <_free_r>
 8008300:	e7e1      	b.n	80082c6 <_realloc_r+0x1e>
 8008302:	4635      	mov	r5, r6
 8008304:	e7df      	b.n	80082c6 <_realloc_r+0x1e>
	...

08008308 <_strtol_l.constprop.0>:
 8008308:	2b01      	cmp	r3, #1
 800830a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830e:	d001      	beq.n	8008314 <_strtol_l.constprop.0+0xc>
 8008310:	2b24      	cmp	r3, #36	; 0x24
 8008312:	d906      	bls.n	8008322 <_strtol_l.constprop.0+0x1a>
 8008314:	f7fd ff12 	bl	800613c <__errno>
 8008318:	2316      	movs	r3, #22
 800831a:	6003      	str	r3, [r0, #0]
 800831c:	2000      	movs	r0, #0
 800831e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008322:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008408 <_strtol_l.constprop.0+0x100>
 8008326:	460d      	mov	r5, r1
 8008328:	462e      	mov	r6, r5
 800832a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800832e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008332:	f017 0708 	ands.w	r7, r7, #8
 8008336:	d1f7      	bne.n	8008328 <_strtol_l.constprop.0+0x20>
 8008338:	2c2d      	cmp	r4, #45	; 0x2d
 800833a:	d132      	bne.n	80083a2 <_strtol_l.constprop.0+0x9a>
 800833c:	782c      	ldrb	r4, [r5, #0]
 800833e:	2701      	movs	r7, #1
 8008340:	1cb5      	adds	r5, r6, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d05b      	beq.n	80083fe <_strtol_l.constprop.0+0xf6>
 8008346:	2b10      	cmp	r3, #16
 8008348:	d109      	bne.n	800835e <_strtol_l.constprop.0+0x56>
 800834a:	2c30      	cmp	r4, #48	; 0x30
 800834c:	d107      	bne.n	800835e <_strtol_l.constprop.0+0x56>
 800834e:	782c      	ldrb	r4, [r5, #0]
 8008350:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008354:	2c58      	cmp	r4, #88	; 0x58
 8008356:	d14d      	bne.n	80083f4 <_strtol_l.constprop.0+0xec>
 8008358:	786c      	ldrb	r4, [r5, #1]
 800835a:	2310      	movs	r3, #16
 800835c:	3502      	adds	r5, #2
 800835e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008362:	f108 38ff 	add.w	r8, r8, #4294967295
 8008366:	f04f 0e00 	mov.w	lr, #0
 800836a:	fbb8 f9f3 	udiv	r9, r8, r3
 800836e:	4676      	mov	r6, lr
 8008370:	fb03 8a19 	mls	sl, r3, r9, r8
 8008374:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008378:	f1bc 0f09 	cmp.w	ip, #9
 800837c:	d816      	bhi.n	80083ac <_strtol_l.constprop.0+0xa4>
 800837e:	4664      	mov	r4, ip
 8008380:	42a3      	cmp	r3, r4
 8008382:	dd24      	ble.n	80083ce <_strtol_l.constprop.0+0xc6>
 8008384:	f1be 3fff 	cmp.w	lr, #4294967295
 8008388:	d008      	beq.n	800839c <_strtol_l.constprop.0+0x94>
 800838a:	45b1      	cmp	r9, r6
 800838c:	d31c      	bcc.n	80083c8 <_strtol_l.constprop.0+0xc0>
 800838e:	d101      	bne.n	8008394 <_strtol_l.constprop.0+0x8c>
 8008390:	45a2      	cmp	sl, r4
 8008392:	db19      	blt.n	80083c8 <_strtol_l.constprop.0+0xc0>
 8008394:	fb06 4603 	mla	r6, r6, r3, r4
 8008398:	f04f 0e01 	mov.w	lr, #1
 800839c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083a0:	e7e8      	b.n	8008374 <_strtol_l.constprop.0+0x6c>
 80083a2:	2c2b      	cmp	r4, #43	; 0x2b
 80083a4:	bf04      	itt	eq
 80083a6:	782c      	ldrbeq	r4, [r5, #0]
 80083a8:	1cb5      	addeq	r5, r6, #2
 80083aa:	e7ca      	b.n	8008342 <_strtol_l.constprop.0+0x3a>
 80083ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80083b0:	f1bc 0f19 	cmp.w	ip, #25
 80083b4:	d801      	bhi.n	80083ba <_strtol_l.constprop.0+0xb2>
 80083b6:	3c37      	subs	r4, #55	; 0x37
 80083b8:	e7e2      	b.n	8008380 <_strtol_l.constprop.0+0x78>
 80083ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80083be:	f1bc 0f19 	cmp.w	ip, #25
 80083c2:	d804      	bhi.n	80083ce <_strtol_l.constprop.0+0xc6>
 80083c4:	3c57      	subs	r4, #87	; 0x57
 80083c6:	e7db      	b.n	8008380 <_strtol_l.constprop.0+0x78>
 80083c8:	f04f 3eff 	mov.w	lr, #4294967295
 80083cc:	e7e6      	b.n	800839c <_strtol_l.constprop.0+0x94>
 80083ce:	f1be 3fff 	cmp.w	lr, #4294967295
 80083d2:	d105      	bne.n	80083e0 <_strtol_l.constprop.0+0xd8>
 80083d4:	2322      	movs	r3, #34	; 0x22
 80083d6:	6003      	str	r3, [r0, #0]
 80083d8:	4646      	mov	r6, r8
 80083da:	b942      	cbnz	r2, 80083ee <_strtol_l.constprop.0+0xe6>
 80083dc:	4630      	mov	r0, r6
 80083de:	e79e      	b.n	800831e <_strtol_l.constprop.0+0x16>
 80083e0:	b107      	cbz	r7, 80083e4 <_strtol_l.constprop.0+0xdc>
 80083e2:	4276      	negs	r6, r6
 80083e4:	2a00      	cmp	r2, #0
 80083e6:	d0f9      	beq.n	80083dc <_strtol_l.constprop.0+0xd4>
 80083e8:	f1be 0f00 	cmp.w	lr, #0
 80083ec:	d000      	beq.n	80083f0 <_strtol_l.constprop.0+0xe8>
 80083ee:	1e69      	subs	r1, r5, #1
 80083f0:	6011      	str	r1, [r2, #0]
 80083f2:	e7f3      	b.n	80083dc <_strtol_l.constprop.0+0xd4>
 80083f4:	2430      	movs	r4, #48	; 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1b1      	bne.n	800835e <_strtol_l.constprop.0+0x56>
 80083fa:	2308      	movs	r3, #8
 80083fc:	e7af      	b.n	800835e <_strtol_l.constprop.0+0x56>
 80083fe:	2c30      	cmp	r4, #48	; 0x30
 8008400:	d0a5      	beq.n	800834e <_strtol_l.constprop.0+0x46>
 8008402:	230a      	movs	r3, #10
 8008404:	e7ab      	b.n	800835e <_strtol_l.constprop.0+0x56>
 8008406:	bf00      	nop
 8008408:	0802e7ff 	.word	0x0802e7ff

0800840c <_strtol_r>:
 800840c:	f7ff bf7c 	b.w	8008308 <_strtol_l.constprop.0>

08008410 <_strtoul_l.constprop.0>:
 8008410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008414:	4f36      	ldr	r7, [pc, #216]	; (80084f0 <_strtoul_l.constprop.0+0xe0>)
 8008416:	4686      	mov	lr, r0
 8008418:	460d      	mov	r5, r1
 800841a:	4628      	mov	r0, r5
 800841c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008420:	5d3e      	ldrb	r6, [r7, r4]
 8008422:	f016 0608 	ands.w	r6, r6, #8
 8008426:	d1f8      	bne.n	800841a <_strtoul_l.constprop.0+0xa>
 8008428:	2c2d      	cmp	r4, #45	; 0x2d
 800842a:	d130      	bne.n	800848e <_strtoul_l.constprop.0+0x7e>
 800842c:	782c      	ldrb	r4, [r5, #0]
 800842e:	2601      	movs	r6, #1
 8008430:	1c85      	adds	r5, r0, #2
 8008432:	2b00      	cmp	r3, #0
 8008434:	d057      	beq.n	80084e6 <_strtoul_l.constprop.0+0xd6>
 8008436:	2b10      	cmp	r3, #16
 8008438:	d109      	bne.n	800844e <_strtoul_l.constprop.0+0x3e>
 800843a:	2c30      	cmp	r4, #48	; 0x30
 800843c:	d107      	bne.n	800844e <_strtoul_l.constprop.0+0x3e>
 800843e:	7828      	ldrb	r0, [r5, #0]
 8008440:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008444:	2858      	cmp	r0, #88	; 0x58
 8008446:	d149      	bne.n	80084dc <_strtoul_l.constprop.0+0xcc>
 8008448:	786c      	ldrb	r4, [r5, #1]
 800844a:	2310      	movs	r3, #16
 800844c:	3502      	adds	r5, #2
 800844e:	f04f 38ff 	mov.w	r8, #4294967295
 8008452:	2700      	movs	r7, #0
 8008454:	fbb8 f8f3 	udiv	r8, r8, r3
 8008458:	fb03 f908 	mul.w	r9, r3, r8
 800845c:	ea6f 0909 	mvn.w	r9, r9
 8008460:	4638      	mov	r0, r7
 8008462:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008466:	f1bc 0f09 	cmp.w	ip, #9
 800846a:	d815      	bhi.n	8008498 <_strtoul_l.constprop.0+0x88>
 800846c:	4664      	mov	r4, ip
 800846e:	42a3      	cmp	r3, r4
 8008470:	dd23      	ble.n	80084ba <_strtoul_l.constprop.0+0xaa>
 8008472:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008476:	d007      	beq.n	8008488 <_strtoul_l.constprop.0+0x78>
 8008478:	4580      	cmp	r8, r0
 800847a:	d31b      	bcc.n	80084b4 <_strtoul_l.constprop.0+0xa4>
 800847c:	d101      	bne.n	8008482 <_strtoul_l.constprop.0+0x72>
 800847e:	45a1      	cmp	r9, r4
 8008480:	db18      	blt.n	80084b4 <_strtoul_l.constprop.0+0xa4>
 8008482:	fb00 4003 	mla	r0, r0, r3, r4
 8008486:	2701      	movs	r7, #1
 8008488:	f815 4b01 	ldrb.w	r4, [r5], #1
 800848c:	e7e9      	b.n	8008462 <_strtoul_l.constprop.0+0x52>
 800848e:	2c2b      	cmp	r4, #43	; 0x2b
 8008490:	bf04      	itt	eq
 8008492:	782c      	ldrbeq	r4, [r5, #0]
 8008494:	1c85      	addeq	r5, r0, #2
 8008496:	e7cc      	b.n	8008432 <_strtoul_l.constprop.0+0x22>
 8008498:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800849c:	f1bc 0f19 	cmp.w	ip, #25
 80084a0:	d801      	bhi.n	80084a6 <_strtoul_l.constprop.0+0x96>
 80084a2:	3c37      	subs	r4, #55	; 0x37
 80084a4:	e7e3      	b.n	800846e <_strtoul_l.constprop.0+0x5e>
 80084a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80084aa:	f1bc 0f19 	cmp.w	ip, #25
 80084ae:	d804      	bhi.n	80084ba <_strtoul_l.constprop.0+0xaa>
 80084b0:	3c57      	subs	r4, #87	; 0x57
 80084b2:	e7dc      	b.n	800846e <_strtoul_l.constprop.0+0x5e>
 80084b4:	f04f 37ff 	mov.w	r7, #4294967295
 80084b8:	e7e6      	b.n	8008488 <_strtoul_l.constprop.0+0x78>
 80084ba:	1c7b      	adds	r3, r7, #1
 80084bc:	d106      	bne.n	80084cc <_strtoul_l.constprop.0+0xbc>
 80084be:	2322      	movs	r3, #34	; 0x22
 80084c0:	f8ce 3000 	str.w	r3, [lr]
 80084c4:	4638      	mov	r0, r7
 80084c6:	b932      	cbnz	r2, 80084d6 <_strtoul_l.constprop.0+0xc6>
 80084c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084cc:	b106      	cbz	r6, 80084d0 <_strtoul_l.constprop.0+0xc0>
 80084ce:	4240      	negs	r0, r0
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	d0f9      	beq.n	80084c8 <_strtoul_l.constprop.0+0xb8>
 80084d4:	b107      	cbz	r7, 80084d8 <_strtoul_l.constprop.0+0xc8>
 80084d6:	1e69      	subs	r1, r5, #1
 80084d8:	6011      	str	r1, [r2, #0]
 80084da:	e7f5      	b.n	80084c8 <_strtoul_l.constprop.0+0xb8>
 80084dc:	2430      	movs	r4, #48	; 0x30
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1b5      	bne.n	800844e <_strtoul_l.constprop.0+0x3e>
 80084e2:	2308      	movs	r3, #8
 80084e4:	e7b3      	b.n	800844e <_strtoul_l.constprop.0+0x3e>
 80084e6:	2c30      	cmp	r4, #48	; 0x30
 80084e8:	d0a9      	beq.n	800843e <_strtoul_l.constprop.0+0x2e>
 80084ea:	230a      	movs	r3, #10
 80084ec:	e7af      	b.n	800844e <_strtoul_l.constprop.0+0x3e>
 80084ee:	bf00      	nop
 80084f0:	0802e7ff 	.word	0x0802e7ff

080084f4 <_strtoul_r>:
 80084f4:	f7ff bf8c 	b.w	8008410 <_strtoul_l.constprop.0>

080084f8 <__ascii_wctomb>:
 80084f8:	b149      	cbz	r1, 800850e <__ascii_wctomb+0x16>
 80084fa:	2aff      	cmp	r2, #255	; 0xff
 80084fc:	bf85      	ittet	hi
 80084fe:	238a      	movhi	r3, #138	; 0x8a
 8008500:	6003      	strhi	r3, [r0, #0]
 8008502:	700a      	strbls	r2, [r1, #0]
 8008504:	f04f 30ff 	movhi.w	r0, #4294967295
 8008508:	bf98      	it	ls
 800850a:	2001      	movls	r0, #1
 800850c:	4770      	bx	lr
 800850e:	4608      	mov	r0, r1
 8008510:	4770      	bx	lr
	...

08008514 <fiprintf>:
 8008514:	b40e      	push	{r1, r2, r3}
 8008516:	b503      	push	{r0, r1, lr}
 8008518:	4601      	mov	r1, r0
 800851a:	ab03      	add	r3, sp, #12
 800851c:	4805      	ldr	r0, [pc, #20]	; (8008534 <fiprintf+0x20>)
 800851e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008522:	6800      	ldr	r0, [r0, #0]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	f000 f83f 	bl	80085a8 <_vfiprintf_r>
 800852a:	b002      	add	sp, #8
 800852c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008530:	b003      	add	sp, #12
 8008532:	4770      	bx	lr
 8008534:	20000068 	.word	0x20000068

08008538 <abort>:
 8008538:	b508      	push	{r3, lr}
 800853a:	2006      	movs	r0, #6
 800853c:	f000 fa0c 	bl	8008958 <raise>
 8008540:	2001      	movs	r0, #1
 8008542:	f7f8 fe73 	bl	800122c <_exit>

08008546 <_malloc_usable_size_r>:
 8008546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854a:	1f18      	subs	r0, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	bfbc      	itt	lt
 8008550:	580b      	ldrlt	r3, [r1, r0]
 8008552:	18c0      	addlt	r0, r0, r3
 8008554:	4770      	bx	lr

08008556 <__sfputc_r>:
 8008556:	6893      	ldr	r3, [r2, #8]
 8008558:	3b01      	subs	r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	b410      	push	{r4}
 800855e:	6093      	str	r3, [r2, #8]
 8008560:	da08      	bge.n	8008574 <__sfputc_r+0x1e>
 8008562:	6994      	ldr	r4, [r2, #24]
 8008564:	42a3      	cmp	r3, r4
 8008566:	db01      	blt.n	800856c <__sfputc_r+0x16>
 8008568:	290a      	cmp	r1, #10
 800856a:	d103      	bne.n	8008574 <__sfputc_r+0x1e>
 800856c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008570:	f000 b934 	b.w	80087dc <__swbuf_r>
 8008574:	6813      	ldr	r3, [r2, #0]
 8008576:	1c58      	adds	r0, r3, #1
 8008578:	6010      	str	r0, [r2, #0]
 800857a:	7019      	strb	r1, [r3, #0]
 800857c:	4608      	mov	r0, r1
 800857e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008582:	4770      	bx	lr

08008584 <__sfputs_r>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	4606      	mov	r6, r0
 8008588:	460f      	mov	r7, r1
 800858a:	4614      	mov	r4, r2
 800858c:	18d5      	adds	r5, r2, r3
 800858e:	42ac      	cmp	r4, r5
 8008590:	d101      	bne.n	8008596 <__sfputs_r+0x12>
 8008592:	2000      	movs	r0, #0
 8008594:	e007      	b.n	80085a6 <__sfputs_r+0x22>
 8008596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859a:	463a      	mov	r2, r7
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff ffda 	bl	8008556 <__sfputc_r>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	d1f3      	bne.n	800858e <__sfputs_r+0xa>
 80085a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085a8 <_vfiprintf_r>:
 80085a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	460d      	mov	r5, r1
 80085ae:	b09d      	sub	sp, #116	; 0x74
 80085b0:	4614      	mov	r4, r2
 80085b2:	4698      	mov	r8, r3
 80085b4:	4606      	mov	r6, r0
 80085b6:	b118      	cbz	r0, 80085c0 <_vfiprintf_r+0x18>
 80085b8:	6a03      	ldr	r3, [r0, #32]
 80085ba:	b90b      	cbnz	r3, 80085c0 <_vfiprintf_r+0x18>
 80085bc:	f7fd fca4 	bl	8005f08 <__sinit>
 80085c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085c2:	07d9      	lsls	r1, r3, #31
 80085c4:	d405      	bmi.n	80085d2 <_vfiprintf_r+0x2a>
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	059a      	lsls	r2, r3, #22
 80085ca:	d402      	bmi.n	80085d2 <_vfiprintf_r+0x2a>
 80085cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ce:	f7fd fddf 	bl	8006190 <__retarget_lock_acquire_recursive>
 80085d2:	89ab      	ldrh	r3, [r5, #12]
 80085d4:	071b      	lsls	r3, r3, #28
 80085d6:	d501      	bpl.n	80085dc <_vfiprintf_r+0x34>
 80085d8:	692b      	ldr	r3, [r5, #16]
 80085da:	b99b      	cbnz	r3, 8008604 <_vfiprintf_r+0x5c>
 80085dc:	4629      	mov	r1, r5
 80085de:	4630      	mov	r0, r6
 80085e0:	f000 f93a 	bl	8008858 <__swsetup_r>
 80085e4:	b170      	cbz	r0, 8008604 <_vfiprintf_r+0x5c>
 80085e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085e8:	07dc      	lsls	r4, r3, #31
 80085ea:	d504      	bpl.n	80085f6 <_vfiprintf_r+0x4e>
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	b01d      	add	sp, #116	; 0x74
 80085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f6:	89ab      	ldrh	r3, [r5, #12]
 80085f8:	0598      	lsls	r0, r3, #22
 80085fa:	d4f7      	bmi.n	80085ec <_vfiprintf_r+0x44>
 80085fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fe:	f7fd fdc8 	bl	8006192 <__retarget_lock_release_recursive>
 8008602:	e7f3      	b.n	80085ec <_vfiprintf_r+0x44>
 8008604:	2300      	movs	r3, #0
 8008606:	9309      	str	r3, [sp, #36]	; 0x24
 8008608:	2320      	movs	r3, #32
 800860a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800860e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008612:	2330      	movs	r3, #48	; 0x30
 8008614:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80087c8 <_vfiprintf_r+0x220>
 8008618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800861c:	f04f 0901 	mov.w	r9, #1
 8008620:	4623      	mov	r3, r4
 8008622:	469a      	mov	sl, r3
 8008624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008628:	b10a      	cbz	r2, 800862e <_vfiprintf_r+0x86>
 800862a:	2a25      	cmp	r2, #37	; 0x25
 800862c:	d1f9      	bne.n	8008622 <_vfiprintf_r+0x7a>
 800862e:	ebba 0b04 	subs.w	fp, sl, r4
 8008632:	d00b      	beq.n	800864c <_vfiprintf_r+0xa4>
 8008634:	465b      	mov	r3, fp
 8008636:	4622      	mov	r2, r4
 8008638:	4629      	mov	r1, r5
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff ffa2 	bl	8008584 <__sfputs_r>
 8008640:	3001      	adds	r0, #1
 8008642:	f000 80a9 	beq.w	8008798 <_vfiprintf_r+0x1f0>
 8008646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008648:	445a      	add	r2, fp
 800864a:	9209      	str	r2, [sp, #36]	; 0x24
 800864c:	f89a 3000 	ldrb.w	r3, [sl]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 80a1 	beq.w	8008798 <_vfiprintf_r+0x1f0>
 8008656:	2300      	movs	r3, #0
 8008658:	f04f 32ff 	mov.w	r2, #4294967295
 800865c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008660:	f10a 0a01 	add.w	sl, sl, #1
 8008664:	9304      	str	r3, [sp, #16]
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800866c:	931a      	str	r3, [sp, #104]	; 0x68
 800866e:	4654      	mov	r4, sl
 8008670:	2205      	movs	r2, #5
 8008672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008676:	4854      	ldr	r0, [pc, #336]	; (80087c8 <_vfiprintf_r+0x220>)
 8008678:	f7f7 fde2 	bl	8000240 <memchr>
 800867c:	9a04      	ldr	r2, [sp, #16]
 800867e:	b9d8      	cbnz	r0, 80086b8 <_vfiprintf_r+0x110>
 8008680:	06d1      	lsls	r1, r2, #27
 8008682:	bf44      	itt	mi
 8008684:	2320      	movmi	r3, #32
 8008686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800868a:	0713      	lsls	r3, r2, #28
 800868c:	bf44      	itt	mi
 800868e:	232b      	movmi	r3, #43	; 0x2b
 8008690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008694:	f89a 3000 	ldrb.w	r3, [sl]
 8008698:	2b2a      	cmp	r3, #42	; 0x2a
 800869a:	d015      	beq.n	80086c8 <_vfiprintf_r+0x120>
 800869c:	9a07      	ldr	r2, [sp, #28]
 800869e:	4654      	mov	r4, sl
 80086a0:	2000      	movs	r0, #0
 80086a2:	f04f 0c0a 	mov.w	ip, #10
 80086a6:	4621      	mov	r1, r4
 80086a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ac:	3b30      	subs	r3, #48	; 0x30
 80086ae:	2b09      	cmp	r3, #9
 80086b0:	d94d      	bls.n	800874e <_vfiprintf_r+0x1a6>
 80086b2:	b1b0      	cbz	r0, 80086e2 <_vfiprintf_r+0x13a>
 80086b4:	9207      	str	r2, [sp, #28]
 80086b6:	e014      	b.n	80086e2 <_vfiprintf_r+0x13a>
 80086b8:	eba0 0308 	sub.w	r3, r0, r8
 80086bc:	fa09 f303 	lsl.w	r3, r9, r3
 80086c0:	4313      	orrs	r3, r2
 80086c2:	9304      	str	r3, [sp, #16]
 80086c4:	46a2      	mov	sl, r4
 80086c6:	e7d2      	b.n	800866e <_vfiprintf_r+0xc6>
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	1d19      	adds	r1, r3, #4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	9103      	str	r1, [sp, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bfbb      	ittet	lt
 80086d4:	425b      	neglt	r3, r3
 80086d6:	f042 0202 	orrlt.w	r2, r2, #2
 80086da:	9307      	strge	r3, [sp, #28]
 80086dc:	9307      	strlt	r3, [sp, #28]
 80086de:	bfb8      	it	lt
 80086e0:	9204      	strlt	r2, [sp, #16]
 80086e2:	7823      	ldrb	r3, [r4, #0]
 80086e4:	2b2e      	cmp	r3, #46	; 0x2e
 80086e6:	d10c      	bne.n	8008702 <_vfiprintf_r+0x15a>
 80086e8:	7863      	ldrb	r3, [r4, #1]
 80086ea:	2b2a      	cmp	r3, #42	; 0x2a
 80086ec:	d134      	bne.n	8008758 <_vfiprintf_r+0x1b0>
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	1d1a      	adds	r2, r3, #4
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	9203      	str	r2, [sp, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bfb8      	it	lt
 80086fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80086fe:	3402      	adds	r4, #2
 8008700:	9305      	str	r3, [sp, #20]
 8008702:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80087d8 <_vfiprintf_r+0x230>
 8008706:	7821      	ldrb	r1, [r4, #0]
 8008708:	2203      	movs	r2, #3
 800870a:	4650      	mov	r0, sl
 800870c:	f7f7 fd98 	bl	8000240 <memchr>
 8008710:	b138      	cbz	r0, 8008722 <_vfiprintf_r+0x17a>
 8008712:	9b04      	ldr	r3, [sp, #16]
 8008714:	eba0 000a 	sub.w	r0, r0, sl
 8008718:	2240      	movs	r2, #64	; 0x40
 800871a:	4082      	lsls	r2, r0
 800871c:	4313      	orrs	r3, r2
 800871e:	3401      	adds	r4, #1
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008726:	4829      	ldr	r0, [pc, #164]	; (80087cc <_vfiprintf_r+0x224>)
 8008728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800872c:	2206      	movs	r2, #6
 800872e:	f7f7 fd87 	bl	8000240 <memchr>
 8008732:	2800      	cmp	r0, #0
 8008734:	d03f      	beq.n	80087b6 <_vfiprintf_r+0x20e>
 8008736:	4b26      	ldr	r3, [pc, #152]	; (80087d0 <_vfiprintf_r+0x228>)
 8008738:	bb1b      	cbnz	r3, 8008782 <_vfiprintf_r+0x1da>
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	3307      	adds	r3, #7
 800873e:	f023 0307 	bic.w	r3, r3, #7
 8008742:	3308      	adds	r3, #8
 8008744:	9303      	str	r3, [sp, #12]
 8008746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008748:	443b      	add	r3, r7
 800874a:	9309      	str	r3, [sp, #36]	; 0x24
 800874c:	e768      	b.n	8008620 <_vfiprintf_r+0x78>
 800874e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008752:	460c      	mov	r4, r1
 8008754:	2001      	movs	r0, #1
 8008756:	e7a6      	b.n	80086a6 <_vfiprintf_r+0xfe>
 8008758:	2300      	movs	r3, #0
 800875a:	3401      	adds	r4, #1
 800875c:	9305      	str	r3, [sp, #20]
 800875e:	4619      	mov	r1, r3
 8008760:	f04f 0c0a 	mov.w	ip, #10
 8008764:	4620      	mov	r0, r4
 8008766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800876a:	3a30      	subs	r2, #48	; 0x30
 800876c:	2a09      	cmp	r2, #9
 800876e:	d903      	bls.n	8008778 <_vfiprintf_r+0x1d0>
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0c6      	beq.n	8008702 <_vfiprintf_r+0x15a>
 8008774:	9105      	str	r1, [sp, #20]
 8008776:	e7c4      	b.n	8008702 <_vfiprintf_r+0x15a>
 8008778:	fb0c 2101 	mla	r1, ip, r1, r2
 800877c:	4604      	mov	r4, r0
 800877e:	2301      	movs	r3, #1
 8008780:	e7f0      	b.n	8008764 <_vfiprintf_r+0x1bc>
 8008782:	ab03      	add	r3, sp, #12
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	462a      	mov	r2, r5
 8008788:	4b12      	ldr	r3, [pc, #72]	; (80087d4 <_vfiprintf_r+0x22c>)
 800878a:	a904      	add	r1, sp, #16
 800878c:	4630      	mov	r0, r6
 800878e:	f7fc ff97 	bl	80056c0 <_printf_float>
 8008792:	4607      	mov	r7, r0
 8008794:	1c78      	adds	r0, r7, #1
 8008796:	d1d6      	bne.n	8008746 <_vfiprintf_r+0x19e>
 8008798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800879a:	07d9      	lsls	r1, r3, #31
 800879c:	d405      	bmi.n	80087aa <_vfiprintf_r+0x202>
 800879e:	89ab      	ldrh	r3, [r5, #12]
 80087a0:	059a      	lsls	r2, r3, #22
 80087a2:	d402      	bmi.n	80087aa <_vfiprintf_r+0x202>
 80087a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a6:	f7fd fcf4 	bl	8006192 <__retarget_lock_release_recursive>
 80087aa:	89ab      	ldrh	r3, [r5, #12]
 80087ac:	065b      	lsls	r3, r3, #25
 80087ae:	f53f af1d 	bmi.w	80085ec <_vfiprintf_r+0x44>
 80087b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087b4:	e71c      	b.n	80085f0 <_vfiprintf_r+0x48>
 80087b6:	ab03      	add	r3, sp, #12
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	462a      	mov	r2, r5
 80087bc:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <_vfiprintf_r+0x22c>)
 80087be:	a904      	add	r1, sp, #16
 80087c0:	4630      	mov	r0, r6
 80087c2:	f7fd fa05 	bl	8005bd0 <_printf_i>
 80087c6:	e7e4      	b.n	8008792 <_vfiprintf_r+0x1ea>
 80087c8:	0802e78c 	.word	0x0802e78c
 80087cc:	0802e796 	.word	0x0802e796
 80087d0:	080056c1 	.word	0x080056c1
 80087d4:	08008585 	.word	0x08008585
 80087d8:	0802e792 	.word	0x0802e792

080087dc <__swbuf_r>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	460e      	mov	r6, r1
 80087e0:	4614      	mov	r4, r2
 80087e2:	4605      	mov	r5, r0
 80087e4:	b118      	cbz	r0, 80087ee <__swbuf_r+0x12>
 80087e6:	6a03      	ldr	r3, [r0, #32]
 80087e8:	b90b      	cbnz	r3, 80087ee <__swbuf_r+0x12>
 80087ea:	f7fd fb8d 	bl	8005f08 <__sinit>
 80087ee:	69a3      	ldr	r3, [r4, #24]
 80087f0:	60a3      	str	r3, [r4, #8]
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	071a      	lsls	r2, r3, #28
 80087f6:	d525      	bpl.n	8008844 <__swbuf_r+0x68>
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	b31b      	cbz	r3, 8008844 <__swbuf_r+0x68>
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	6922      	ldr	r2, [r4, #16]
 8008800:	1a98      	subs	r0, r3, r2
 8008802:	6963      	ldr	r3, [r4, #20]
 8008804:	b2f6      	uxtb	r6, r6
 8008806:	4283      	cmp	r3, r0
 8008808:	4637      	mov	r7, r6
 800880a:	dc04      	bgt.n	8008816 <__swbuf_r+0x3a>
 800880c:	4621      	mov	r1, r4
 800880e:	4628      	mov	r0, r5
 8008810:	f7ff fc30 	bl	8008074 <_fflush_r>
 8008814:	b9e0      	cbnz	r0, 8008850 <__swbuf_r+0x74>
 8008816:	68a3      	ldr	r3, [r4, #8]
 8008818:	3b01      	subs	r3, #1
 800881a:	60a3      	str	r3, [r4, #8]
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	1c5a      	adds	r2, r3, #1
 8008820:	6022      	str	r2, [r4, #0]
 8008822:	701e      	strb	r6, [r3, #0]
 8008824:	6962      	ldr	r2, [r4, #20]
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	429a      	cmp	r2, r3
 800882a:	d004      	beq.n	8008836 <__swbuf_r+0x5a>
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	07db      	lsls	r3, r3, #31
 8008830:	d506      	bpl.n	8008840 <__swbuf_r+0x64>
 8008832:	2e0a      	cmp	r6, #10
 8008834:	d104      	bne.n	8008840 <__swbuf_r+0x64>
 8008836:	4621      	mov	r1, r4
 8008838:	4628      	mov	r0, r5
 800883a:	f7ff fc1b 	bl	8008074 <_fflush_r>
 800883e:	b938      	cbnz	r0, 8008850 <__swbuf_r+0x74>
 8008840:	4638      	mov	r0, r7
 8008842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008844:	4621      	mov	r1, r4
 8008846:	4628      	mov	r0, r5
 8008848:	f000 f806 	bl	8008858 <__swsetup_r>
 800884c:	2800      	cmp	r0, #0
 800884e:	d0d5      	beq.n	80087fc <__swbuf_r+0x20>
 8008850:	f04f 37ff 	mov.w	r7, #4294967295
 8008854:	e7f4      	b.n	8008840 <__swbuf_r+0x64>
	...

08008858 <__swsetup_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4b2a      	ldr	r3, [pc, #168]	; (8008904 <__swsetup_r+0xac>)
 800885c:	4605      	mov	r5, r0
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	460c      	mov	r4, r1
 8008862:	b118      	cbz	r0, 800886c <__swsetup_r+0x14>
 8008864:	6a03      	ldr	r3, [r0, #32]
 8008866:	b90b      	cbnz	r3, 800886c <__swsetup_r+0x14>
 8008868:	f7fd fb4e 	bl	8005f08 <__sinit>
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008872:	0718      	lsls	r0, r3, #28
 8008874:	d422      	bmi.n	80088bc <__swsetup_r+0x64>
 8008876:	06d9      	lsls	r1, r3, #27
 8008878:	d407      	bmi.n	800888a <__swsetup_r+0x32>
 800887a:	2309      	movs	r3, #9
 800887c:	602b      	str	r3, [r5, #0]
 800887e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	f04f 30ff 	mov.w	r0, #4294967295
 8008888:	e034      	b.n	80088f4 <__swsetup_r+0x9c>
 800888a:	0758      	lsls	r0, r3, #29
 800888c:	d512      	bpl.n	80088b4 <__swsetup_r+0x5c>
 800888e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008890:	b141      	cbz	r1, 80088a4 <__swsetup_r+0x4c>
 8008892:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008896:	4299      	cmp	r1, r3
 8008898:	d002      	beq.n	80088a0 <__swsetup_r+0x48>
 800889a:	4628      	mov	r0, r5
 800889c:	f7fe fa70 	bl	8006d80 <_free_r>
 80088a0:	2300      	movs	r3, #0
 80088a2:	6363      	str	r3, [r4, #52]	; 0x34
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	2300      	movs	r3, #0
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	f043 0308 	orr.w	r3, r3, #8
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	b94b      	cbnz	r3, 80088d4 <__swsetup_r+0x7c>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ca:	d003      	beq.n	80088d4 <__swsetup_r+0x7c>
 80088cc:	4621      	mov	r1, r4
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 f884 	bl	80089dc <__smakebuf_r>
 80088d4:	89a0      	ldrh	r0, [r4, #12]
 80088d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088da:	f010 0301 	ands.w	r3, r0, #1
 80088de:	d00a      	beq.n	80088f6 <__swsetup_r+0x9e>
 80088e0:	2300      	movs	r3, #0
 80088e2:	60a3      	str	r3, [r4, #8]
 80088e4:	6963      	ldr	r3, [r4, #20]
 80088e6:	425b      	negs	r3, r3
 80088e8:	61a3      	str	r3, [r4, #24]
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	b943      	cbnz	r3, 8008900 <__swsetup_r+0xa8>
 80088ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088f2:	d1c4      	bne.n	800887e <__swsetup_r+0x26>
 80088f4:	bd38      	pop	{r3, r4, r5, pc}
 80088f6:	0781      	lsls	r1, r0, #30
 80088f8:	bf58      	it	pl
 80088fa:	6963      	ldrpl	r3, [r4, #20]
 80088fc:	60a3      	str	r3, [r4, #8]
 80088fe:	e7f4      	b.n	80088ea <__swsetup_r+0x92>
 8008900:	2000      	movs	r0, #0
 8008902:	e7f7      	b.n	80088f4 <__swsetup_r+0x9c>
 8008904:	20000068 	.word	0x20000068

08008908 <_raise_r>:
 8008908:	291f      	cmp	r1, #31
 800890a:	b538      	push	{r3, r4, r5, lr}
 800890c:	4604      	mov	r4, r0
 800890e:	460d      	mov	r5, r1
 8008910:	d904      	bls.n	800891c <_raise_r+0x14>
 8008912:	2316      	movs	r3, #22
 8008914:	6003      	str	r3, [r0, #0]
 8008916:	f04f 30ff 	mov.w	r0, #4294967295
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800891e:	b112      	cbz	r2, 8008926 <_raise_r+0x1e>
 8008920:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008924:	b94b      	cbnz	r3, 800893a <_raise_r+0x32>
 8008926:	4620      	mov	r0, r4
 8008928:	f000 f830 	bl	800898c <_getpid_r>
 800892c:	462a      	mov	r2, r5
 800892e:	4601      	mov	r1, r0
 8008930:	4620      	mov	r0, r4
 8008932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008936:	f000 b817 	b.w	8008968 <_kill_r>
 800893a:	2b01      	cmp	r3, #1
 800893c:	d00a      	beq.n	8008954 <_raise_r+0x4c>
 800893e:	1c59      	adds	r1, r3, #1
 8008940:	d103      	bne.n	800894a <_raise_r+0x42>
 8008942:	2316      	movs	r3, #22
 8008944:	6003      	str	r3, [r0, #0]
 8008946:	2001      	movs	r0, #1
 8008948:	e7e7      	b.n	800891a <_raise_r+0x12>
 800894a:	2400      	movs	r4, #0
 800894c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008950:	4628      	mov	r0, r5
 8008952:	4798      	blx	r3
 8008954:	2000      	movs	r0, #0
 8008956:	e7e0      	b.n	800891a <_raise_r+0x12>

08008958 <raise>:
 8008958:	4b02      	ldr	r3, [pc, #8]	; (8008964 <raise+0xc>)
 800895a:	4601      	mov	r1, r0
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f7ff bfd3 	b.w	8008908 <_raise_r>
 8008962:	bf00      	nop
 8008964:	20000068 	.word	0x20000068

08008968 <_kill_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d07      	ldr	r5, [pc, #28]	; (8008988 <_kill_r+0x20>)
 800896c:	2300      	movs	r3, #0
 800896e:	4604      	mov	r4, r0
 8008970:	4608      	mov	r0, r1
 8008972:	4611      	mov	r1, r2
 8008974:	602b      	str	r3, [r5, #0]
 8008976:	f7f8 fc49 	bl	800120c <_kill>
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	d102      	bne.n	8008984 <_kill_r+0x1c>
 800897e:	682b      	ldr	r3, [r5, #0]
 8008980:	b103      	cbz	r3, 8008984 <_kill_r+0x1c>
 8008982:	6023      	str	r3, [r4, #0]
 8008984:	bd38      	pop	{r3, r4, r5, pc}
 8008986:	bf00      	nop
 8008988:	200005bc 	.word	0x200005bc

0800898c <_getpid_r>:
 800898c:	f7f8 bc36 	b.w	80011fc <_getpid>

08008990 <__swhatbuf_r>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	460c      	mov	r4, r1
 8008994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008998:	2900      	cmp	r1, #0
 800899a:	b096      	sub	sp, #88	; 0x58
 800899c:	4615      	mov	r5, r2
 800899e:	461e      	mov	r6, r3
 80089a0:	da0d      	bge.n	80089be <__swhatbuf_r+0x2e>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80089a8:	f04f 0100 	mov.w	r1, #0
 80089ac:	bf0c      	ite	eq
 80089ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80089b2:	2340      	movne	r3, #64	; 0x40
 80089b4:	2000      	movs	r0, #0
 80089b6:	6031      	str	r1, [r6, #0]
 80089b8:	602b      	str	r3, [r5, #0]
 80089ba:	b016      	add	sp, #88	; 0x58
 80089bc:	bd70      	pop	{r4, r5, r6, pc}
 80089be:	466a      	mov	r2, sp
 80089c0:	f000 f848 	bl	8008a54 <_fstat_r>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	dbec      	blt.n	80089a2 <__swhatbuf_r+0x12>
 80089c8:	9901      	ldr	r1, [sp, #4]
 80089ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80089ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80089d2:	4259      	negs	r1, r3
 80089d4:	4159      	adcs	r1, r3
 80089d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089da:	e7eb      	b.n	80089b4 <__swhatbuf_r+0x24>

080089dc <__smakebuf_r>:
 80089dc:	898b      	ldrh	r3, [r1, #12]
 80089de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089e0:	079d      	lsls	r5, r3, #30
 80089e2:	4606      	mov	r6, r0
 80089e4:	460c      	mov	r4, r1
 80089e6:	d507      	bpl.n	80089f8 <__smakebuf_r+0x1c>
 80089e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	6123      	str	r3, [r4, #16]
 80089f0:	2301      	movs	r3, #1
 80089f2:	6163      	str	r3, [r4, #20]
 80089f4:	b002      	add	sp, #8
 80089f6:	bd70      	pop	{r4, r5, r6, pc}
 80089f8:	ab01      	add	r3, sp, #4
 80089fa:	466a      	mov	r2, sp
 80089fc:	f7ff ffc8 	bl	8008990 <__swhatbuf_r>
 8008a00:	9900      	ldr	r1, [sp, #0]
 8008a02:	4605      	mov	r5, r0
 8008a04:	4630      	mov	r0, r6
 8008a06:	f7fe fa2f 	bl	8006e68 <_malloc_r>
 8008a0a:	b948      	cbnz	r0, 8008a20 <__smakebuf_r+0x44>
 8008a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a10:	059a      	lsls	r2, r3, #22
 8008a12:	d4ef      	bmi.n	80089f4 <__smakebuf_r+0x18>
 8008a14:	f023 0303 	bic.w	r3, r3, #3
 8008a18:	f043 0302 	orr.w	r3, r3, #2
 8008a1c:	81a3      	strh	r3, [r4, #12]
 8008a1e:	e7e3      	b.n	80089e8 <__smakebuf_r+0xc>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	6020      	str	r0, [r4, #0]
 8008a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a28:	81a3      	strh	r3, [r4, #12]
 8008a2a:	9b00      	ldr	r3, [sp, #0]
 8008a2c:	6163      	str	r3, [r4, #20]
 8008a2e:	9b01      	ldr	r3, [sp, #4]
 8008a30:	6120      	str	r0, [r4, #16]
 8008a32:	b15b      	cbz	r3, 8008a4c <__smakebuf_r+0x70>
 8008a34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f000 f81d 	bl	8008a78 <_isatty_r>
 8008a3e:	b128      	cbz	r0, 8008a4c <__smakebuf_r+0x70>
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	f023 0303 	bic.w	r3, r3, #3
 8008a46:	f043 0301 	orr.w	r3, r3, #1
 8008a4a:	81a3      	strh	r3, [r4, #12]
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	431d      	orrs	r5, r3
 8008a50:	81a5      	strh	r5, [r4, #12]
 8008a52:	e7cf      	b.n	80089f4 <__smakebuf_r+0x18>

08008a54 <_fstat_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d07      	ldr	r5, [pc, #28]	; (8008a74 <_fstat_r+0x20>)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	4611      	mov	r1, r2
 8008a60:	602b      	str	r3, [r5, #0]
 8008a62:	f7f8 fc32 	bl	80012ca <_fstat>
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	d102      	bne.n	8008a70 <_fstat_r+0x1c>
 8008a6a:	682b      	ldr	r3, [r5, #0]
 8008a6c:	b103      	cbz	r3, 8008a70 <_fstat_r+0x1c>
 8008a6e:	6023      	str	r3, [r4, #0]
 8008a70:	bd38      	pop	{r3, r4, r5, pc}
 8008a72:	bf00      	nop
 8008a74:	200005bc 	.word	0x200005bc

08008a78 <_isatty_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d06      	ldr	r5, [pc, #24]	; (8008a94 <_isatty_r+0x1c>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7f8 fc31 	bl	80012ea <_isatty>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_isatty_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_isatty_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	200005bc 	.word	0x200005bc

08008a98 <_init>:
 8008a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9a:	bf00      	nop
 8008a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9e:	bc08      	pop	{r3}
 8008aa0:	469e      	mov	lr, r3
 8008aa2:	4770      	bx	lr

08008aa4 <_fini>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	bf00      	nop
 8008aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aaa:	bc08      	pop	{r3}
 8008aac:	469e      	mov	lr, r3
 8008aae:	4770      	bx	lr
